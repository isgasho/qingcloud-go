// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/qcli
// source: security_group.proto

package qcli_pb

import (
	"encoding/json"
	"fmt"
	"log"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = json.Marshal
	_ = log.Print
	_ = os.Stdin

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdSecurityGroupService)
}

var CmdSecurityGroupService = cli.Command{
	Name:    "securitygroup",
	Aliases: []string{},
	Usage:   "manage SecurityGroupService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeSecurityGroups",
			Aliases: []string{},
			Usage:   "DescribeSecurityGroups",
			Flags:   _flag_SecurityGroupService_DescribeSecurityGroups,
			Action:  _func_SecurityGroupService_DescribeSecurityGroups,
		},
		{
			Name:    "CreateSecurityGroup",
			Aliases: []string{},
			Usage:   "CreateSecurityGroup",
			Flags:   _flag_SecurityGroupService_CreateSecurityGroup,
			Action:  _func_SecurityGroupService_CreateSecurityGroup,
		},
		{
			Name:    "DeleteSecurityGroups",
			Aliases: []string{},
			Usage:   "DeleteSecurityGroups",
			Flags:   _flag_SecurityGroupService_DeleteSecurityGroups,
			Action:  _func_SecurityGroupService_DeleteSecurityGroups,
		},
		{
			Name:    "ApplySecurityGroup",
			Aliases: []string{},
			Usage:   "ApplySecurityGroup",
			Flags:   _flag_SecurityGroupService_ApplySecurityGroup,
			Action:  _func_SecurityGroupService_ApplySecurityGroup,
		},
		{
			Name:    "ModifySecurityGroupAttributes",
			Aliases: []string{},
			Usage:   "ModifySecurityGroupAttributes",
			Flags:   _flag_SecurityGroupService_ModifySecurityGroupAttributes,
			Action:  _func_SecurityGroupService_ModifySecurityGroupAttributes,
		},
		{
			Name:    "DescribeSecurityGroupRules",
			Aliases: []string{},
			Usage:   "DescribeSecurityGroupRules",
			Flags:   _flag_SecurityGroupService_DescribeSecurityGroupRules,
			Action:  _func_SecurityGroupService_DescribeSecurityGroupRules,
		},
		{
			Name:    "AddSecurityGroupRules",
			Aliases: []string{},
			Usage:   "AddSecurityGroupRules",
			Flags:   _flag_SecurityGroupService_AddSecurityGroupRules,
			Action:  _func_SecurityGroupService_AddSecurityGroupRules,
		},
		{
			Name:    "DeleteSecurityGroupRules",
			Aliases: []string{},
			Usage:   "DeleteSecurityGroupRules",
			Flags:   _flag_SecurityGroupService_DeleteSecurityGroupRules,
			Action:  _func_SecurityGroupService_DeleteSecurityGroupRules,
		},
		{
			Name:    "ModifySecurityGroupRuleAttributes",
			Aliases: []string{},
			Usage:   "ModifySecurityGroupRuleAttributes",
			Flags:   _flag_SecurityGroupService_ModifySecurityGroupRuleAttributes,
			Action:  _func_SecurityGroupService_ModifySecurityGroupRuleAttributes,
		},
		{
			Name:    "CreateSecurityGroupSnapshot",
			Aliases: []string{},
			Usage:   "CreateSecurityGroupSnapshot",
			Flags:   _flag_SecurityGroupService_CreateSecurityGroupSnapshot,
			Action:  _func_SecurityGroupService_CreateSecurityGroupSnapshot,
		},
		{
			Name:    "DescribeSecurityGroupSnapshots",
			Aliases: []string{},
			Usage:   "DescribeSecurityGroupSnapshots",
			Flags:   _flag_SecurityGroupService_DescribeSecurityGroupSnapshots,
			Action:  _func_SecurityGroupService_DescribeSecurityGroupSnapshots,
		},
		{
			Name:    "DeleteSecurityGroupSnapshots",
			Aliases: []string{},
			Usage:   "DeleteSecurityGroupSnapshots",
			Flags:   _flag_SecurityGroupService_DeleteSecurityGroupSnapshots,
			Action:  _func_SecurityGroupService_DeleteSecurityGroupSnapshots,
		},
		{
			Name:    "RollbackSecurityGroup",
			Aliases: []string{},
			Usage:   "RollbackSecurityGroup",
			Flags:   _flag_SecurityGroupService_RollbackSecurityGroup,
			Action:  _func_SecurityGroupService_RollbackSecurityGroup,
		},
		{
			Name:    "DescribeSecurityGroupIPSets",
			Aliases: []string{},
			Usage:   "DescribeSecurityGroupIPSets",
			Flags:   _flag_SecurityGroupService_DescribeSecurityGroupIPSets,
			Action:  _func_SecurityGroupService_DescribeSecurityGroupIPSets,
		},
		{
			Name:    "CreateSecurityGroupIPSet",
			Aliases: []string{},
			Usage:   "CreateSecurityGroupIPSet",
			Flags:   _flag_SecurityGroupService_CreateSecurityGroupIPSet,
			Action:  _func_SecurityGroupService_CreateSecurityGroupIPSet,
		},
		{
			Name:    "DeleteSecurityGroupIPSets",
			Aliases: []string{},
			Usage:   "DeleteSecurityGroupIPSets",
			Flags:   _flag_SecurityGroupService_DeleteSecurityGroupIPSets,
			Action:  _func_SecurityGroupService_DeleteSecurityGroupIPSets,
		},
		{
			Name:    "ModifySecurityGroupIPSetAttributes",
			Aliases: []string{},
			Usage:   "ModifySecurityGroupIPSetAttributes",
			Flags:   _flag_SecurityGroupService_ModifySecurityGroupIPSetAttributes,
			Action:  _func_SecurityGroupService_ModifySecurityGroupIPSetAttributes,
		},
		{
			Name:    "CopySecurityGroupIPSets",
			Aliases: []string{},
			Usage:   "CopySecurityGroupIPSets",
			Flags:   _flag_SecurityGroupService_CopySecurityGroupIPSets,
			Action:  _func_SecurityGroupService_CopySecurityGroupIPSets,
		},
	},
}

var _flag_SecurityGroupService_DescribeSecurityGroups = []cli.Flag{
	cli.StringFlag{
		Name:  "security_groups",
		Usage: "security groups",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "search_word",
		Usage: "search word",
		Value: "",
	},
	cli.StringFlag{
		Name:  "tags",
		Usage: "tags",
		Value: "", // json: slice/message/map/time
	},
	cli.IntFlag{
		Name:  "verbose",
		Usage: "verbose",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_SecurityGroupService_DescribeSecurityGroups(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.DescribeSecurityGroupsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_groups") {
			if err := json.Unmarshal([]byte(c.String("security_groups")), &in.SecurityGroups); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("search_word") {
			in.SearchWord = proto.String(c.String("search_word"))
		}
		if c.IsSet("tags") {
			if err := json.Unmarshal([]byte(c.String("tags")), &in.Tags); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("verbose") {
			in.Verbose = proto.Int32(int32(c.Int("verbose")))
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeSecurityGroups(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_CreateSecurityGroup = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group_name",
		Usage: "security group name",
		Value: "",
	},
}

func _func_SecurityGroupService_CreateSecurityGroup(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.CreateSecurityGroupInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group_name") {
			in.SecurityGroupName = proto.String(c.String("security_group_name"))
		}
	}

	out, err := qc.CreateSecurityGroup(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_DeleteSecurityGroups = []cli.Flag{
	cli.StringFlag{
		Name:  "security_groups",
		Usage: "security groups",
		Value: "", // json: slice/message/map/time
	},
}

func _func_SecurityGroupService_DeleteSecurityGroups(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.DeleteSecurityGroupsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_groups") {
			if err := json.Unmarshal([]byte(c.String("security_groups")), &in.SecurityGroups); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteSecurityGroups(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_ApplySecurityGroup = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group",
		Usage: "security group",
		Value: "",
	},
	cli.StringFlag{
		Name:  "instances",
		Usage: "instances",
		Value: "", // json: slice/message/map/time
	},
}

func _func_SecurityGroupService_ApplySecurityGroup(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.ApplySecurityGroupInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group") {
			in.SecurityGroup = proto.String(c.String("security_group"))
		}
		if c.IsSet("instances") {
			if err := json.Unmarshal([]byte(c.String("instances")), &in.Instances); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.ApplySecurityGroup(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_ModifySecurityGroupAttributes = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group",
		Usage: "security group",
		Value: "",
	},
	cli.StringFlag{
		Name:  "security_group_name",
		Usage: "security group name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "description",
		Usage: "description",
		Value: "",
	},
}

func _func_SecurityGroupService_ModifySecurityGroupAttributes(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.ModifySecurityGroupAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group") {
			in.SecurityGroup = proto.String(c.String("security_group"))
		}
		if c.IsSet("security_group_name") {
			in.SecurityGroupName = proto.String(c.String("security_group_name"))
		}
		if c.IsSet("description") {
			in.Description = proto.String(c.String("description"))
		}
	}

	out, err := qc.ModifySecurityGroupAttributes(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_DescribeSecurityGroupRules = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group",
		Usage: "security group",
		Value: "",
	},
	cli.StringFlag{
		Name:  "security_group_rules",
		Usage: "security group rules",
		Value: "",
	},
	cli.IntFlag{
		Name:  "direction",
		Usage: "direction",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_SecurityGroupService_DescribeSecurityGroupRules(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.DescribeSecurityGroupRulesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group") {
			in.SecurityGroup = proto.String(c.String("security_group"))
		}
		if c.IsSet("security_group_rules") {
			in.SecurityGroupRules = proto.String(c.String("security_group_rules"))
		}
		if c.IsSet("direction") {
			in.Direction = proto.Int32(int32(c.Int("direction")))
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeSecurityGroupRules(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_AddSecurityGroupRules = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group",
		Usage: "security group",
		Value: "",
	},
	cli.StringFlag{
		Name:  "rules",
		Usage: "rules",
		Value: "", // json: slice/message/map/time
	},
}

func _func_SecurityGroupService_AddSecurityGroupRules(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.AddSecurityGroupRulesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group") {
			in.SecurityGroup = proto.String(c.String("security_group"))
		}
		if c.IsSet("rules") {
			if err := json.Unmarshal([]byte(c.String("rules")), &in.Rules); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.AddSecurityGroupRules(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_DeleteSecurityGroupRules = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group_rules",
		Usage: "security group rules",
		Value: "", // json: slice/message/map/time
	},
}

func _func_SecurityGroupService_DeleteSecurityGroupRules(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.DeleteSecurityGroupRulesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group_rules") {
			if err := json.Unmarshal([]byte(c.String("security_group_rules")), &in.SecurityGroupRules); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteSecurityGroupRules(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_ModifySecurityGroupRuleAttributes = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group_rule",
		Usage: "security group rule",
		Value: "",
	},
	cli.StringFlag{
		Name:  "security_group_rule_name",
		Usage: "security group rule name",
		Value: "",
	},
	cli.IntFlag{
		Name:  "priority",
		Usage: "priority",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "rule_action",
		Usage: "rule action",
		Value: "",
	},
	cli.IntFlag{
		Name:  "direction",
		Usage: "direction",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "protocol",
		Usage: "protocol",
		Value: "",
	},
	cli.StringFlag{
		Name:  "val1",
		Usage: "val1",
		Value: "",
	},
	cli.StringFlag{
		Name:  "val2",
		Usage: "val2",
		Value: "",
	},
	cli.StringFlag{
		Name:  "val3",
		Usage: "val3",
		Value: "",
	},
}

func _func_SecurityGroupService_ModifySecurityGroupRuleAttributes(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.ModifySecurityGroupRuleAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group_rule") {
			in.SecurityGroupRule = proto.String(c.String("security_group_rule"))
		}
		if c.IsSet("security_group_rule_name") {
			in.SecurityGroupRuleName = proto.String(c.String("security_group_rule_name"))
		}
		if c.IsSet("priority") {
			in.Priority = proto.Int32(int32(c.Int("priority")))
		}
		if c.IsSet("rule_action") {
			in.RuleAction = proto.String(c.String("rule_action"))
		}
		if c.IsSet("direction") {
			in.Direction = proto.Int32(int32(c.Int("direction")))
		}
		if c.IsSet("protocol") {
			in.Protocol = proto.String(c.String("protocol"))
		}
		if c.IsSet("val1") {
			in.Val1 = proto.String(c.String("val1"))
		}
		if c.IsSet("val2") {
			in.Val2 = proto.String(c.String("val2"))
		}
		if c.IsSet("val3") {
			in.Val3 = proto.String(c.String("val3"))
		}
	}

	out, err := qc.ModifySecurityGroupRuleAttributes(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_CreateSecurityGroupSnapshot = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group",
		Usage: "security group",
		Value: "",
	},
	cli.StringFlag{
		Name:  "name",
		Usage: "name",
		Value: "",
	},
}

func _func_SecurityGroupService_CreateSecurityGroupSnapshot(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.CreateSecurityGroupSnapshotInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group") {
			in.SecurityGroup = proto.String(c.String("security_group"))
		}
		if c.IsSet("name") {
			in.Name = proto.String(c.String("name"))
		}
	}

	out, err := qc.CreateSecurityGroupSnapshot(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_DescribeSecurityGroupSnapshots = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group",
		Usage: "security group",
		Value: "",
	},
	cli.StringFlag{
		Name:  "security_group_snapshots",
		Usage: "security group snapshots",
		Value: "", // json: slice/message/map/time
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_SecurityGroupService_DescribeSecurityGroupSnapshots(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.DescribeSecurityGroupSnapshotsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group") {
			in.SecurityGroup = proto.String(c.String("security_group"))
		}
		if c.IsSet("security_group_snapshots") {
			if err := json.Unmarshal([]byte(c.String("security_group_snapshots")), &in.SecurityGroupSnapshots); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeSecurityGroupSnapshots(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_DeleteSecurityGroupSnapshots = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group_snapshots",
		Usage: "security group snapshots",
		Value: "", // json: slice/message/map/time
	},
}

func _func_SecurityGroupService_DeleteSecurityGroupSnapshots(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.DeleteSecurityGroupSnapshotsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group_snapshots") {
			if err := json.Unmarshal([]byte(c.String("security_group_snapshots")), &in.SecurityGroupSnapshots); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteSecurityGroupSnapshots(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_RollbackSecurityGroup = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group",
		Usage: "security group",
		Value: "",
	},
	cli.StringFlag{
		Name:  "security_group_snapshot",
		Usage: "security group snapshot",
		Value: "",
	},
}

func _func_SecurityGroupService_RollbackSecurityGroup(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.RollbackSecurityGroupInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group") {
			in.SecurityGroup = proto.String(c.String("security_group"))
		}
		if c.IsSet("security_group_snapshot") {
			in.SecurityGroupSnapshot = proto.String(c.String("security_group_snapshot"))
		}
	}

	out, err := qc.RollbackSecurityGroup(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_DescribeSecurityGroupIPSets = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group_ipsets",
		Usage: "security group ipsets",
		Value: "", // json: slice/message/map/time
	},
	cli.IntFlag{
		Name:  "ipset_type",
		Usage: "ipset type",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "security_group_ipset_name",
		Usage: "security group ipset name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "tags",
		Usage: "tags",
		Value: "", // json: slice/message/map/time
	},
	cli.IntFlag{
		Name:  "verbose",
		Usage: "verbose",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_SecurityGroupService_DescribeSecurityGroupIPSets(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.DescribeSecurityGroupIPSetsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group_ipsets") {
			if err := json.Unmarshal([]byte(c.String("security_group_ipsets")), &in.SecurityGroupIpsets); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("ipset_type") {
			in.IpsetType = proto.Int32(int32(c.Int("ipset_type")))
		}
		if c.IsSet("security_group_ipset_name") {
			in.SecurityGroupIpsetName = proto.String(c.String("security_group_ipset_name"))
		}
		if c.IsSet("tags") {
			if err := json.Unmarshal([]byte(c.String("tags")), &in.Tags); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("verbose") {
			in.Verbose = proto.Int32(int32(c.Int("verbose")))
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeSecurityGroupIPSets(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_CreateSecurityGroupIPSet = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group_ipset_name",
		Usage: "security group ipset name",
		Value: "",
	},
	cli.IntFlag{
		Name:  "ipset_type",
		Usage: "ipset type",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "val",
		Usage: "val",
		Value: "",
	},
}

func _func_SecurityGroupService_CreateSecurityGroupIPSet(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.CreateSecurityGroupIPSetInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group_ipset_name") {
			in.SecurityGroupIpsetName = proto.String(c.String("security_group_ipset_name"))
		}
		if c.IsSet("ipset_type") {
			in.IpsetType = proto.Int32(int32(c.Int("ipset_type")))
		}
		if c.IsSet("val") {
			in.Val = proto.String(c.String("val"))
		}
	}

	out, err := qc.CreateSecurityGroupIPSet(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_DeleteSecurityGroupIPSets = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group_ipsets",
		Usage: "security group ipsets",
		Value: "", // json: slice/message/map/time
	},
}

func _func_SecurityGroupService_DeleteSecurityGroupIPSets(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.DeleteSecurityGroupIPSetsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group_ipsets") {
			if err := json.Unmarshal([]byte(c.String("security_group_ipsets")), &in.SecurityGroupIpsets); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteSecurityGroupIPSets(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_ModifySecurityGroupIPSetAttributes = []cli.Flag{
	cli.StringFlag{
		Name:  "security_group_ipset",
		Usage: "security group ipset",
		Value: "",
	},
	cli.StringFlag{
		Name:  "security_group_ipset_name",
		Usage: "security group ipset name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "description",
		Usage: "description",
		Value: "",
	},
	cli.StringFlag{
		Name:  "val",
		Usage: "val",
		Value: "",
	},
}

func _func_SecurityGroupService_ModifySecurityGroupIPSetAttributes(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.ModifySecurityGroupIPSetAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("security_group_ipset") {
			in.SecurityGroupIpset = proto.String(c.String("security_group_ipset"))
		}
		if c.IsSet("security_group_ipset_name") {
			in.SecurityGroupIpsetName = proto.String(c.String("security_group_ipset_name"))
		}
		if c.IsSet("description") {
			in.Description = proto.String(c.String("description"))
		}
		if c.IsSet("val") {
			in.Val = proto.String(c.String("val"))
		}
	}

	out, err := qc.ModifySecurityGroupIPSetAttributes(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SecurityGroupService_CopySecurityGroupIPSets = []cli.Flag{
	cli.StringFlag{
		Name:  "ipsets",
		Usage: "ipsets",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "dest_zones",
		Usage: "dest zones",
		Value: "", // json: slice/message/map/time
	},
}

func _func_SecurityGroupService_CopySecurityGroupIPSets(c *cli.Context) error {
	qc := pb.NewSecurityGroupService(pkgGetServerInfo())
	in := new(pb.CopySecurityGroupIPSetsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("ipsets") {
			if err := json.Unmarshal([]byte(c.String("ipsets")), &in.Ipsets); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("dest_zones") {
			if err := json.Unmarshal([]byte(c.String("dest_zones")), &in.DestZones); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.CopySecurityGroupIPSets(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
