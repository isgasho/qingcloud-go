// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/qcli
// source: load_balancer.proto

package qcli_pb

import (
	"encoding/json"
	"fmt"
	"log"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = json.Marshal
	_ = log.Print
	_ = os.Stdin

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdLoadBalancerService)
}

var CmdLoadBalancerService = cli.Command{
	Name:    "loadbalancer",
	Aliases: []string{},
	Usage:   "manage LoadBalancerService",
	Subcommands: []cli.Command{
		{
			Name:    "CreateLoadBalancer",
			Aliases: []string{},
			Usage:   "CreateLoadBalancer",
			Flags:   _flag_LoadBalancerService_CreateLoadBalancer,
			Action:  _func_LoadBalancerService_CreateLoadBalancer,
		},
		{
			Name:    "DescribeLoadBalancers",
			Aliases: []string{},
			Usage:   "DescribeLoadBalancers",
			Flags:   _flag_LoadBalancerService_DescribeLoadBalancers,
			Action:  _func_LoadBalancerService_DescribeLoadBalancers,
		},
		{
			Name:    "DeleteLoadBalancers",
			Aliases: []string{},
			Usage:   "DeleteLoadBalancers",
			Flags:   _flag_LoadBalancerService_DeleteLoadBalancers,
			Action:  _func_LoadBalancerService_DeleteLoadBalancers,
		},
		{
			Name:    "ModifyLoadBalancerAttributes",
			Aliases: []string{},
			Usage:   "ModifyLoadBalancerAttributes",
			Flags:   _flag_LoadBalancerService_ModifyLoadBalancerAttributes,
			Action:  _func_LoadBalancerService_ModifyLoadBalancerAttributes,
		},
		{
			Name:    "StartLoadBalancers",
			Aliases: []string{},
			Usage:   "StartLoadBalancers",
			Flags:   _flag_LoadBalancerService_StartLoadBalancers,
			Action:  _func_LoadBalancerService_StartLoadBalancers,
		},
		{
			Name:    "StopLoadBalancers",
			Aliases: []string{},
			Usage:   "StopLoadBalancers",
			Flags:   _flag_LoadBalancerService_StopLoadBalancers,
			Action:  _func_LoadBalancerService_StopLoadBalancers,
		},
		{
			Name:    "UpdateLoadBalancers",
			Aliases: []string{},
			Usage:   "UpdateLoadBalancers",
			Flags:   _flag_LoadBalancerService_UpdateLoadBalancers,
			Action:  _func_LoadBalancerService_UpdateLoadBalancers,
		},
		{
			Name:    "ResizeLoadBalancers",
			Aliases: []string{},
			Usage:   "ResizeLoadBalancers",
			Flags:   _flag_LoadBalancerService_ResizeLoadBalancers,
			Action:  _func_LoadBalancerService_ResizeLoadBalancers,
		},
		{
			Name:    "AssociateEipsToLoadBalancer",
			Aliases: []string{},
			Usage:   "AssociateEipsToLoadBalancer",
			Flags:   _flag_LoadBalancerService_AssociateEipsToLoadBalancer,
			Action:  _func_LoadBalancerService_AssociateEipsToLoadBalancer,
		},
		{
			Name:    "DissociateEipsFromLoadBalancer",
			Aliases: []string{},
			Usage:   "DissociateEipsFromLoadBalancer",
			Flags:   _flag_LoadBalancerService_DissociateEipsFromLoadBalancer,
			Action:  _func_LoadBalancerService_DissociateEipsFromLoadBalancer,
		},
		{
			Name:    "AddLoadBalancerListeners",
			Aliases: []string{},
			Usage:   "AddLoadBalancerListeners",
			Flags:   _flag_LoadBalancerService_AddLoadBalancerListeners,
			Action:  _func_LoadBalancerService_AddLoadBalancerListeners,
		},
		{
			Name:    "DescribeLoadBalancerListeners",
			Aliases: []string{},
			Usage:   "DescribeLoadBalancerListeners",
			Flags:   _flag_LoadBalancerService_DescribeLoadBalancerListeners,
			Action:  _func_LoadBalancerService_DescribeLoadBalancerListeners,
		},
		{
			Name:    "DeleteLoadBalancerListeners",
			Aliases: []string{},
			Usage:   "DeleteLoadBalancerListeners",
			Flags:   _flag_LoadBalancerService_DeleteLoadBalancerListeners,
			Action:  _func_LoadBalancerService_DeleteLoadBalancerListeners,
		},
		{
			Name:    "ModifyLoadBalancerListenerAttributes",
			Aliases: []string{},
			Usage:   "ModifyLoadBalancerListenerAttributes",
			Flags:   _flag_LoadBalancerService_ModifyLoadBalancerListenerAttributes,
			Action:  _func_LoadBalancerService_ModifyLoadBalancerListenerAttributes,
		},
		{
			Name:    "AddLoadBalancerBackends",
			Aliases: []string{},
			Usage:   "AddLoadBalancerBackends",
			Flags:   _flag_LoadBalancerService_AddLoadBalancerBackends,
			Action:  _func_LoadBalancerService_AddLoadBalancerBackends,
		},
		{
			Name:    "DescribeLoadBalancerBackends",
			Aliases: []string{},
			Usage:   "DescribeLoadBalancerBackends",
			Flags:   _flag_LoadBalancerService_DescribeLoadBalancerBackends,
			Action:  _func_LoadBalancerService_DescribeLoadBalancerBackends,
		},
		{
			Name:    "DeleteLoadBalancerBackends",
			Aliases: []string{},
			Usage:   "DeleteLoadBalancerBackends",
			Flags:   _flag_LoadBalancerService_DeleteLoadBalancerBackends,
			Action:  _func_LoadBalancerService_DeleteLoadBalancerBackends,
		},
		{
			Name:    "ModifyLoadBalancerBackendAttributes",
			Aliases: []string{},
			Usage:   "ModifyLoadBalancerBackendAttributes",
			Flags:   _flag_LoadBalancerService_ModifyLoadBalancerBackendAttributes,
			Action:  _func_LoadBalancerService_ModifyLoadBalancerBackendAttributes,
		},
		{
			Name:    "CreateLoadBalancerPolicy",
			Aliases: []string{},
			Usage:   "CreateLoadBalancerPolicy",
			Flags:   _flag_LoadBalancerService_CreateLoadBalancerPolicy,
			Action:  _func_LoadBalancerService_CreateLoadBalancerPolicy,
		},
		{
			Name:    "DescribeLoadBalancerPolicies",
			Aliases: []string{},
			Usage:   "DescribeLoadBalancerPolicies",
			Flags:   _flag_LoadBalancerService_DescribeLoadBalancerPolicies,
			Action:  _func_LoadBalancerService_DescribeLoadBalancerPolicies,
		},
		{
			Name:    "ModifyLoadBalancerPolicyAttributes",
			Aliases: []string{},
			Usage:   "ModifyLoadBalancerPolicyAttributes",
			Flags:   _flag_LoadBalancerService_ModifyLoadBalancerPolicyAttributes,
			Action:  _func_LoadBalancerService_ModifyLoadBalancerPolicyAttributes,
		},
		{
			Name:    "ApplyLoadBalancerPolicy",
			Aliases: []string{},
			Usage:   "ApplyLoadBalancerPolicy",
			Flags:   _flag_LoadBalancerService_ApplyLoadBalancerPolicy,
			Action:  _func_LoadBalancerService_ApplyLoadBalancerPolicy,
		},
		{
			Name:    "DeleteLoadBalancerPolicies",
			Aliases: []string{},
			Usage:   "DeleteLoadBalancerPolicies",
			Flags:   _flag_LoadBalancerService_DeleteLoadBalancerPolicies,
			Action:  _func_LoadBalancerService_DeleteLoadBalancerPolicies,
		},
		{
			Name:    "AddLoadBalancerPolicyRules",
			Aliases: []string{},
			Usage:   "AddLoadBalancerPolicyRules",
			Flags:   _flag_LoadBalancerService_AddLoadBalancerPolicyRules,
			Action:  _func_LoadBalancerService_AddLoadBalancerPolicyRules,
		},
		{
			Name:    "DescribeLoadBalancerPolicyRules",
			Aliases: []string{},
			Usage:   "DescribeLoadBalancerPolicyRules",
			Flags:   _flag_LoadBalancerService_DescribeLoadBalancerPolicyRules,
			Action:  _func_LoadBalancerService_DescribeLoadBalancerPolicyRules,
		},
		{
			Name:    "ModifyLoadBalancerPolicyRuleAttributes",
			Aliases: []string{},
			Usage:   "ModifyLoadBalancerPolicyRuleAttributes",
			Flags:   _flag_LoadBalancerService_ModifyLoadBalancerPolicyRuleAttributes,
			Action:  _func_LoadBalancerService_ModifyLoadBalancerPolicyRuleAttributes,
		},
		{
			Name:    "DeleteLoadBalancerPolicyRules",
			Aliases: []string{},
			Usage:   "DeleteLoadBalancerPolicyRules",
			Flags:   _flag_LoadBalancerService_DeleteLoadBalancerPolicyRules,
			Action:  _func_LoadBalancerService_DeleteLoadBalancerPolicyRules,
		},
		{
			Name:    "CreateServerCertificate",
			Aliases: []string{},
			Usage:   "CreateServerCertificate",
			Flags:   _flag_LoadBalancerService_CreateServerCertificate,
			Action:  _func_LoadBalancerService_CreateServerCertificate,
		},
		{
			Name:    "DescribeServerCertificates",
			Aliases: []string{},
			Usage:   "DescribeServerCertificates",
			Flags:   _flag_LoadBalancerService_DescribeServerCertificates,
			Action:  _func_LoadBalancerService_DescribeServerCertificates,
		},
		{
			Name:    "ModifyServerCertificateAttributes",
			Aliases: []string{},
			Usage:   "ModifyServerCertificateAttributes",
			Flags:   _flag_LoadBalancerService_ModifyServerCertificateAttributes,
			Action:  _func_LoadBalancerService_ModifyServerCertificateAttributes,
		},
		{
			Name:    "DeleteServerCertificates",
			Aliases: []string{},
			Usage:   "DeleteServerCertificates",
			Flags:   _flag_LoadBalancerService_DeleteServerCertificates,
			Action:  _func_LoadBalancerService_DeleteServerCertificates,
		},
	},
}

var _flag_LoadBalancerService_CreateLoadBalancer = []cli.Flag{
	cli.StringFlag{
		Name:  "eips",
		Usage: "eips",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "vxnet",
		Usage: "vxnet",
		Value: "",
	},
	cli.StringFlag{
		Name:  "private_ip",
		Usage: "private ip",
		Value: "",
	},
	cli.IntFlag{
		Name:  "loadbalancer_type",
		Usage: "loadbalancer type",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "loadbalancer_name",
		Usage: "loadbalancer name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "security_group",
		Usage: "security group",
		Value: "",
	},
	cli.IntFlag{
		Name:  "http_header_size",
		Usage: "http header size",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "target_user",
		Usage: "target user",
		Value: "",
	},
}

func _func_LoadBalancerService_CreateLoadBalancer(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.CreateLoadBalancerInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("eips") {
			if err := json.Unmarshal([]byte(c.String("eips")), &in.Eips); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("vxnet") {
			in.Vxnet = proto.String(c.String("vxnet"))
		}
		if c.IsSet("private_ip") {
			in.PrivateIp = proto.String(c.String("private_ip"))
		}
		if c.IsSet("loadbalancer_type") {
			in.LoadbalancerType = proto.Int32(int32(c.Int("loadbalancer_type")))
		}
		if c.IsSet("loadbalancer_name") {
			in.LoadbalancerName = proto.String(c.String("loadbalancer_name"))
		}
		if c.IsSet("security_group") {
			in.SecurityGroup = proto.String(c.String("security_group"))
		}
		if c.IsSet("http_header_size") {
			in.HttpHeaderSize = proto.Int32(int32(c.Int("http_header_size")))
		}
		if c.IsSet("target_user") {
			in.TargetUser = proto.String(c.String("target_user"))
		}
	}

	out, err := qc.CreateLoadBalancer(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DescribeLoadBalancers = []cli.Flag{
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "loadbalancers",
		Usage: "loadbalancers",
		Value: "", // json: slice/message/map/time
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "search_word",
		Usage: "search word",
		Value: "",
	},
	cli.StringFlag{
		Name:  "status",
		Usage: "status",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "tags",
		Usage: "tags",
		Value: "", // json: slice/message/map/time
	},
	cli.IntFlag{
		Name:  "verbose",
		Usage: "verbose",
		Value: 0,
	},
}

func _func_LoadBalancerService_DescribeLoadBalancers(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DescribeLoadBalancersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
		if c.IsSet("loadbalancers") {
			if err := json.Unmarshal([]byte(c.String("loadbalancers")), &in.Loadbalancers); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("search_word") {
			in.SearchWord = proto.String(c.String("search_word"))
		}
		if c.IsSet("status") {
			if err := json.Unmarshal([]byte(c.String("status")), &in.Status); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("tags") {
			if err := json.Unmarshal([]byte(c.String("tags")), &in.Tags); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("verbose") {
			in.Verbose = proto.Int32(int32(c.Int("verbose")))
		}
	}

	out, err := qc.DescribeLoadBalancers(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DeleteLoadBalancers = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancers",
		Usage: "loadbalancers",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_DeleteLoadBalancers(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DeleteLoadBalancersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancers") {
			if err := json.Unmarshal([]byte(c.String("loadbalancers")), &in.Loadbalancers); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteLoadBalancers(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_ModifyLoadBalancerAttributes = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer",
		Usage: "loadbalancer",
		Value: "",
	},
	cli.StringFlag{
		Name:  "loadbalancer_name",
		Usage: "loadbalancer name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "security_group",
		Usage: "security group",
		Value: "",
	},
	cli.StringFlag{
		Name:  "description",
		Usage: "description",
		Value: "",
	},
	cli.StringFlag{
		Name:  "private_ip",
		Usage: "private ip",
		Value: "",
	},
	cli.IntFlag{
		Name:  "http_header_size",
		Usage: "http header size",
		Value: 0,
	},
}

func _func_LoadBalancerService_ModifyLoadBalancerAttributes(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.ModifyLoadBalancerAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer") {
			in.Loadbalancer = proto.String(c.String("loadbalancer"))
		}
		if c.IsSet("loadbalancer_name") {
			in.LoadbalancerName = proto.String(c.String("loadbalancer_name"))
		}
		if c.IsSet("security_group") {
			in.SecurityGroup = proto.String(c.String("security_group"))
		}
		if c.IsSet("description") {
			in.Description = proto.String(c.String("description"))
		}
		if c.IsSet("private_ip") {
			in.PrivateIp = proto.String(c.String("private_ip"))
		}
		if c.IsSet("http_header_size") {
			in.HttpHeaderSize = proto.Int32(int32(c.Int("http_header_size")))
		}
	}

	out, err := qc.ModifyLoadBalancerAttributes(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_StartLoadBalancers = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancers",
		Usage: "loadbalancers",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_StartLoadBalancers(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.StartLoadBalancersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancers") {
			if err := json.Unmarshal([]byte(c.String("loadbalancers")), &in.Loadbalancers); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.StartLoadBalancers(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_StopLoadBalancers = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancers",
		Usage: "loadbalancers",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_StopLoadBalancers(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.StopLoadBalancersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancers") {
			if err := json.Unmarshal([]byte(c.String("loadbalancers")), &in.Loadbalancers); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.StopLoadBalancers(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_UpdateLoadBalancers = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancers",
		Usage: "loadbalancers",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_UpdateLoadBalancers(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.UpdateLoadBalancersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancers") {
			if err := json.Unmarshal([]byte(c.String("loadbalancers")), &in.Loadbalancers); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.UpdateLoadBalancers(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_ResizeLoadBalancers = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancers",
		Usage: "loadbalancers",
		Value: "", // json: slice/message/map/time
	},
	cli.IntFlag{
		Name:  "loadbalancer_type",
		Usage: "loadbalancer type",
		Value: 0,
	},
}

func _func_LoadBalancerService_ResizeLoadBalancers(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.ResizeLoadBalancersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancers") {
			if err := json.Unmarshal([]byte(c.String("loadbalancers")), &in.Loadbalancers); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("loadbalancer_type") {
			in.LoadbalancerType = proto.Int32(int32(c.Int("loadbalancer_type")))
		}
	}

	out, err := qc.ResizeLoadBalancers(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_AssociateEipsToLoadBalancer = []cli.Flag{
	cli.StringFlag{
		Name:  "eips",
		Usage: "eips",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "loadbalancer",
		Usage: "loadbalancer",
		Value: "",
	},
}

func _func_LoadBalancerService_AssociateEipsToLoadBalancer(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.AssociateEipsToLoadBalancerInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("eips") {
			if err := json.Unmarshal([]byte(c.String("eips")), &in.Eips); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("loadbalancer") {
			in.Loadbalancer = proto.String(c.String("loadbalancer"))
		}
	}

	out, err := qc.AssociateEipsToLoadBalancer(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DissociateEipsFromLoadBalancer = []cli.Flag{
	cli.StringFlag{
		Name:  "eips",
		Usage: "eips",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "loadbalancer",
		Usage: "loadbalancer",
		Value: "",
	},
}

func _func_LoadBalancerService_DissociateEipsFromLoadBalancer(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DissociateEipsFromLoadBalancerInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("eips") {
			if err := json.Unmarshal([]byte(c.String("eips")), &in.Eips); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("loadbalancer") {
			in.Loadbalancer = proto.String(c.String("loadbalancer"))
		}
	}

	out, err := qc.DissociateEipsFromLoadBalancer(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_AddLoadBalancerListeners = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer",
		Usage: "loadbalancer",
		Value: "",
	},
	cli.StringFlag{
		Name:  "listeners",
		Usage: "listeners",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_AddLoadBalancerListeners(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.AddLoadBalancerListenersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer") {
			in.Loadbalancer = proto.String(c.String("loadbalancer"))
		}
		if c.IsSet("listeners") {
			if err := json.Unmarshal([]byte(c.String("listeners")), &in.Listeners); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.AddLoadBalancerListeners(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DescribeLoadBalancerListeners = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_listeners",
		Usage: "loadbalancer listeners",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "loadbalancer",
		Usage: "loadbalancer",
		Value: "",
	},
	cli.IntFlag{
		Name:  "verbose",
		Usage: "verbose",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_LoadBalancerService_DescribeLoadBalancerListeners(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DescribeLoadBalancerListenersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_listeners") {
			if err := json.Unmarshal([]byte(c.String("loadbalancer_listeners")), &in.LoadbalancerListeners); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("loadbalancer") {
			in.Loadbalancer = proto.String(c.String("loadbalancer"))
		}
		if c.IsSet("verbose") {
			in.Verbose = proto.Int32(int32(c.Int("verbose")))
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeLoadBalancerListeners(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DeleteLoadBalancerListeners = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_listeners",
		Usage: "loadbalancer listeners",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_DeleteLoadBalancerListeners(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DeleteLoadBalancerListenersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_listeners") {
			if err := json.Unmarshal([]byte(c.String("loadbalancer_listeners")), &in.LoadbalancerListeners); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteLoadBalancerListeners(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_ModifyLoadBalancerListenerAttributes = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_listener",
		Usage: "loadbalancer listener",
		Value: "",
	},
	cli.StringFlag{
		Name:  "loadbalancer_listener_name",
		Usage: "loadbalancer listener name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "server_certificate_id",
		Usage: "server certificate id",
		Value: "",
	},
	cli.StringFlag{
		Name:  "balance_mode",
		Usage: "balance mode",
		Value: "",
	},
	cli.StringFlag{
		Name:  "session_sticky",
		Usage: "session sticky",
		Value: "",
	},
	cli.IntFlag{
		Name:  "forwardfor",
		Usage: "forwardfor",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "healthy_check_method",
		Usage: "healthy check method",
		Value: "",
	},
	cli.StringFlag{
		Name:  "healthy_check_option",
		Usage: "healthy check option",
		Value: "",
	},
	cli.StringFlag{
		Name:  "listener_option",
		Usage: "listener option",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_ModifyLoadBalancerListenerAttributes(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.ModifyLoadBalancerListenerAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_listener") {
			in.LoadbalancerListener = proto.String(c.String("loadbalancer_listener"))
		}
		if c.IsSet("loadbalancer_listener_name") {
			in.LoadbalancerListenerName = proto.String(c.String("loadbalancer_listener_name"))
		}
		if c.IsSet("server_certificate_id") {
			in.ServerCertificateId = proto.String(c.String("server_certificate_id"))
		}
		if c.IsSet("balance_mode") {
			in.BalanceMode = proto.String(c.String("balance_mode"))
		}
		if c.IsSet("session_sticky") {
			in.SessionSticky = proto.String(c.String("session_sticky"))
		}
		if c.IsSet("forwardfor") {
			in.Forwardfor = proto.Int32(int32(c.Int("forwardfor")))
		}
		if c.IsSet("healthy_check_method") {
			in.HealthyCheckMethod = proto.String(c.String("healthy_check_method"))
		}
		if c.IsSet("healthy_check_option") {
			in.HealthyCheckOption = proto.String(c.String("healthy_check_option"))
		}
		if c.IsSet("listener_option") {
			if err := json.Unmarshal([]byte(c.String("listener_option")), &in.ListenerOption); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.ModifyLoadBalancerListenerAttributes(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_AddLoadBalancerBackends = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_listener",
		Usage: "loadbalancer listener",
		Value: "",
	},
	cli.StringFlag{
		Name:  "backends",
		Usage: "backends",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_AddLoadBalancerBackends(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.AddLoadBalancerBackendsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_listener") {
			in.LoadbalancerListener = proto.String(c.String("loadbalancer_listener"))
		}
		if c.IsSet("backends") {
			if err := json.Unmarshal([]byte(c.String("backends")), &in.Backends); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.AddLoadBalancerBackends(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DescribeLoadBalancerBackends = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_backends",
		Usage: "loadbalancer backends",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "loadbalancer_listener",
		Usage: "loadbalancer listener",
		Value: "",
	},
	cli.StringFlag{
		Name:  "loadbalancer",
		Usage: "loadbalancer",
		Value: "",
	},
	cli.IntFlag{
		Name:  "verbose",
		Usage: "verbose",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_LoadBalancerService_DescribeLoadBalancerBackends(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DescribeLoadBalancerBackendsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_backends") {
			if err := json.Unmarshal([]byte(c.String("loadbalancer_backends")), &in.LoadbalancerBackends); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("loadbalancer_listener") {
			in.LoadbalancerListener = proto.String(c.String("loadbalancer_listener"))
		}
		if c.IsSet("loadbalancer") {
			in.Loadbalancer = proto.String(c.String("loadbalancer"))
		}
		if c.IsSet("verbose") {
			in.Verbose = proto.Int32(int32(c.Int("verbose")))
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeLoadBalancerBackends(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DeleteLoadBalancerBackends = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_backends",
		Usage: "loadbalancer backends",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_DeleteLoadBalancerBackends(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DeleteLoadBalancerBackendsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_backends") {
			if err := json.Unmarshal([]byte(c.String("loadbalancer_backends")), &in.LoadbalancerBackends); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteLoadBalancerBackends(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_ModifyLoadBalancerBackendAttributes = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_backend",
		Usage: "loadbalancer backend",
		Value: "",
	},
	cli.StringFlag{
		Name:  "port",
		Usage: "port",
		Value: "",
	},
	cli.StringFlag{
		Name:  "weight",
		Usage: "weight",
		Value: "",
	},
	cli.IntFlag{
		Name:  "disabled",
		Usage: "disabled",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "loadbalancer_policy_id",
		Usage: "loadbalancer policy id",
		Value: "",
	},
}

func _func_LoadBalancerService_ModifyLoadBalancerBackendAttributes(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.ModifyLoadBalancerBackendAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_backend") {
			in.LoadbalancerBackend = proto.String(c.String("loadbalancer_backend"))
		}
		if c.IsSet("port") {
			in.Port = proto.String(c.String("port"))
		}
		if c.IsSet("weight") {
			in.Weight = proto.String(c.String("weight"))
		}
		if c.IsSet("disabled") {
			in.Disabled = proto.Int32(int32(c.Int("disabled")))
		}
		if c.IsSet("loadbalancer_policy_id") {
			in.LoadbalancerPolicyId = proto.String(c.String("loadbalancer_policy_id"))
		}
	}

	out, err := qc.ModifyLoadBalancerBackendAttributes(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_CreateLoadBalancerPolicy = []cli.Flag{
	cli.StringFlag{
		Name:  "operator",
		Usage: "operator",
		Value: "",
	},
}

func _func_LoadBalancerService_CreateLoadBalancerPolicy(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.CreateLoadBalancerPolicyInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("operator") {
			in.Operator = proto.String(c.String("operator"))
		}
	}

	out, err := qc.CreateLoadBalancerPolicy(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DescribeLoadBalancerPolicies = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_policies",
		Usage: "loadbalancer policies",
		Value: "", // json: slice/message/map/time
	},
	cli.IntFlag{
		Name:  "verbose",
		Usage: "verbose",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_LoadBalancerService_DescribeLoadBalancerPolicies(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DescribeLoadBalancerPoliciesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_policies") {
			if err := json.Unmarshal([]byte(c.String("loadbalancer_policies")), &in.LoadbalancerPolicies); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("verbose") {
			in.Verbose = proto.Int32(int32(c.Int("verbose")))
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeLoadBalancerPolicies(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_ModifyLoadBalancerPolicyAttributes = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_policy",
		Usage: "loadbalancer policy",
		Value: "",
	},
	cli.StringFlag{
		Name:  "loadbalancer_policy_name",
		Usage: "loadbalancer policy name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "operator",
		Usage: "operator",
		Value: "",
	},
}

func _func_LoadBalancerService_ModifyLoadBalancerPolicyAttributes(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.ModifyLoadBalancerPolicyAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_policy") {
			in.LoadbalancerPolicy = proto.String(c.String("loadbalancer_policy"))
		}
		if c.IsSet("loadbalancer_policy_name") {
			in.LoadbalancerPolicyName = proto.String(c.String("loadbalancer_policy_name"))
		}
		if c.IsSet("operator") {
			in.Operator = proto.String(c.String("operator"))
		}
	}

	out, err := qc.ModifyLoadBalancerPolicyAttributes(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_ApplyLoadBalancerPolicy = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_policy",
		Usage: "loadbalancer policy",
		Value: "",
	},
}

func _func_LoadBalancerService_ApplyLoadBalancerPolicy(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.ApplyLoadBalancerPolicyInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_policy") {
			in.LoadbalancerPolicy = proto.String(c.String("loadbalancer_policy"))
		}
	}

	out, err := qc.ApplyLoadBalancerPolicy(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DeleteLoadBalancerPolicies = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_policies",
		Usage: "loadbalancer policies",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_DeleteLoadBalancerPolicies(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DeleteLoadBalancerPoliciesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_policies") {
			if err := json.Unmarshal([]byte(c.String("loadbalancer_policies")), &in.LoadbalancerPolicies); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteLoadBalancerPolicies(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_AddLoadBalancerPolicyRules = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_policy",
		Usage: "loadbalancer policy",
		Value: "",
	},
	cli.StringFlag{
		Name:  "rules",
		Usage: "rules",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_AddLoadBalancerPolicyRules(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.AddLoadBalancerPolicyRulesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_policy") {
			in.LoadbalancerPolicy = proto.String(c.String("loadbalancer_policy"))
		}
		if c.IsSet("rules") {
			if err := json.Unmarshal([]byte(c.String("rules")), &in.Rules); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.AddLoadBalancerPolicyRules(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DescribeLoadBalancerPolicyRules = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_policy_rules",
		Usage: "loadbalancer policy rules",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "loadbalancer_policy",
		Usage: "loadbalancer policy",
		Value: "",
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_LoadBalancerService_DescribeLoadBalancerPolicyRules(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DescribeLoadBalancerPolicyRulesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_policy_rules") {
			if err := json.Unmarshal([]byte(c.String("loadbalancer_policy_rules")), &in.LoadbalancerPolicyRules); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("loadbalancer_policy") {
			in.LoadbalancerPolicy = proto.String(c.String("loadbalancer_policy"))
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeLoadBalancerPolicyRules(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_ModifyLoadBalancerPolicyRuleAttributes = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_policy_rule",
		Usage: "loadbalancer policy rule",
		Value: "",
	},
	cli.StringFlag{
		Name:  "loadbalancer_policy_rule_name",
		Usage: "loadbalancer policy rule name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "val",
		Usage: "val",
		Value: "",
	},
}

func _func_LoadBalancerService_ModifyLoadBalancerPolicyRuleAttributes(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.ModifyLoadBalancerPolicyRuleAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_policy_rule") {
			in.LoadbalancerPolicyRule = proto.String(c.String("loadbalancer_policy_rule"))
		}
		if c.IsSet("loadbalancer_policy_rule_name") {
			in.LoadbalancerPolicyRuleName = proto.String(c.String("loadbalancer_policy_rule_name"))
		}
		if c.IsSet("val") {
			in.Val = proto.String(c.String("val"))
		}
	}

	out, err := qc.ModifyLoadBalancerPolicyRuleAttributes(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DeleteLoadBalancerPolicyRules = []cli.Flag{
	cli.StringFlag{
		Name:  "loadbalancer_policy_rules",
		Usage: "loadbalancer policy rules",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_DeleteLoadBalancerPolicyRules(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DeleteLoadBalancerPolicyRulesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("loadbalancer_policy_rules") {
			if err := json.Unmarshal([]byte(c.String("loadbalancer_policy_rules")), &in.LoadbalancerPolicyRules); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteLoadBalancerPolicyRules(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_CreateServerCertificate = []cli.Flag{
	cli.StringFlag{
		Name:  "server_certificate_name",
		Usage: "server certificate name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "certificate_content",
		Usage: "certificate content",
		Value: "",
	},
	cli.StringFlag{
		Name:  "private_key",
		Usage: "private key",
		Value: "",
	},
}

func _func_LoadBalancerService_CreateServerCertificate(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.CreateServerCertificateInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("server_certificate_name") {
			in.ServerCertificateName = proto.String(c.String("server_certificate_name"))
		}
		if c.IsSet("certificate_content") {
			in.CertificateContent = proto.String(c.String("certificate_content"))
		}
		if c.IsSet("private_key") {
			in.PrivateKey = proto.String(c.String("private_key"))
		}
	}

	out, err := qc.CreateServerCertificate(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DescribeServerCertificates = []cli.Flag{
	cli.StringFlag{
		Name:  "server_certificates",
		Usage: "server certificates",
		Value: "",
	},
	cli.StringFlag{
		Name:  "search_word",
		Usage: "search word",
		Value: "",
	},
	cli.IntFlag{
		Name:  "verbose",
		Usage: "verbose",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_LoadBalancerService_DescribeServerCertificates(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DescribeServerCertificatesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("server_certificates") {
			in.ServerCertificates = proto.String(c.String("server_certificates"))
		}
		if c.IsSet("search_word") {
			in.SearchWord = proto.String(c.String("search_word"))
		}
		if c.IsSet("verbose") {
			in.Verbose = proto.Int32(int32(c.Int("verbose")))
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeServerCertificates(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_ModifyServerCertificateAttributes = []cli.Flag{
	cli.StringFlag{
		Name:  "server_certificate",
		Usage: "server certificate",
		Value: "",
	},
	cli.StringFlag{
		Name:  "server_certificate_name",
		Usage: "server certificate name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "description",
		Usage: "description",
		Value: "",
	},
}

func _func_LoadBalancerService_ModifyServerCertificateAttributes(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.ModifyServerCertificateAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("server_certificate") {
			in.ServerCertificate = proto.String(c.String("server_certificate"))
		}
		if c.IsSet("server_certificate_name") {
			in.ServerCertificateName = proto.String(c.String("server_certificate_name"))
		}
		if c.IsSet("description") {
			in.Description = proto.String(c.String("description"))
		}
	}

	out, err := qc.ModifyServerCertificateAttributes(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_LoadBalancerService_DeleteServerCertificates = []cli.Flag{
	cli.StringFlag{
		Name:  "server_certificates",
		Usage: "server certificates",
		Value: "", // json: slice/message/map/time
	},
}

func _func_LoadBalancerService_DeleteServerCertificates(c *cli.Context) error {
	qc := pb.NewLoadBalancerService(pkgGetServerInfo(c))
	in := new(pb.DeleteServerCertificatesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("server_certificates") {
			if err := json.Unmarshal([]byte(c.String("server_certificates")), &in.ServerCertificates); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteServerCertificates(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
