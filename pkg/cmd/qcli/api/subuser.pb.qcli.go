// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/qcli
// source: subuser.proto

package qcli_pb

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = json.Marshal
	_ = os.Stdin

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdSubuserService)
}

var CmdSubuserService = cli.Command{
	Name:    "subuser",
	Aliases: []string{},
	Usage:   "manage SubuserService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeSubUsers",
			Aliases: []string{},
			Usage:   "DescribeSubUsers",
			Flags:   _flag_SubuserService_DescribeSubUsers,
			Action:  _func_SubuserService_DescribeSubUsers,
		},
		{
			Name:    "CreateSubUser",
			Aliases: []string{},
			Usage:   "CreateSubUser",
			Flags:   _flag_SubuserService_CreateSubUser,
			Action:  _func_SubuserService_CreateSubUser,
		},
		{
			Name:    "ModifySubUserAttributes",
			Aliases: []string{},
			Usage:   "ModifySubUserAttributes",
			Flags:   _flag_SubuserService_ModifySubUserAttributes,
			Action:  _func_SubuserService_ModifySubUserAttributes,
		},
		{
			Name:    "DeleteSubUsers",
			Aliases: []string{},
			Usage:   "DeleteSubUsers",
			Flags:   _flag_SubuserService_DeleteSubUsers,
			Action:  _func_SubuserService_DeleteSubUsers,
		},
		{
			Name:    "RestoreSubUsers",
			Aliases: []string{},
			Usage:   "RestoreSubUsers",
			Flags:   _flag_SubuserService_RestoreSubUsers,
			Action:  _func_SubuserService_RestoreSubUsers,
		},
	},
}

var _flag_SubuserService_DescribeSubUsers = []cli.Flag{
	cli.StringFlag{
		Name:  "users",
		Usage: "users",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "status",
		Usage: "status",
		Value: "",
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_SubuserService_DescribeSubUsers(c *cli.Context) error {
	conf := config.MustLoad(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSubuserService(conf, zone)

	in := new(pb.DescribeSubUsersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("users") {
			if err := json.Unmarshal([]byte(c.String("users")), &in.Users); err != nil {
				logger.Fatal(err)
			}
		}
		if c.IsSet("status") {
			in.Status = proto.String(c.String("status"))
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeSubUsers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SubuserService_CreateSubUser = []cli.Flag{
	cli.StringFlag{
		Name:  "email",
		Usage: "email",
		Value: "",
	},
	cli.StringFlag{
		Name:  "user_name",
		Usage: "user name",
		Value: "",
	},
	cli.StringFlag{
		Name:  "passwd",
		Usage: "passwd",
		Value: "",
	},
	cli.StringFlag{
		Name:  "notify_email",
		Usage: "notify email",
		Value: "",
	},
}

func _func_SubuserService_CreateSubUser(c *cli.Context) error {
	conf := config.MustLoad(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSubuserService(conf, zone)

	in := new(pb.CreateSubUserInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("email") {
			in.Email = proto.String(c.String("email"))
		}
		if c.IsSet("user_name") {
			in.UserName = proto.String(c.String("user_name"))
		}
		if c.IsSet("passwd") {
			in.Passwd = proto.String(c.String("passwd"))
		}
		if c.IsSet("notify_email") {
			in.NotifyEmail = proto.String(c.String("notify_email"))
		}
	}

	out, err := qc.CreateSubUser(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SubuserService_ModifySubUserAttributes = []cli.Flag{
	cli.StringFlag{
		Name:  "user",
		Usage: "user",
		Value: "",
	},
	cli.StringFlag{
		Name:  "user_name",
		Usage: "user name",
		Value: "",
	},
	cli.IntFlag{
		Name:  "nologin",
		Usage: "nologin",
		Value: 0,
	},
	cli.StringFlag{
		Name:  "notify_email",
		Usage: "notify email",
		Value: "",
	},
}

func _func_SubuserService_ModifySubUserAttributes(c *cli.Context) error {
	conf := config.MustLoad(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSubuserService(conf, zone)

	in := new(pb.ModifySubUserAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("user") {
			in.User = proto.String(c.String("user"))
		}
		if c.IsSet("user_name") {
			in.UserName = proto.String(c.String("user_name"))
		}
		if c.IsSet("nologin") {
			in.Nologin = proto.Int32(int32(c.Int("nologin")))
		}
		if c.IsSet("notify_email") {
			in.NotifyEmail = proto.String(c.String("notify_email"))
		}
	}

	out, err := qc.ModifySubUserAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SubuserService_DeleteSubUsers = []cli.Flag{
	cli.StringFlag{
		Name:  "users",
		Usage: "users",
		Value: "", // json: slice/message/map/time
	},
}

func _func_SubuserService_DeleteSubUsers(c *cli.Context) error {
	conf := config.MustLoad(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSubuserService(conf, zone)

	in := new(pb.DeleteSubUsersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("users") {
			if err := json.Unmarshal([]byte(c.String("users")), &in.Users); err != nil {
				logger.Fatal(err)
			}
		}
	}

	out, err := qc.DeleteSubUsers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SubuserService_RestoreSubUsers = []cli.Flag{
	cli.StringFlag{
		Name:  "users",
		Usage: "users",
		Value: "", // json: slice/message/map/time
	},
}

func _func_SubuserService_RestoreSubUsers(c *cli.Context) error {
	conf := config.MustLoad(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSubuserService(conf, zone)

	in := new(pb.RestoreSubUsersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("users") {
			if err := json.Unmarshal([]byte(c.String("users")), &in.Users); err != nil {
				logger.Fatal(err)
			}
		}
	}

	out, err := qc.RestoreSubUsers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
