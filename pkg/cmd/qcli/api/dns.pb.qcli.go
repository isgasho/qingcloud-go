// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/qcli
// source: dns.proto

package qcli_pb

import (
	"encoding/json"
	"fmt"
	"log"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = json.Marshal
	_ = log.Print
	_ = os.Stdin

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdDNSAliasService)
}

var CmdDNSAliasService = cli.Command{
	Name:    "dnsalias",
	Aliases: []string{},
	Usage:   "manage DNSAliasService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeDNSAliases",
			Aliases: []string{},
			Usage:   "DescribeDNSAliases",
			Flags:   _flag_DNSAliasService_DescribeDNSAliases,
			Action:  _func_DNSAliasService_DescribeDNSAliases,
		},
		{
			Name:    "AssociateDNSAlias",
			Aliases: []string{},
			Usage:   "AssociateDNSAlias",
			Flags:   _flag_DNSAliasService_AssociateDNSAlias,
			Action:  _func_DNSAliasService_AssociateDNSAlias,
		},
		{
			Name:    "DissociateDNSAliases",
			Aliases: []string{},
			Usage:   "DissociateDNSAliases",
			Flags:   _flag_DNSAliasService_DissociateDNSAliases,
			Action:  _func_DNSAliasService_DissociateDNSAliases,
		},
		{
			Name:    "GetDNSLabel",
			Aliases: []string{},
			Usage:   "GetDNSLabel",
			Flags:   _flag_DNSAliasService_GetDNSLabel,
			Action:  _func_DNSAliasService_GetDNSLabel,
		},
	},
}

var _flag_DNSAliasService_DescribeDNSAliases = []cli.Flag{
	cli.StringFlag{
		Name:  "dns_aliases",
		Usage: "dns aliases",
		Value: "", // json: slice/message/map/time
	},
	cli.StringFlag{
		Name:  "resource_id",
		Usage: "resource id",
		Value: "",
	},
	cli.StringFlag{
		Name:  "search_word",
		Usage: "search word",
		Value: "",
	},
	cli.IntFlag{
		Name:  "offset",
		Usage: "offset",
		Value: 0,
	},
	cli.IntFlag{
		Name:  "limit",
		Usage: "limit",
		Value: 0,
	},
}

func _func_DNSAliasService_DescribeDNSAliases(c *cli.Context) error {
	zone := c.GlobalString("zone")
	qc := pb.NewDNSAliasService("", "", zone)

	in := new(pb.DescribeDNSAliasesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("dns_aliases") {
			if err := json.Unmarshal([]byte(c.String("dns_aliases")), &in.DnsAliases); err != nil {
				log.Fatal(err)
			}
		}
		if c.IsSet("resource_id") {
			in.ResourceId = proto.String(c.String("resource_id"))
		}
		if c.IsSet("search_word") {
			in.SearchWord = proto.String(c.String("search_word"))
		}
		if c.IsSet("offset") {
			in.Offset = proto.Int32(int32(c.Int("offset")))
		}
		if c.IsSet("limit") {
			in.Limit = proto.Int32(int32(c.Int("limit")))
		}
	}

	out, err := qc.DescribeDNSAliases(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_DNSAliasService_AssociateDNSAlias = []cli.Flag{
	cli.StringFlag{
		Name:  "prefix",
		Usage: "prefix",
		Value: "",
	},
	cli.StringFlag{
		Name:  "resource",
		Usage: "resource",
		Value: "",
	},
	cli.StringFlag{
		Name:  "dns_alias_name",
		Usage: "dns alias name",
		Value: "",
	},
}

func _func_DNSAliasService_AssociateDNSAlias(c *cli.Context) error {
	zone := c.GlobalString("zone")
	qc := pb.NewDNSAliasService("", "", zone)

	in := new(pb.AssociateDNSAliasInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("prefix") {
			in.Prefix = proto.String(c.String("prefix"))
		}
		if c.IsSet("resource") {
			in.Resource = proto.String(c.String("resource"))
		}
		if c.IsSet("dns_alias_name") {
			in.DnsAliasName = proto.String(c.String("dns_alias_name"))
		}
	}

	out, err := qc.AssociateDNSAlias(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_DNSAliasService_DissociateDNSAliases = []cli.Flag{
	cli.StringFlag{
		Name:  "dns_aliases",
		Usage: "dns aliases",
		Value: "", // json: slice/message/map/time
	},
}

func _func_DNSAliasService_DissociateDNSAliases(c *cli.Context) error {
	zone := c.GlobalString("zone")
	qc := pb.NewDNSAliasService("", "", zone)

	in := new(pb.DissociateDNSAliasesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
		if c.IsSet("dns_aliases") {
			if err := json.Unmarshal([]byte(c.String("dns_aliases")), &in.DnsAliases); err != nil {
				log.Fatal(err)
			}
		}
	}

	out, err := qc.DissociateDNSAliases(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_DNSAliasService_GetDNSLabel = []cli.Flag{}

func _func_DNSAliasService_GetDNSLabel(c *cli.Context) error {
	zone := c.GlobalString("zone")
	qc := pb.NewDNSAliasService("", "", zone)

	in := new(pb.GetDNSLabelInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.GetDNSLabel(in)
	if err != nil {
		log.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
