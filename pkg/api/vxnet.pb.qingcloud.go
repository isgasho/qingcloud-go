// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: vxnet.proto

package service

import proto "github.com/golang/protobuf/proto"
import "fmt"

import "github.com/chai2010/qingcloud-go/pkg/client"
import "github.com/chai2010/qingcloud-go/pkg/config"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = proto.Marshal

var _ = config.Config{}
var _ = client.NewClient

type VxnetServiceInterface interface {
	DescribeVxnets(in *DescribeVxnetsInput) (out *DescribeVxnetsOutput, err error)
	CreateVxnets(in *CreateVxnetsInput) (out *CreateVxnetsOutput, err error)
	DeleteVxnets(in *DeleteVxnetsInput) (out *DeleteVxnetsOutput, err error)
	JoinVxnet(in *JoinVxnetInput) (out *JoinVxnetOutput, err error)
	LeaveVxnet(in *LeaveVxnetInput) (out *LeaveVxnetOutput, err error)
	ModifyVxnetAttributes(in *ModifyVxnetAttributesInput) (out *ModifyVxnetAttributesOutput, err error)
	DescribeVxnetInstances(in *DescribeVxnetInstancesInput) (out *DescribeVxnetInstancesOutput, err error)
}

type VxnetService struct {
	Config           *config.Config
	Properties       *VxnetServiceProperties
	LastResponseBody string
}

func NewVxnetService(conf *config.Config, zone string) (p *VxnetService) {
	return &VxnetService{
		Config:     conf,
		Properties: &VxnetServiceProperties{Zone: proto.String(zone)},
	}
}

func (p *VxnetService) DescribeVxnets(input *DescribeVxnetsInput) (output *DescribeVxnetsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DescribeVxnetsOutput)

	err = client.CallMethod(nil, "DescribeVxnets", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) CreateVxnets(input *CreateVxnetsInput) (output *CreateVxnetsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(CreateVxnetsOutput)

	err = client.CallMethod(nil, "CreateVxnets", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) DeleteVxnets(input *DeleteVxnetsInput) (output *DeleteVxnetsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DeleteVxnetsOutput)

	err = client.CallMethod(nil, "DeleteVxnets", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) JoinVxnet(input *JoinVxnetInput) (output *JoinVxnetOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(JoinVxnetOutput)

	err = client.CallMethod(nil, "JoinVxnet", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) LeaveVxnet(input *LeaveVxnetInput) (output *LeaveVxnetOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(LeaveVxnetOutput)

	err = client.CallMethod(nil, "LeaveVxnet", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) ModifyVxnetAttributes(input *ModifyVxnetAttributesInput) (output *ModifyVxnetAttributesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(ModifyVxnetAttributesOutput)

	err = client.CallMethod(nil, "ModifyVxnetAttributes", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) DescribeVxnetInstances(input *DescribeVxnetInstancesInput) (output *DescribeVxnetInstancesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DescribeVxnetInstancesOutput)

	err = client.CallMethod(nil, "DescribeVxnetInstances", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
