// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: vxnet.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

func init() {
	TypeInfoMap["DescribeVxnetsInput"] = reflect.TypeOf((*DescribeVxnetsInput)(nil))
	TypeInfoMap["DescribeVxnetsOutput"] = reflect.TypeOf((*DescribeVxnetsOutput)(nil))
	TypeInfoMap["CreateVxnetsInput"] = reflect.TypeOf((*CreateVxnetsInput)(nil))
	TypeInfoMap["CreateVxnetsOutput"] = reflect.TypeOf((*CreateVxnetsOutput)(nil))
	TypeInfoMap["DeleteVxnetsInput"] = reflect.TypeOf((*DeleteVxnetsInput)(nil))
	TypeInfoMap["DeleteVxnetsOutput"] = reflect.TypeOf((*DeleteVxnetsOutput)(nil))
	TypeInfoMap["JoinVxnetInput"] = reflect.TypeOf((*JoinVxnetInput)(nil))
	TypeInfoMap["JoinVxnetOutput"] = reflect.TypeOf((*JoinVxnetOutput)(nil))
	TypeInfoMap["LeaveVxnetInput"] = reflect.TypeOf((*LeaveVxnetInput)(nil))
	TypeInfoMap["LeaveVxnetOutput"] = reflect.TypeOf((*LeaveVxnetOutput)(nil))
	TypeInfoMap["ModifyVxnetAttributesInput"] = reflect.TypeOf((*ModifyVxnetAttributesInput)(nil))
	TypeInfoMap["ModifyVxnetAttributesOutput"] = reflect.TypeOf((*ModifyVxnetAttributesOutput)(nil))
	TypeInfoMap["DescribeVxnetInstancesInput"] = reflect.TypeOf((*DescribeVxnetInstancesInput)(nil))
	TypeInfoMap["DescribeVxnetInstancesOutput"] = reflect.TypeOf((*DescribeVxnetInstancesOutput)(nil))
}

type VxnetServiceInterface interface {
	DescribeVxnets(in *DescribeVxnetsInput) (out *DescribeVxnetsOutput, err error)
	CreateVxnets(in *CreateVxnetsInput) (out *CreateVxnetsOutput, err error)
	DeleteVxnets(in *DeleteVxnetsInput) (out *DeleteVxnetsOutput, err error)
	JoinVxnet(in *JoinVxnetInput) (out *JoinVxnetOutput, err error)
	LeaveVxnet(in *LeaveVxnetInput) (out *LeaveVxnetOutput, err error)
	ModifyVxnetAttributes(in *ModifyVxnetAttributesInput) (out *ModifyVxnetAttributesOutput, err error)
	DescribeVxnetInstances(in *DescribeVxnetInstancesInput) (out *DescribeVxnetInstancesOutput, err error)
}

type VxnetService struct {
	ServerInfo *ServerInfo
}

func NewVxnetService(server *ServerInfo) (p *VxnetService) {
	return &VxnetService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeVxnets"] = ServiceApiSpec{
		ServiceName:    "VxnetService",
		ActionName:     "DescribeVxnets",
		InputTypeName:  "DescribeVxnetsInput",
		OutputTypeName: "DescribeVxnetsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VxnetService)(nil)),
		InputType:   reflect.TypeOf((*DescribeVxnetsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeVxnetsOutput)(nil)),
	}
	ServiceApiSpecMap["CreateVxnets"] = ServiceApiSpec{
		ServiceName:    "VxnetService",
		ActionName:     "CreateVxnets",
		InputTypeName:  "CreateVxnetsInput",
		OutputTypeName: "CreateVxnetsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VxnetService)(nil)),
		InputType:   reflect.TypeOf((*CreateVxnetsInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateVxnetsOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteVxnets"] = ServiceApiSpec{
		ServiceName:    "VxnetService",
		ActionName:     "DeleteVxnets",
		InputTypeName:  "DeleteVxnetsInput",
		OutputTypeName: "DeleteVxnetsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VxnetService)(nil)),
		InputType:   reflect.TypeOf((*DeleteVxnetsInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteVxnetsOutput)(nil)),
	}
	ServiceApiSpecMap["JoinVxnet"] = ServiceApiSpec{
		ServiceName:    "VxnetService",
		ActionName:     "JoinVxnet",
		InputTypeName:  "JoinVxnetInput",
		OutputTypeName: "JoinVxnetOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VxnetService)(nil)),
		InputType:   reflect.TypeOf((*JoinVxnetInput)(nil)),
		OutputType:  reflect.TypeOf((*JoinVxnetOutput)(nil)),
	}
	ServiceApiSpecMap["LeaveVxnet"] = ServiceApiSpec{
		ServiceName:    "VxnetService",
		ActionName:     "LeaveVxnet",
		InputTypeName:  "LeaveVxnetInput",
		OutputTypeName: "LeaveVxnetOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VxnetService)(nil)),
		InputType:   reflect.TypeOf((*LeaveVxnetInput)(nil)),
		OutputType:  reflect.TypeOf((*LeaveVxnetOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyVxnetAttributes"] = ServiceApiSpec{
		ServiceName:    "VxnetService",
		ActionName:     "ModifyVxnetAttributes",
		InputTypeName:  "ModifyVxnetAttributesInput",
		OutputTypeName: "ModifyVxnetAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VxnetService)(nil)),
		InputType:   reflect.TypeOf((*ModifyVxnetAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyVxnetAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeVxnetInstances"] = ServiceApiSpec{
		ServiceName:    "VxnetService",
		ActionName:     "DescribeVxnetInstances",
		InputTypeName:  "DescribeVxnetInstancesInput",
		OutputTypeName: "DescribeVxnetInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VxnetService)(nil)),
		InputType:   reflect.TypeOf((*DescribeVxnetInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeVxnetInstancesOutput)(nil)),
	}
}

func (p *VxnetService) DescribeVxnets(input *DescribeVxnetsInput) (output *DescribeVxnetsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeVxnetsInput)
	}

	output = new(DescribeVxnetsOutput)
	err = client.CallMethod("DescribeVxnets", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) CreateVxnets(input *CreateVxnetsInput) (output *CreateVxnetsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateVxnetsInput)
	}

	output = new(CreateVxnetsOutput)
	err = client.CallMethod("CreateVxnets", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) DeleteVxnets(input *DeleteVxnetsInput) (output *DeleteVxnetsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteVxnetsInput)
	}

	output = new(DeleteVxnetsOutput)
	err = client.CallMethod("DeleteVxnets", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) JoinVxnet(input *JoinVxnetInput) (output *JoinVxnetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(JoinVxnetInput)
	}

	output = new(JoinVxnetOutput)
	err = client.CallMethod("JoinVxnet", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) LeaveVxnet(input *LeaveVxnetInput) (output *LeaveVxnetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(LeaveVxnetInput)
	}

	output = new(LeaveVxnetOutput)
	err = client.CallMethod("LeaveVxnet", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) ModifyVxnetAttributes(input *ModifyVxnetAttributesInput) (output *ModifyVxnetAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyVxnetAttributesInput)
	}

	output = new(ModifyVxnetAttributesOutput)
	err = client.CallMethod("ModifyVxnetAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VxnetService) DescribeVxnetInstances(input *DescribeVxnetInstancesInput) (output *DescribeVxnetInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeVxnetInstancesInput)
	}

	output = new(DescribeVxnetInstancesOutput)
	err = client.CallMethod("DescribeVxnetInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
