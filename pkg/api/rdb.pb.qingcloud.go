// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: rdb.proto

package service

import proto "github.com/golang/protobuf/proto"
import "fmt"

import "github.com/chai2010/qingcloud-go/pkg/client"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = proto.Marshal

var _ = client.NewClient

type RDBServiceInterface interface {
	CreateRDB(in *CreateRDBInput) (out *CreateRDBOutput, err error)
	DescribeRDBs(in *DescribeRDBsInput) (out *DescribeRDBsOutput, err error)
	DeleteRDBs(in *DeleteRDBsInput) (out *DeleteRDBsOutput, err error)
	StartRDBs(in *StartRDBsInput) (out *StartRDBsOutput, err error)
	StopRDBs(in *StopRDBsInput) (out *StopRDBsOutput, err error)
	ResizeRDBs(in *ResizeRDBsInput) (out *ResizeRDBsOutput, err error)
	RDBsLeaveVxnet(in *RDBsLeaveVxnetInput) (out *RDBsLeaveVxnetOutput, err error)
	RDBsJoinVxnet(in *RDBsJoinVxnetInput) (out *RDBsJoinVxnetOutput, err error)
	CreateRDBFromSnapshot(in *CreateRDBFromSnapshotInput) (out *CreateRDBFromSnapshotOutput, err error)
	CreateTempRDBInstanceFromSnapshot(in *CreateTempRDBInstanceFromSnapshotInput) (out *CreateTempRDBInstanceFromSnapshotOutput, err error)
	GetRDBInstanceFiles(in *GetRDBInstanceFilesInput) (out *GetRDBInstanceFilesOutput, err error)
	CopyRDBInstanceFilesToFTP(in *CopyRDBInstanceFilesToFTPInput) (out *CopyRDBInstanceFilesToFTPOutput, err error)
	PurgeRDBLogs(in *PurgeRDBLogsInput) (out *PurgeRDBLogsOutput, err error)
	CeaseRDBInstance(in *CeaseRDBInstanceInput) (out *CeaseRDBInstanceOutput, err error)
	ModifyRDBParameters(in *ModifyRDBParametersInput) (out *ModifyRDBParametersOutput, err error)
	ApplyRDBParameterGroup(in *ApplyRDBParameterGroupInput) (out *ApplyRDBParameterGroupOutput, err error)
	DescribeRDBParameters(in *DescribeRDBParametersInput) (out *DescribeRDBParametersOutput, err error)
}

type RDBService struct {
	ServerInfo       *ServerInfo
	LastResponseBody string
}

func NewRDBService(server *ServerInfo) (p *RDBService) {
	return &RDBService{
		ServerInfo: server,
	}
}

func (p *RDBService) CreateRDB(input *CreateRDBInput) (output *CreateRDBOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(CreateRDBOutput)

	err = client.CallMethod(nil, "CreateRDB", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) DescribeRDBs(input *DescribeRDBsInput) (output *DescribeRDBsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(DescribeRDBsOutput)

	err = client.CallMethod(nil, "DescribeRDBs", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) DeleteRDBs(input *DeleteRDBsInput) (output *DeleteRDBsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(DeleteRDBsOutput)

	err = client.CallMethod(nil, "DeleteRDBs", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) StartRDBs(input *StartRDBsInput) (output *StartRDBsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(StartRDBsOutput)

	err = client.CallMethod(nil, "StartRDBs", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) StopRDBs(input *StopRDBsInput) (output *StopRDBsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(StopRDBsOutput)

	err = client.CallMethod(nil, "StopRDBs", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) ResizeRDBs(input *ResizeRDBsInput) (output *ResizeRDBsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(ResizeRDBsOutput)

	err = client.CallMethod(nil, "ResizeRDBs", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) RDBsLeaveVxnet(input *RDBsLeaveVxnetInput) (output *RDBsLeaveVxnetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(RDBsLeaveVxnetOutput)

	err = client.CallMethod(nil, "RDBsLeaveVxnet", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) RDBsJoinVxnet(input *RDBsJoinVxnetInput) (output *RDBsJoinVxnetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(RDBsJoinVxnetOutput)

	err = client.CallMethod(nil, "RDBsJoinVxnet", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) CreateRDBFromSnapshot(input *CreateRDBFromSnapshotInput) (output *CreateRDBFromSnapshotOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(CreateRDBFromSnapshotOutput)

	err = client.CallMethod(nil, "CreateRDBFromSnapshot", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) CreateTempRDBInstanceFromSnapshot(input *CreateTempRDBInstanceFromSnapshotInput) (output *CreateTempRDBInstanceFromSnapshotOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(CreateTempRDBInstanceFromSnapshotOutput)

	err = client.CallMethod(nil, "CreateTempRDBInstanceFromSnapshot", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) GetRDBInstanceFiles(input *GetRDBInstanceFilesInput) (output *GetRDBInstanceFilesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(GetRDBInstanceFilesOutput)

	err = client.CallMethod(nil, "GetRDBInstanceFiles", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) CopyRDBInstanceFilesToFTP(input *CopyRDBInstanceFilesToFTPInput) (output *CopyRDBInstanceFilesToFTPOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(CopyRDBInstanceFilesToFTPOutput)

	err = client.CallMethod(nil, "CopyRDBInstanceFilesToFTP", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) PurgeRDBLogs(input *PurgeRDBLogsInput) (output *PurgeRDBLogsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(PurgeRDBLogsOutput)

	err = client.CallMethod(nil, "PurgeRDBLogs", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) CeaseRDBInstance(input *CeaseRDBInstanceInput) (output *CeaseRDBInstanceOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(CeaseRDBInstanceOutput)

	err = client.CallMethod(nil, "CeaseRDBInstance", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) ModifyRDBParameters(input *ModifyRDBParametersInput) (output *ModifyRDBParametersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(ModifyRDBParametersOutput)

	err = client.CallMethod(nil, "ModifyRDBParameters", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) ApplyRDBParameterGroup(input *ApplyRDBParameterGroupInput) (output *ApplyRDBParameterGroupOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(ApplyRDBParameterGroupOutput)

	err = client.CallMethod(nil, "ApplyRDBParameterGroup", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *RDBService) DescribeRDBParameters(input *DescribeRDBParametersInput) (output *DescribeRDBParametersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		nil,
	)
	output = new(DescribeRDBParametersOutput)

	err = client.CallMethod(nil, "DescribeRDBParameters", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
