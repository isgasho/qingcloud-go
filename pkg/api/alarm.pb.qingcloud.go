// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: alarm.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

type AlarmServiceInterface interface {
	DescribeAlarmPolicies(in *DescribeAlarmPoliciesInput) (out *DescribeAlarmPoliciesOutput, err error)
	CreateAlarmPolicy(in *CreateAlarmPolicyInput) (out *CreateAlarmPolicyOutput, err error)
	ModifyAlarmPolicyAttributes(in *ModifyAlarmPolicyAttributesInput) (out *ModifyAlarmPolicyAttributesOutput, err error)
	DeleteAlarmPolicies(in *DeleteAlarmPoliciesInput) (out *DeleteAlarmPoliciesOutput, err error)
	DescribeAlarmPolicyRules(in *DescribeAlarmPolicyRulesInput) (out *DescribeAlarmPolicyRulesOutput, err error)
	AddAlarmPolicyRules(in *AddAlarmPolicyRulesInput) (out *AddAlarmPolicyRulesOutput, err error)
	ModifyAlarmPolicyRuleAttributes(in *ModifyAlarmPolicyRuleAttributesInput) (out *ModifyAlarmPolicyRuleAttributesOutput, err error)
	DeleteAlarmPolicyRules(in *DeleteAlarmPolicyRulesInput) (out *DeleteAlarmPolicyRulesOutput, err error)
	DescribeAlarmPolicyActions(in *DescribeAlarmPolicyActionsInput) (out *DescribeAlarmPolicyActionsOutput, err error)
	AddAlarmPolicyActions(in *AddAlarmPolicyActionsInput) (out *AddAlarmPolicyActionsOutput, err error)
	ModifyAlarmPolicyActionAttributes(in *ModifyAlarmPolicyActionAttributesInput) (out *ModifyAlarmPolicyActionAttributesOutput, err error)
	DeleteAlarmPolicyActions(in *DeleteAlarmPolicyActionsInput) (out *DeleteAlarmPolicyActionsOutput, err error)
	AssociateAlarmPolicy(in *AssociateAlarmPolicyInput) (out *AssociateAlarmPolicyOutput, err error)
	DissociateAlarmPolicy(in *DissociateAlarmPolicyInput) (out *DissociateAlarmPolicyOutput, err error)
	ApplyAlarmPolicy(in *ApplyAlarmPolicyInput) (out *ApplyAlarmPolicyOutput, err error)
	DescribeAlarms(in *DescribeAlarmsInput) (out *DescribeAlarmsOutput, err error)
	DescribeAlarmHistory(in *DescribeAlarmHistoryInput) (out *DescribeAlarmHistoryOutput, err error)
}

type AlarmService struct {
	ServerInfo *ServerInfo
}

func NewAlarmService(server *ServerInfo) (p *AlarmService) {
	return &AlarmService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeAlarmPolicies"] = ServiceApiSpec{
		ActionName: "DescribeAlarmPolicies",
		InputType:  reflect.TypeOf((*DescribeAlarmPoliciesInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeAlarmPoliciesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["CreateAlarmPolicy"] = ServiceApiSpec{
		ActionName: "CreateAlarmPolicy",
		InputType:  reflect.TypeOf((*CreateAlarmPolicyInput)(nil)),
		OutputType: reflect.TypeOf((*CreateAlarmPolicyOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyAlarmPolicyAttributes"] = ServiceApiSpec{
		ActionName: "ModifyAlarmPolicyAttributes",
		InputType:  reflect.TypeOf((*ModifyAlarmPolicyAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyAlarmPolicyAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteAlarmPolicies"] = ServiceApiSpec{
		ActionName: "DeleteAlarmPolicies",
		InputType:  reflect.TypeOf((*DeleteAlarmPoliciesInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteAlarmPoliciesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeAlarmPolicyRules"] = ServiceApiSpec{
		ActionName: "DescribeAlarmPolicyRules",
		InputType:  reflect.TypeOf((*DescribeAlarmPolicyRulesInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeAlarmPolicyRulesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AddAlarmPolicyRules"] = ServiceApiSpec{
		ActionName: "AddAlarmPolicyRules",
		InputType:  reflect.TypeOf((*AddAlarmPolicyRulesInput)(nil)),
		OutputType: reflect.TypeOf((*AddAlarmPolicyRulesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyAlarmPolicyRuleAttributes"] = ServiceApiSpec{
		ActionName: "ModifyAlarmPolicyRuleAttributes",
		InputType:  reflect.TypeOf((*ModifyAlarmPolicyRuleAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyAlarmPolicyRuleAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteAlarmPolicyRules"] = ServiceApiSpec{
		ActionName: "DeleteAlarmPolicyRules",
		InputType:  reflect.TypeOf((*DeleteAlarmPolicyRulesInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteAlarmPolicyRulesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeAlarmPolicyActions"] = ServiceApiSpec{
		ActionName: "DescribeAlarmPolicyActions",
		InputType:  reflect.TypeOf((*DescribeAlarmPolicyActionsInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeAlarmPolicyActionsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AddAlarmPolicyActions"] = ServiceApiSpec{
		ActionName: "AddAlarmPolicyActions",
		InputType:  reflect.TypeOf((*AddAlarmPolicyActionsInput)(nil)),
		OutputType: reflect.TypeOf((*AddAlarmPolicyActionsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyAlarmPolicyActionAttributes"] = ServiceApiSpec{
		ActionName: "ModifyAlarmPolicyActionAttributes",
		InputType:  reflect.TypeOf((*ModifyAlarmPolicyActionAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyAlarmPolicyActionAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteAlarmPolicyActions"] = ServiceApiSpec{
		ActionName: "DeleteAlarmPolicyActions",
		InputType:  reflect.TypeOf((*DeleteAlarmPolicyActionsInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteAlarmPolicyActionsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AssociateAlarmPolicy"] = ServiceApiSpec{
		ActionName: "AssociateAlarmPolicy",
		InputType:  reflect.TypeOf((*AssociateAlarmPolicyInput)(nil)),
		OutputType: reflect.TypeOf((*AssociateAlarmPolicyOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DissociateAlarmPolicy"] = ServiceApiSpec{
		ActionName: "DissociateAlarmPolicy",
		InputType:  reflect.TypeOf((*DissociateAlarmPolicyInput)(nil)),
		OutputType: reflect.TypeOf((*DissociateAlarmPolicyOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ApplyAlarmPolicy"] = ServiceApiSpec{
		ActionName: "ApplyAlarmPolicy",
		InputType:  reflect.TypeOf((*ApplyAlarmPolicyInput)(nil)),
		OutputType: reflect.TypeOf((*ApplyAlarmPolicyOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeAlarms"] = ServiceApiSpec{
		ActionName: "DescribeAlarms",
		InputType:  reflect.TypeOf((*DescribeAlarmsInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeAlarmsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeAlarmHistory"] = ServiceApiSpec{
		ActionName: "DescribeAlarmHistory",
		InputType:  reflect.TypeOf((*DescribeAlarmHistoryInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeAlarmHistoryOutput)(nil)),
		HttpMethod: "GET",
	}
}

func (p *AlarmService) DescribeAlarmPolicies(input *DescribeAlarmPoliciesInput) (output *DescribeAlarmPoliciesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeAlarmPoliciesInput)
	}

	output = new(DescribeAlarmPoliciesOutput)
	err = client.CallMethod("DescribeAlarmPolicies", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) CreateAlarmPolicy(input *CreateAlarmPolicyInput) (output *CreateAlarmPolicyOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateAlarmPolicyInput)
	}

	output = new(CreateAlarmPolicyOutput)
	err = client.CallMethod("CreateAlarmPolicy", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) ModifyAlarmPolicyAttributes(input *ModifyAlarmPolicyAttributesInput) (output *ModifyAlarmPolicyAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyAlarmPolicyAttributesInput)
	}

	output = new(ModifyAlarmPolicyAttributesOutput)
	err = client.CallMethod("ModifyAlarmPolicyAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) DeleteAlarmPolicies(input *DeleteAlarmPoliciesInput) (output *DeleteAlarmPoliciesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteAlarmPoliciesInput)
	}

	output = new(DeleteAlarmPoliciesOutput)
	err = client.CallMethod("DeleteAlarmPolicies", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) DescribeAlarmPolicyRules(input *DescribeAlarmPolicyRulesInput) (output *DescribeAlarmPolicyRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeAlarmPolicyRulesInput)
	}

	output = new(DescribeAlarmPolicyRulesOutput)
	err = client.CallMethod("DescribeAlarmPolicyRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) AddAlarmPolicyRules(input *AddAlarmPolicyRulesInput) (output *AddAlarmPolicyRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddAlarmPolicyRulesInput)
	}

	output = new(AddAlarmPolicyRulesOutput)
	err = client.CallMethod("AddAlarmPolicyRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) ModifyAlarmPolicyRuleAttributes(input *ModifyAlarmPolicyRuleAttributesInput) (output *ModifyAlarmPolicyRuleAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyAlarmPolicyRuleAttributesInput)
	}

	output = new(ModifyAlarmPolicyRuleAttributesOutput)
	err = client.CallMethod("ModifyAlarmPolicyRuleAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) DeleteAlarmPolicyRules(input *DeleteAlarmPolicyRulesInput) (output *DeleteAlarmPolicyRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteAlarmPolicyRulesInput)
	}

	output = new(DeleteAlarmPolicyRulesOutput)
	err = client.CallMethod("DeleteAlarmPolicyRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) DescribeAlarmPolicyActions(input *DescribeAlarmPolicyActionsInput) (output *DescribeAlarmPolicyActionsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeAlarmPolicyActionsInput)
	}

	output = new(DescribeAlarmPolicyActionsOutput)
	err = client.CallMethod("DescribeAlarmPolicyActions", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) AddAlarmPolicyActions(input *AddAlarmPolicyActionsInput) (output *AddAlarmPolicyActionsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddAlarmPolicyActionsInput)
	}

	output = new(AddAlarmPolicyActionsOutput)
	err = client.CallMethod("AddAlarmPolicyActions", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) ModifyAlarmPolicyActionAttributes(input *ModifyAlarmPolicyActionAttributesInput) (output *ModifyAlarmPolicyActionAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyAlarmPolicyActionAttributesInput)
	}

	output = new(ModifyAlarmPolicyActionAttributesOutput)
	err = client.CallMethod("ModifyAlarmPolicyActionAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) DeleteAlarmPolicyActions(input *DeleteAlarmPolicyActionsInput) (output *DeleteAlarmPolicyActionsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteAlarmPolicyActionsInput)
	}

	output = new(DeleteAlarmPolicyActionsOutput)
	err = client.CallMethod("DeleteAlarmPolicyActions", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) AssociateAlarmPolicy(input *AssociateAlarmPolicyInput) (output *AssociateAlarmPolicyOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AssociateAlarmPolicyInput)
	}

	output = new(AssociateAlarmPolicyOutput)
	err = client.CallMethod("AssociateAlarmPolicy", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) DissociateAlarmPolicy(input *DissociateAlarmPolicyInput) (output *DissociateAlarmPolicyOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DissociateAlarmPolicyInput)
	}

	output = new(DissociateAlarmPolicyOutput)
	err = client.CallMethod("DissociateAlarmPolicy", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) ApplyAlarmPolicy(input *ApplyAlarmPolicyInput) (output *ApplyAlarmPolicyOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ApplyAlarmPolicyInput)
	}

	output = new(ApplyAlarmPolicyOutput)
	err = client.CallMethod("ApplyAlarmPolicy", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) DescribeAlarms(input *DescribeAlarmsInput) (output *DescribeAlarmsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeAlarmsInput)
	}

	output = new(DescribeAlarmsOutput)
	err = client.CallMethod("DescribeAlarms", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *AlarmService) DescribeAlarmHistory(input *DescribeAlarmHistoryInput) (output *DescribeAlarmHistoryOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeAlarmHistoryInput)
	}

	output = new(DescribeAlarmHistoryOutput)
	err = client.CallMethod("DescribeAlarmHistory", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
