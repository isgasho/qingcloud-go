// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: eip.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

type EIPServiceInterface interface {
	DescribeEips(in *DescribeEipsInput) (out *DescribeEipsOutput, err error)
	AllocateEips(in *AllocateEipsInput) (out *AllocateEipsOutput, err error)
	ReleaseEips(in *ReleaseEipsInput) (out *ReleaseEipsOutput, err error)
	AssociateEip(in *AssociateEipInput) (out *AssociateEipOutput, err error)
	DissociateEips(in *DissociateEipsInput) (out *DissociateEipsOutput, err error)
	ChangeEipsBandwidth(in *ChangeEipsBandwidthInput) (out *ChangeEipsBandwidthOutput, err error)
	ChangeEipsBillingMode(in *ChangeEipsBillingModeInput) (out *ChangeEipsBillingModeOutput, err error)
	ModifyEipAttributes(in *ModifyEipAttributesInput) (out *ModifyEipAttributesOutput, err error)
}

type EIPService struct {
	ServerInfo *ServerInfo
}

func NewEIPService(server *ServerInfo) (p *EIPService) {
	return &EIPService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeEips"] = ServiceApiSpec{
		ActionName: "DescribeEips",
		InputType:  reflect.TypeOf((*DescribeEipsInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeEipsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AllocateEips"] = ServiceApiSpec{
		ActionName: "AllocateEips",
		InputType:  reflect.TypeOf((*AllocateEipsInput)(nil)),
		OutputType: reflect.TypeOf((*AllocateEipsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ReleaseEips"] = ServiceApiSpec{
		ActionName: "ReleaseEips",
		InputType:  reflect.TypeOf((*ReleaseEipsInput)(nil)),
		OutputType: reflect.TypeOf((*ReleaseEipsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AssociateEip"] = ServiceApiSpec{
		ActionName: "AssociateEip",
		InputType:  reflect.TypeOf((*AssociateEipInput)(nil)),
		OutputType: reflect.TypeOf((*AssociateEipOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DissociateEips"] = ServiceApiSpec{
		ActionName: "DissociateEips",
		InputType:  reflect.TypeOf((*DissociateEipsInput)(nil)),
		OutputType: reflect.TypeOf((*DissociateEipsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ChangeEipsBandwidth"] = ServiceApiSpec{
		ActionName: "ChangeEipsBandwidth",
		InputType:  reflect.TypeOf((*ChangeEipsBandwidthInput)(nil)),
		OutputType: reflect.TypeOf((*ChangeEipsBandwidthOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ChangeEipsBillingMode"] = ServiceApiSpec{
		ActionName: "ChangeEipsBillingMode",
		InputType:  reflect.TypeOf((*ChangeEipsBillingModeInput)(nil)),
		OutputType: reflect.TypeOf((*ChangeEipsBillingModeOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyEipAttributes"] = ServiceApiSpec{
		ActionName: "ModifyEipAttributes",
		InputType:  reflect.TypeOf((*ModifyEipAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyEipAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
}

func (p *EIPService) DescribeEips(input *DescribeEipsInput) (output *DescribeEipsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeEipsInput)
	}

	output = new(DescribeEipsOutput)
	err = client.CallMethod("DescribeEips", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *EIPService) AllocateEips(input *AllocateEipsInput) (output *AllocateEipsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AllocateEipsInput)
	}

	output = new(AllocateEipsOutput)
	err = client.CallMethod("AllocateEips", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *EIPService) ReleaseEips(input *ReleaseEipsInput) (output *ReleaseEipsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ReleaseEipsInput)
	}

	output = new(ReleaseEipsOutput)
	err = client.CallMethod("ReleaseEips", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *EIPService) AssociateEip(input *AssociateEipInput) (output *AssociateEipOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AssociateEipInput)
	}

	output = new(AssociateEipOutput)
	err = client.CallMethod("AssociateEip", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *EIPService) DissociateEips(input *DissociateEipsInput) (output *DissociateEipsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DissociateEipsInput)
	}

	output = new(DissociateEipsOutput)
	err = client.CallMethod("DissociateEips", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *EIPService) ChangeEipsBandwidth(input *ChangeEipsBandwidthInput) (output *ChangeEipsBandwidthOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ChangeEipsBandwidthInput)
	}

	output = new(ChangeEipsBandwidthOutput)
	err = client.CallMethod("ChangeEipsBandwidth", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *EIPService) ChangeEipsBillingMode(input *ChangeEipsBillingModeInput) (output *ChangeEipsBillingModeOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ChangeEipsBillingModeInput)
	}

	output = new(ChangeEipsBillingModeOutput)
	err = client.CallMethod("ChangeEipsBillingMode", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *EIPService) ModifyEipAttributes(input *ModifyEipAttributesInput) (output *ModifyEipAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyEipAttributesInput)
	}

	output = new(ModifyEipAttributesOutput)
	err = client.CallMethod("ModifyEipAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
