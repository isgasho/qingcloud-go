// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: snapshot.proto

package service

import proto "github.com/golang/protobuf/proto"
import "fmt"

import "github.com/chai2010/qingcloud-go/pkg/client"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = proto.Marshal

var _ = client.NewClient

type SnapshotServiceInterface interface {
	DescribeSnapshots(in *DescribeSnapshotsInput) (out *DescribeSnapshotsOutput, err error)
	CreateSnapshots(in *CreateSnapshotsInput) (out *CreateSnapshotsOutput, err error)
	DeleteSnapshots(in *DeleteSnapshotsInput) (out *DeleteSnapshotsOutput, err error)
	ApplySnapshots(in *ApplySnapshotsInput) (out *ApplySnapshotsOutput, err error)
	ModifySnapshotAttributes(in *ModifySnapshotAttributesInput) (out *ModifySnapshotAttributesOutput, err error)
	CaptureInstanceFromSnapshot(in *CaptureInstanceFromSnapshotInput) (out *CaptureInstanceFromSnapshotOutput, err error)
	CreateVolumeFromSnapshot(in *CreateVolumeFromSnapshotInput) (out *CreateVolumeFromSnapshotOutput, err error)
}

type SnapshotService struct {
	ServerInfo       *ServerInfo
	LastResponseBody string
}

func NewSnapshotService(server *ServerInfo) (p *SnapshotService) {
	return &SnapshotService{
		ServerInfo: server,
	}
}

func (p *SnapshotService) DescribeSnapshots(input *DescribeSnapshotsInput) (output *DescribeSnapshotsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)
	output = new(DescribeSnapshotsOutput)

	err = client.CallMethod("DescribeSnapshots", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SnapshotService) CreateSnapshots(input *CreateSnapshotsInput) (output *CreateSnapshotsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)
	output = new(CreateSnapshotsOutput)

	err = client.CallMethod("CreateSnapshots", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SnapshotService) DeleteSnapshots(input *DeleteSnapshotsInput) (output *DeleteSnapshotsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)
	output = new(DeleteSnapshotsOutput)

	err = client.CallMethod("DeleteSnapshots", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SnapshotService) ApplySnapshots(input *ApplySnapshotsInput) (output *ApplySnapshotsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)
	output = new(ApplySnapshotsOutput)

	err = client.CallMethod("ApplySnapshots", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SnapshotService) ModifySnapshotAttributes(input *ModifySnapshotAttributesInput) (output *ModifySnapshotAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)
	output = new(ModifySnapshotAttributesOutput)

	err = client.CallMethod("ModifySnapshotAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SnapshotService) CaptureInstanceFromSnapshot(input *CaptureInstanceFromSnapshotInput) (output *CaptureInstanceFromSnapshotOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)
	output = new(CaptureInstanceFromSnapshotOutput)

	err = client.CallMethod("CaptureInstanceFromSnapshot", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SnapshotService) CreateVolumeFromSnapshot(input *CreateVolumeFromSnapshotInput) (output *CreateVolumeFromSnapshotOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)
	output = new(CreateVolumeFromSnapshotOutput)

	err = client.CallMethod("CreateVolumeFromSnapshot", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
