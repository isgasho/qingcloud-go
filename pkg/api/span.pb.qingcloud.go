// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: span.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "regexp"

import "github.com/chai2010/qingcloud-go/pkg/config"
import "github.com/chai2010/qingcloud-go/pkg/logger"
import "github.com/chai2010/qingcloud-go/pkg/request"
import "github.com/chai2010/qingcloud-go/pkg/request/data"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _ = regexp.Match
var _ = config.Config{}
var _ = logger.Info
var _ = request.Request{}
var _ = data.Operation{}

type SpanServiceInterface interface {
	CreateSpan(in *CreateSpanInput) (out *CreateSpanOutput, err error)
	DescribeSpans(in *DescribeSpansInput) (out *DescribeSpansOutput, err error)
	DeleteSpans(in *DeleteSpansInput) (out *DeleteSpansOutput, err error)
	AddSpanMembers(in *AddSpanMembersInput) (out *AddSpanMembersOutput, err error)
	RemoveSpanMembers(in *RemoveSpanMembersInput) (out *RemoveSpanMembersOutput, err error)
	ModifySpanAttributes(in *ModifySpanAttributesInput) (out *ModifySpanAttributesOutput, err error)
	UpdateSpan(in *UpdateSpanInput) (out *UpdateSpanOutput, err error)
}

type SpanService struct {
	Config           *config.Config
	Properties       *SpanServiceProperties
	LastResponseBody string
}

func NewSpanService(conf *config.Config, zone string) (p *SpanService) {
	return &SpanService{
		Config:     conf,
		Properties: &SpanServiceProperties{Zone: proto.String(zone)},
	}
}

func (p *SpanService) CreateSpan(in *CreateSpanInput) (out *CreateSpanOutput, err error) {
	if in == nil {
		in = &CreateSpanInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateSpan",
		RequestMethod: "GET",
	}

	x := &CreateSpanOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *SpanService) DescribeSpans(in *DescribeSpansInput) (out *DescribeSpansOutput, err error) {
	if in == nil {
		in = &DescribeSpansInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeSpans",
		RequestMethod: "GET",
	}

	x := &DescribeSpansOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *SpanService) DeleteSpans(in *DeleteSpansInput) (out *DeleteSpansOutput, err error) {
	if in == nil {
		in = &DeleteSpansInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteSpans",
		RequestMethod: "GET",
	}

	x := &DeleteSpansOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *SpanService) AddSpanMembers(in *AddSpanMembersInput) (out *AddSpanMembersOutput, err error) {
	if in == nil {
		in = &AddSpanMembersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "AddSpanMembers",
		RequestMethod: "GET",
	}

	x := &AddSpanMembersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *SpanService) RemoveSpanMembers(in *RemoveSpanMembersInput) (out *RemoveSpanMembersOutput, err error) {
	if in == nil {
		in = &RemoveSpanMembersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "RemoveSpanMembers",
		RequestMethod: "GET",
	}

	x := &RemoveSpanMembersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *SpanService) ModifySpanAttributes(in *ModifySpanAttributesInput) (out *ModifySpanAttributesOutput, err error) {
	if in == nil {
		in = &ModifySpanAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifySpanAttributes",
		RequestMethod: "GET",
	}

	x := &ModifySpanAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *SpanService) UpdateSpan(in *UpdateSpanInput) (out *UpdateSpanOutput, err error) {
	if in == nil {
		in = &UpdateSpanInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "UpdateSpan",
		RequestMethod: "GET",
	}

	x := &UpdateSpanOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}
