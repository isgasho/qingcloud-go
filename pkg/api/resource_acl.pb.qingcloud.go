// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: resource_acl.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

func init() {
	TypeInfoMap["DescribeSharedResourceGroupsInput"] = reflect.TypeOf((*DescribeSharedResourceGroupsInput)(nil))
	TypeInfoMap["DescribeSharedResourceGroupsOutput"] = reflect.TypeOf((*DescribeSharedResourceGroupsOutput)(nil))
	TypeInfoMap["DescribeResourceGroupsInput"] = reflect.TypeOf((*DescribeResourceGroupsInput)(nil))
	TypeInfoMap["DescribeResourceGroupsOutput"] = reflect.TypeOf((*DescribeResourceGroupsOutput)(nil))
	TypeInfoMap["CreateResourceGroupsInput"] = reflect.TypeOf((*CreateResourceGroupsInput)(nil))
	TypeInfoMap["CreateResourceGroupsOutput"] = reflect.TypeOf((*CreateResourceGroupsOutput)(nil))
	TypeInfoMap["ModifyResourceGroupAttributesInput"] = reflect.TypeOf((*ModifyResourceGroupAttributesInput)(nil))
	TypeInfoMap["ModifyResourceGroupAttributesOutput"] = reflect.TypeOf((*ModifyResourceGroupAttributesOutput)(nil))
	TypeInfoMap["DeleteResourceGroupsInput"] = reflect.TypeOf((*DeleteResourceGroupsInput)(nil))
	TypeInfoMap["DeleteResourceGroupsOutput"] = reflect.TypeOf((*DeleteResourceGroupsOutput)(nil))
	TypeInfoMap["DescribeResourceGroupItemsInput"] = reflect.TypeOf((*DescribeResourceGroupItemsInput)(nil))
	TypeInfoMap["DescribeResourceGroupItemsOutput"] = reflect.TypeOf((*DescribeResourceGroupItemsOutput)(nil))
	TypeInfoMap["AddResourceGroupItemsInput"] = reflect.TypeOf((*AddResourceGroupItemsInput)(nil))
	TypeInfoMap["AddResourceGroupItemsOutput"] = reflect.TypeOf((*AddResourceGroupItemsOutput)(nil))
	TypeInfoMap["DeleteResourceGroupItemsInput"] = reflect.TypeOf((*DeleteResourceGroupItemsInput)(nil))
	TypeInfoMap["DeleteResourceGroupItemsOutput"] = reflect.TypeOf((*DeleteResourceGroupItemsOutput)(nil))
	TypeInfoMap["DescribeUserGroupsInput"] = reflect.TypeOf((*DescribeUserGroupsInput)(nil))
	TypeInfoMap["DescribeUserGroupsOutput"] = reflect.TypeOf((*DescribeUserGroupsOutput)(nil))
	TypeInfoMap["CreateUserGroupsInput"] = reflect.TypeOf((*CreateUserGroupsInput)(nil))
	TypeInfoMap["CreateUserGroupsOutput"] = reflect.TypeOf((*CreateUserGroupsOutput)(nil))
	TypeInfoMap["ModifyUserGroupAttributesInput"] = reflect.TypeOf((*ModifyUserGroupAttributesInput)(nil))
	TypeInfoMap["ModifyUserGroupAttributesOutput"] = reflect.TypeOf((*ModifyUserGroupAttributesOutput)(nil))
	TypeInfoMap["DeleteUserGroupsInput"] = reflect.TypeOf((*DeleteUserGroupsInput)(nil))
	TypeInfoMap["DeleteUserGroupsOutput"] = reflect.TypeOf((*DeleteUserGroupsOutput)(nil))
	TypeInfoMap["DescribeUserGroupMembersInput"] = reflect.TypeOf((*DescribeUserGroupMembersInput)(nil))
	TypeInfoMap["DescribeUserGroupMembersOutput"] = reflect.TypeOf((*DescribeUserGroupMembersOutput)(nil))
	TypeInfoMap["AddUserGroupMembersInput"] = reflect.TypeOf((*AddUserGroupMembersInput)(nil))
	TypeInfoMap["AddUserGroupMembersOutput"] = reflect.TypeOf((*AddUserGroupMembersOutput)(nil))
	TypeInfoMap["ModifyUserGroupMemberAttributesInput"] = reflect.TypeOf((*ModifyUserGroupMemberAttributesInput)(nil))
	TypeInfoMap["ModifyUserGroupMemberAttributesOutput"] = reflect.TypeOf((*ModifyUserGroupMemberAttributesOutput)(nil))
	TypeInfoMap["DeleteUserGroupMembersInput"] = reflect.TypeOf((*DeleteUserGroupMembersInput)(nil))
	TypeInfoMap["DeleteUserGroupMembersOutput"] = reflect.TypeOf((*DeleteUserGroupMembersOutput)(nil))
	TypeInfoMap["DescribeGroupRolesInput"] = reflect.TypeOf((*DescribeGroupRolesInput)(nil))
	TypeInfoMap["DescribeGroupRolesOutput"] = reflect.TypeOf((*DescribeGroupRolesOutput)(nil))
	TypeInfoMap["CreateGroupRolesInput"] = reflect.TypeOf((*CreateGroupRolesInput)(nil))
	TypeInfoMap["CreateGroupRolesOutput"] = reflect.TypeOf((*CreateGroupRolesOutput)(nil))
	TypeInfoMap["ModifyGroupRoleAttributesInput"] = reflect.TypeOf((*ModifyGroupRoleAttributesInput)(nil))
	TypeInfoMap["ModifyGroupRoleAttributesOutput"] = reflect.TypeOf((*ModifyGroupRoleAttributesOutput)(nil))
	TypeInfoMap["DeleteGroupRolesInput"] = reflect.TypeOf((*DeleteGroupRolesInput)(nil))
	TypeInfoMap["DeleteGroupRolesOutput"] = reflect.TypeOf((*DeleteGroupRolesOutput)(nil))
	TypeInfoMap["DescribeGroupRoleRulesInput"] = reflect.TypeOf((*DescribeGroupRoleRulesInput)(nil))
	TypeInfoMap["DescribeGroupRoleRulesOutput"] = reflect.TypeOf((*DescribeGroupRoleRulesOutput)(nil))
	TypeInfoMap["AddGroupRoleRulesInput"] = reflect.TypeOf((*AddGroupRoleRulesInput)(nil))
	TypeInfoMap["AddGroupRoleRulesOutput"] = reflect.TypeOf((*AddGroupRoleRulesOutput)(nil))
	TypeInfoMap["ModifyGroupRoleRuleAttributesInput"] = reflect.TypeOf((*ModifyGroupRoleRuleAttributesInput)(nil))
	TypeInfoMap["ModifyGroupRoleRuleAttributesOutput"] = reflect.TypeOf((*ModifyGroupRoleRuleAttributesOutput)(nil))
	TypeInfoMap["DeleteGroupRoleRulesInput"] = reflect.TypeOf((*DeleteGroupRoleRulesInput)(nil))
	TypeInfoMap["DeleteGroupRoleRulesOutput"] = reflect.TypeOf((*DeleteGroupRoleRulesOutput)(nil))
	TypeInfoMap["GrantResourceGroupsToUserGroupsInput"] = reflect.TypeOf((*GrantResourceGroupsToUserGroupsInput)(nil))
	TypeInfoMap["GrantResourceGroupsToUserGroupsOutput"] = reflect.TypeOf((*GrantResourceGroupsToUserGroupsOutput)(nil))
	TypeInfoMap["RevokeResourceGroupsFromUserGroupsInput"] = reflect.TypeOf((*RevokeResourceGroupsFromUserGroupsInput)(nil))
	TypeInfoMap["RevokeResourceGroupsFromUserGroupsOutput"] = reflect.TypeOf((*RevokeResourceGroupsFromUserGroupsOutput)(nil))
	TypeInfoMap["DescribeResourceUserGroupsInput"] = reflect.TypeOf((*DescribeResourceUserGroupsInput)(nil))
	TypeInfoMap["DescribeResourceUserGroupsOutput"] = reflect.TypeOf((*DescribeResourceUserGroupsOutput)(nil))
}

type ResourceACLServiceInterface interface {
	DescribeSharedResourceGroups(in *DescribeSharedResourceGroupsInput) (out *DescribeSharedResourceGroupsOutput, err error)
	DescribeResourceGroups(in *DescribeResourceGroupsInput) (out *DescribeResourceGroupsOutput, err error)
	CreateResourceGroups(in *CreateResourceGroupsInput) (out *CreateResourceGroupsOutput, err error)
	ModifyResourceGroupAttributes(in *ModifyResourceGroupAttributesInput) (out *ModifyResourceGroupAttributesOutput, err error)
	DeleteResourceGroups(in *DeleteResourceGroupsInput) (out *DeleteResourceGroupsOutput, err error)
	DescribeResourceGroupItems(in *DescribeResourceGroupItemsInput) (out *DescribeResourceGroupItemsOutput, err error)
	AddResourceGroupItems(in *AddResourceGroupItemsInput) (out *AddResourceGroupItemsOutput, err error)
	DeleteResourceGroupItems(in *DeleteResourceGroupItemsInput) (out *DeleteResourceGroupItemsOutput, err error)
	DescribeUserGroups(in *DescribeUserGroupsInput) (out *DescribeUserGroupsOutput, err error)
	CreateUserGroups(in *CreateUserGroupsInput) (out *CreateUserGroupsOutput, err error)
	ModifyUserGroupAttributes(in *ModifyUserGroupAttributesInput) (out *ModifyUserGroupAttributesOutput, err error)
	DeleteUserGroups(in *DeleteUserGroupsInput) (out *DeleteUserGroupsOutput, err error)
	DescribeUserGroupMembers(in *DescribeUserGroupMembersInput) (out *DescribeUserGroupMembersOutput, err error)
	AddUserGroupMembers(in *AddUserGroupMembersInput) (out *AddUserGroupMembersOutput, err error)
	ModifyUserGroupMemberAttributes(in *ModifyUserGroupMemberAttributesInput) (out *ModifyUserGroupMemberAttributesOutput, err error)
	DeleteUserGroupMembers(in *DeleteUserGroupMembersInput) (out *DeleteUserGroupMembersOutput, err error)
	DescribeGroupRoles(in *DescribeGroupRolesInput) (out *DescribeGroupRolesOutput, err error)
	CreateGroupRoles(in *CreateGroupRolesInput) (out *CreateGroupRolesOutput, err error)
	ModifyGroupRoleAttributes(in *ModifyGroupRoleAttributesInput) (out *ModifyGroupRoleAttributesOutput, err error)
	DeleteGroupRoles(in *DeleteGroupRolesInput) (out *DeleteGroupRolesOutput, err error)
	DescribeGroupRoleRules(in *DescribeGroupRoleRulesInput) (out *DescribeGroupRoleRulesOutput, err error)
	AddGroupRoleRules(in *AddGroupRoleRulesInput) (out *AddGroupRoleRulesOutput, err error)
	ModifyGroupRoleRuleAttributes(in *ModifyGroupRoleRuleAttributesInput) (out *ModifyGroupRoleRuleAttributesOutput, err error)
	DeleteGroupRoleRules(in *DeleteGroupRoleRulesInput) (out *DeleteGroupRoleRulesOutput, err error)
	GrantResourceGroupsToUserGroups(in *GrantResourceGroupsToUserGroupsInput) (out *GrantResourceGroupsToUserGroupsOutput, err error)
	RevokeResourceGroupsFromUserGroups(in *RevokeResourceGroupsFromUserGroupsInput) (out *RevokeResourceGroupsFromUserGroupsOutput, err error)
	DescribeResourceUserGroups(in *DescribeResourceUserGroupsInput) (out *DescribeResourceUserGroupsOutput, err error)
}

type ResourceACLService struct {
	ServerInfo *ServerInfo
}

func NewResourceACLService(server *ServerInfo) (p *ResourceACLService) {
	return &ResourceACLService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeSharedResourceGroups"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DescribeSharedResourceGroups",
		InputTypeName:  "DescribeSharedResourceGroupsInput",
		OutputTypeName: "DescribeSharedResourceGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DescribeSharedResourceGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeSharedResourceGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeResourceGroups"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DescribeResourceGroups",
		InputTypeName:  "DescribeResourceGroupsInput",
		OutputTypeName: "DescribeResourceGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DescribeResourceGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeResourceGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["CreateResourceGroups"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "CreateResourceGroups",
		InputTypeName:  "CreateResourceGroupsInput",
		OutputTypeName: "CreateResourceGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*CreateResourceGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateResourceGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyResourceGroupAttributes"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "ModifyResourceGroupAttributes",
		InputTypeName:  "ModifyResourceGroupAttributesInput",
		OutputTypeName: "ModifyResourceGroupAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*ModifyResourceGroupAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyResourceGroupAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteResourceGroups"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DeleteResourceGroups",
		InputTypeName:  "DeleteResourceGroupsInput",
		OutputTypeName: "DeleteResourceGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DeleteResourceGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteResourceGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeResourceGroupItems"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DescribeResourceGroupItems",
		InputTypeName:  "DescribeResourceGroupItemsInput",
		OutputTypeName: "DescribeResourceGroupItemsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DescribeResourceGroupItemsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeResourceGroupItemsOutput)(nil)),
	}
	ServiceApiSpecMap["AddResourceGroupItems"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "AddResourceGroupItems",
		InputTypeName:  "AddResourceGroupItemsInput",
		OutputTypeName: "AddResourceGroupItemsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*AddResourceGroupItemsInput)(nil)),
		OutputType:  reflect.TypeOf((*AddResourceGroupItemsOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteResourceGroupItems"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DeleteResourceGroupItems",
		InputTypeName:  "DeleteResourceGroupItemsInput",
		OutputTypeName: "DeleteResourceGroupItemsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DeleteResourceGroupItemsInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteResourceGroupItemsOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeUserGroups"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DescribeUserGroups",
		InputTypeName:  "DescribeUserGroupsInput",
		OutputTypeName: "DescribeUserGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DescribeUserGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeUserGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["CreateUserGroups"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "CreateUserGroups",
		InputTypeName:  "CreateUserGroupsInput",
		OutputTypeName: "CreateUserGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*CreateUserGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateUserGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyUserGroupAttributes"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "ModifyUserGroupAttributes",
		InputTypeName:  "ModifyUserGroupAttributesInput",
		OutputTypeName: "ModifyUserGroupAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*ModifyUserGroupAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyUserGroupAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteUserGroups"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DeleteUserGroups",
		InputTypeName:  "DeleteUserGroupsInput",
		OutputTypeName: "DeleteUserGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DeleteUserGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteUserGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeUserGroupMembers"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DescribeUserGroupMembers",
		InputTypeName:  "DescribeUserGroupMembersInput",
		OutputTypeName: "DescribeUserGroupMembersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DescribeUserGroupMembersInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeUserGroupMembersOutput)(nil)),
	}
	ServiceApiSpecMap["AddUserGroupMembers"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "AddUserGroupMembers",
		InputTypeName:  "AddUserGroupMembersInput",
		OutputTypeName: "AddUserGroupMembersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*AddUserGroupMembersInput)(nil)),
		OutputType:  reflect.TypeOf((*AddUserGroupMembersOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyUserGroupMemberAttributes"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "ModifyUserGroupMemberAttributes",
		InputTypeName:  "ModifyUserGroupMemberAttributesInput",
		OutputTypeName: "ModifyUserGroupMemberAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*ModifyUserGroupMemberAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyUserGroupMemberAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteUserGroupMembers"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DeleteUserGroupMembers",
		InputTypeName:  "DeleteUserGroupMembersInput",
		OutputTypeName: "DeleteUserGroupMembersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DeleteUserGroupMembersInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteUserGroupMembersOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeGroupRoles"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DescribeGroupRoles",
		InputTypeName:  "DescribeGroupRolesInput",
		OutputTypeName: "DescribeGroupRolesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DescribeGroupRolesInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeGroupRolesOutput)(nil)),
	}
	ServiceApiSpecMap["CreateGroupRoles"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "CreateGroupRoles",
		InputTypeName:  "CreateGroupRolesInput",
		OutputTypeName: "CreateGroupRolesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*CreateGroupRolesInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateGroupRolesOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyGroupRoleAttributes"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "ModifyGroupRoleAttributes",
		InputTypeName:  "ModifyGroupRoleAttributesInput",
		OutputTypeName: "ModifyGroupRoleAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*ModifyGroupRoleAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyGroupRoleAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteGroupRoles"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DeleteGroupRoles",
		InputTypeName:  "DeleteGroupRolesInput",
		OutputTypeName: "DeleteGroupRolesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DeleteGroupRolesInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteGroupRolesOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeGroupRoleRules"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DescribeGroupRoleRules",
		InputTypeName:  "DescribeGroupRoleRulesInput",
		OutputTypeName: "DescribeGroupRoleRulesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DescribeGroupRoleRulesInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeGroupRoleRulesOutput)(nil)),
	}
	ServiceApiSpecMap["AddGroupRoleRules"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "AddGroupRoleRules",
		InputTypeName:  "AddGroupRoleRulesInput",
		OutputTypeName: "AddGroupRoleRulesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*AddGroupRoleRulesInput)(nil)),
		OutputType:  reflect.TypeOf((*AddGroupRoleRulesOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyGroupRoleRuleAttributes"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "ModifyGroupRoleRuleAttributes",
		InputTypeName:  "ModifyGroupRoleRuleAttributesInput",
		OutputTypeName: "ModifyGroupRoleRuleAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*ModifyGroupRoleRuleAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyGroupRoleRuleAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteGroupRoleRules"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DeleteGroupRoleRules",
		InputTypeName:  "DeleteGroupRoleRulesInput",
		OutputTypeName: "DeleteGroupRoleRulesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DeleteGroupRoleRulesInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteGroupRoleRulesOutput)(nil)),
	}
	ServiceApiSpecMap["GrantResourceGroupsToUserGroups"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "GrantResourceGroupsToUserGroups",
		InputTypeName:  "GrantResourceGroupsToUserGroupsInput",
		OutputTypeName: "GrantResourceGroupsToUserGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*GrantResourceGroupsToUserGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*GrantResourceGroupsToUserGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["RevokeResourceGroupsFromUserGroups"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "RevokeResourceGroupsFromUserGroups",
		InputTypeName:  "RevokeResourceGroupsFromUserGroupsInput",
		OutputTypeName: "RevokeResourceGroupsFromUserGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*RevokeResourceGroupsFromUserGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*RevokeResourceGroupsFromUserGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeResourceUserGroups"] = ServiceApiSpec{
		ServiceName:    "ResourceACLService",
		ActionName:     "DescribeResourceUserGroups",
		InputTypeName:  "DescribeResourceUserGroupsInput",
		OutputTypeName: "DescribeResourceUserGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ResourceACLService)(nil)),
		InputType:   reflect.TypeOf((*DescribeResourceUserGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeResourceUserGroupsOutput)(nil)),
	}
}

func (p *ResourceACLService) DescribeSharedResourceGroups(input *DescribeSharedResourceGroupsInput) (output *DescribeSharedResourceGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeSharedResourceGroupsInput)
	}

	output = new(DescribeSharedResourceGroupsOutput)
	err = client.CallMethod("DescribeSharedResourceGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DescribeResourceGroups(input *DescribeResourceGroupsInput) (output *DescribeResourceGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeResourceGroupsInput)
	}

	output = new(DescribeResourceGroupsOutput)
	err = client.CallMethod("DescribeResourceGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) CreateResourceGroups(input *CreateResourceGroupsInput) (output *CreateResourceGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateResourceGroupsInput)
	}

	output = new(CreateResourceGroupsOutput)
	err = client.CallMethod("CreateResourceGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) ModifyResourceGroupAttributes(input *ModifyResourceGroupAttributesInput) (output *ModifyResourceGroupAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyResourceGroupAttributesInput)
	}

	output = new(ModifyResourceGroupAttributesOutput)
	err = client.CallMethod("ModifyResourceGroupAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DeleteResourceGroups(input *DeleteResourceGroupsInput) (output *DeleteResourceGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteResourceGroupsInput)
	}

	output = new(DeleteResourceGroupsOutput)
	err = client.CallMethod("DeleteResourceGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DescribeResourceGroupItems(input *DescribeResourceGroupItemsInput) (output *DescribeResourceGroupItemsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeResourceGroupItemsInput)
	}

	output = new(DescribeResourceGroupItemsOutput)
	err = client.CallMethod("DescribeResourceGroupItems", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) AddResourceGroupItems(input *AddResourceGroupItemsInput) (output *AddResourceGroupItemsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddResourceGroupItemsInput)
	}

	output = new(AddResourceGroupItemsOutput)
	err = client.CallMethod("AddResourceGroupItems", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DeleteResourceGroupItems(input *DeleteResourceGroupItemsInput) (output *DeleteResourceGroupItemsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteResourceGroupItemsInput)
	}

	output = new(DeleteResourceGroupItemsOutput)
	err = client.CallMethod("DeleteResourceGroupItems", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DescribeUserGroups(input *DescribeUserGroupsInput) (output *DescribeUserGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeUserGroupsInput)
	}

	output = new(DescribeUserGroupsOutput)
	err = client.CallMethod("DescribeUserGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) CreateUserGroups(input *CreateUserGroupsInput) (output *CreateUserGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateUserGroupsInput)
	}

	output = new(CreateUserGroupsOutput)
	err = client.CallMethod("CreateUserGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) ModifyUserGroupAttributes(input *ModifyUserGroupAttributesInput) (output *ModifyUserGroupAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyUserGroupAttributesInput)
	}

	output = new(ModifyUserGroupAttributesOutput)
	err = client.CallMethod("ModifyUserGroupAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DeleteUserGroups(input *DeleteUserGroupsInput) (output *DeleteUserGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteUserGroupsInput)
	}

	output = new(DeleteUserGroupsOutput)
	err = client.CallMethod("DeleteUserGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DescribeUserGroupMembers(input *DescribeUserGroupMembersInput) (output *DescribeUserGroupMembersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeUserGroupMembersInput)
	}

	output = new(DescribeUserGroupMembersOutput)
	err = client.CallMethod("DescribeUserGroupMembers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) AddUserGroupMembers(input *AddUserGroupMembersInput) (output *AddUserGroupMembersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddUserGroupMembersInput)
	}

	output = new(AddUserGroupMembersOutput)
	err = client.CallMethod("AddUserGroupMembers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) ModifyUserGroupMemberAttributes(input *ModifyUserGroupMemberAttributesInput) (output *ModifyUserGroupMemberAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyUserGroupMemberAttributesInput)
	}

	output = new(ModifyUserGroupMemberAttributesOutput)
	err = client.CallMethod("ModifyUserGroupMemberAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DeleteUserGroupMembers(input *DeleteUserGroupMembersInput) (output *DeleteUserGroupMembersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteUserGroupMembersInput)
	}

	output = new(DeleteUserGroupMembersOutput)
	err = client.CallMethod("DeleteUserGroupMembers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DescribeGroupRoles(input *DescribeGroupRolesInput) (output *DescribeGroupRolesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeGroupRolesInput)
	}

	output = new(DescribeGroupRolesOutput)
	err = client.CallMethod("DescribeGroupRoles", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) CreateGroupRoles(input *CreateGroupRolesInput) (output *CreateGroupRolesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateGroupRolesInput)
	}

	output = new(CreateGroupRolesOutput)
	err = client.CallMethod("CreateGroupRoles", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) ModifyGroupRoleAttributes(input *ModifyGroupRoleAttributesInput) (output *ModifyGroupRoleAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyGroupRoleAttributesInput)
	}

	output = new(ModifyGroupRoleAttributesOutput)
	err = client.CallMethod("ModifyGroupRoleAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DeleteGroupRoles(input *DeleteGroupRolesInput) (output *DeleteGroupRolesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteGroupRolesInput)
	}

	output = new(DeleteGroupRolesOutput)
	err = client.CallMethod("DeleteGroupRoles", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DescribeGroupRoleRules(input *DescribeGroupRoleRulesInput) (output *DescribeGroupRoleRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeGroupRoleRulesInput)
	}

	output = new(DescribeGroupRoleRulesOutput)
	err = client.CallMethod("DescribeGroupRoleRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) AddGroupRoleRules(input *AddGroupRoleRulesInput) (output *AddGroupRoleRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddGroupRoleRulesInput)
	}

	output = new(AddGroupRoleRulesOutput)
	err = client.CallMethod("AddGroupRoleRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) ModifyGroupRoleRuleAttributes(input *ModifyGroupRoleRuleAttributesInput) (output *ModifyGroupRoleRuleAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyGroupRoleRuleAttributesInput)
	}

	output = new(ModifyGroupRoleRuleAttributesOutput)
	err = client.CallMethod("ModifyGroupRoleRuleAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DeleteGroupRoleRules(input *DeleteGroupRoleRulesInput) (output *DeleteGroupRoleRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteGroupRoleRulesInput)
	}

	output = new(DeleteGroupRoleRulesOutput)
	err = client.CallMethod("DeleteGroupRoleRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) GrantResourceGroupsToUserGroups(input *GrantResourceGroupsToUserGroupsInput) (output *GrantResourceGroupsToUserGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(GrantResourceGroupsToUserGroupsInput)
	}

	output = new(GrantResourceGroupsToUserGroupsOutput)
	err = client.CallMethod("GrantResourceGroupsToUserGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) RevokeResourceGroupsFromUserGroups(input *RevokeResourceGroupsFromUserGroupsInput) (output *RevokeResourceGroupsFromUserGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RevokeResourceGroupsFromUserGroupsInput)
	}

	output = new(RevokeResourceGroupsFromUserGroupsOutput)
	err = client.CallMethod("RevokeResourceGroupsFromUserGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ResourceACLService) DescribeResourceUserGroups(input *DescribeResourceUserGroupsInput) (output *DescribeResourceUserGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeResourceUserGroupsInput)
	}

	output = new(DescribeResourceUserGroupsOutput)
	err = client.CallMethod("DescribeResourceUserGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
