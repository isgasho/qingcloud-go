// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: cache.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

func init() {
	TypeInfoMap["DescribeCachesInput"] = reflect.TypeOf((*DescribeCachesInput)(nil))
	TypeInfoMap["DescribeCachesOutput"] = reflect.TypeOf((*DescribeCachesOutput)(nil))
	TypeInfoMap["CreateCacheInput"] = reflect.TypeOf((*CreateCacheInput)(nil))
	TypeInfoMap["CreateCacheOutput"] = reflect.TypeOf((*CreateCacheOutput)(nil))
	TypeInfoMap["StopCachesInput"] = reflect.TypeOf((*StopCachesInput)(nil))
	TypeInfoMap["StopCachesOutput"] = reflect.TypeOf((*StopCachesOutput)(nil))
	TypeInfoMap["StartCachesInput"] = reflect.TypeOf((*StartCachesInput)(nil))
	TypeInfoMap["StartCachesOutput"] = reflect.TypeOf((*StartCachesOutput)(nil))
	TypeInfoMap["RestartCachesInput"] = reflect.TypeOf((*RestartCachesInput)(nil))
	TypeInfoMap["RestartCachesOutput"] = reflect.TypeOf((*RestartCachesOutput)(nil))
	TypeInfoMap["DeleteCachesInput"] = reflect.TypeOf((*DeleteCachesInput)(nil))
	TypeInfoMap["DeleteCachesOutput"] = reflect.TypeOf((*DeleteCachesOutput)(nil))
	TypeInfoMap["ResizeCachesInput"] = reflect.TypeOf((*ResizeCachesInput)(nil))
	TypeInfoMap["ResizeCachesOutput"] = reflect.TypeOf((*ResizeCachesOutput)(nil))
	TypeInfoMap["UpdateCacheInput"] = reflect.TypeOf((*UpdateCacheInput)(nil))
	TypeInfoMap["UpdateCacheOutput"] = reflect.TypeOf((*UpdateCacheOutput)(nil))
	TypeInfoMap["ChangeCacheVxnetInput"] = reflect.TypeOf((*ChangeCacheVxnetInput)(nil))
	TypeInfoMap["ChangeCacheVxnetOutput"] = reflect.TypeOf((*ChangeCacheVxnetOutput)(nil))
	TypeInfoMap["ModifyCacheAttributesInput"] = reflect.TypeOf((*ModifyCacheAttributesInput)(nil))
	TypeInfoMap["ModifyCacheAttributesOutput"] = reflect.TypeOf((*ModifyCacheAttributesOutput)(nil))
	TypeInfoMap["DescribeCacheNodesInput"] = reflect.TypeOf((*DescribeCacheNodesInput)(nil))
	TypeInfoMap["DescribeCacheNodesOutput"] = reflect.TypeOf((*DescribeCacheNodesOutput)(nil))
	TypeInfoMap["AddCacheNodesInput"] = reflect.TypeOf((*AddCacheNodesInput)(nil))
	TypeInfoMap["AddCacheNodesOutput"] = reflect.TypeOf((*AddCacheNodesOutput)(nil))
	TypeInfoMap["DeleteCacheNodesInput"] = reflect.TypeOf((*DeleteCacheNodesInput)(nil))
	TypeInfoMap["DeleteCacheNodesOutput"] = reflect.TypeOf((*DeleteCacheNodesOutput)(nil))
	TypeInfoMap["RestartCacheNodesInput"] = reflect.TypeOf((*RestartCacheNodesInput)(nil))
	TypeInfoMap["RestartCacheNodesOutput"] = reflect.TypeOf((*RestartCacheNodesOutput)(nil))
	TypeInfoMap["ModifyCacheNodeAttributesInput"] = reflect.TypeOf((*ModifyCacheNodeAttributesInput)(nil))
	TypeInfoMap["ModifyCacheNodeAttributesOutput"] = reflect.TypeOf((*ModifyCacheNodeAttributesOutput)(nil))
	TypeInfoMap["CreateCacheFromSnapshotInput"] = reflect.TypeOf((*CreateCacheFromSnapshotInput)(nil))
	TypeInfoMap["CreateCacheFromSnapshotOutput"] = reflect.TypeOf((*CreateCacheFromSnapshotOutput)(nil))
	TypeInfoMap["DescribeCacheParameterGroupsInput"] = reflect.TypeOf((*DescribeCacheParameterGroupsInput)(nil))
	TypeInfoMap["DescribeCacheParameterGroupsOutput"] = reflect.TypeOf((*DescribeCacheParameterGroupsOutput)(nil))
	TypeInfoMap["CreateCacheParameterGroupInput"] = reflect.TypeOf((*CreateCacheParameterGroupInput)(nil))
	TypeInfoMap["CreateCacheParameterGroupOutput"] = reflect.TypeOf((*CreateCacheParameterGroupOutput)(nil))
	TypeInfoMap["ApplyCacheParameterGroupInput"] = reflect.TypeOf((*ApplyCacheParameterGroupInput)(nil))
	TypeInfoMap["ApplyCacheParameterGroupOutput"] = reflect.TypeOf((*ApplyCacheParameterGroupOutput)(nil))
	TypeInfoMap["DeleteCacheParameterGroupsInput"] = reflect.TypeOf((*DeleteCacheParameterGroupsInput)(nil))
	TypeInfoMap["DeleteCacheParameterGroupsOutput"] = reflect.TypeOf((*DeleteCacheParameterGroupsOutput)(nil))
	TypeInfoMap["ModifyCacheParameterGroupAttributesInput"] = reflect.TypeOf((*ModifyCacheParameterGroupAttributesInput)(nil))
	TypeInfoMap["ModifyCacheParameterGroupAttributesOutput"] = reflect.TypeOf((*ModifyCacheParameterGroupAttributesOutput)(nil))
	TypeInfoMap["DescribeCacheParametersInput"] = reflect.TypeOf((*DescribeCacheParametersInput)(nil))
	TypeInfoMap["DescribeCacheParametersOutput"] = reflect.TypeOf((*DescribeCacheParametersOutput)(nil))
	TypeInfoMap["UpdateCacheParametersInput"] = reflect.TypeOf((*UpdateCacheParametersInput)(nil))
	TypeInfoMap["UpdateCacheParametersOutput"] = reflect.TypeOf((*UpdateCacheParametersOutput)(nil))
	TypeInfoMap["ResetCacheParametersInput"] = reflect.TypeOf((*ResetCacheParametersInput)(nil))
	TypeInfoMap["ResetCacheParametersOutput"] = reflect.TypeOf((*ResetCacheParametersOutput)(nil))
}

type CacheServiceInterface interface {
	DescribeCaches(in *DescribeCachesInput) (out *DescribeCachesOutput, err error)
	CreateCache(in *CreateCacheInput) (out *CreateCacheOutput, err error)
	StopCaches(in *StopCachesInput) (out *StopCachesOutput, err error)
	StartCaches(in *StartCachesInput) (out *StartCachesOutput, err error)
	RestartCaches(in *RestartCachesInput) (out *RestartCachesOutput, err error)
	DeleteCaches(in *DeleteCachesInput) (out *DeleteCachesOutput, err error)
	ResizeCaches(in *ResizeCachesInput) (out *ResizeCachesOutput, err error)
	UpdateCache(in *UpdateCacheInput) (out *UpdateCacheOutput, err error)
	ChangeCacheVxnet(in *ChangeCacheVxnetInput) (out *ChangeCacheVxnetOutput, err error)
	ModifyCacheAttributes(in *ModifyCacheAttributesInput) (out *ModifyCacheAttributesOutput, err error)
	DescribeCacheNodes(in *DescribeCacheNodesInput) (out *DescribeCacheNodesOutput, err error)
	AddCacheNodes(in *AddCacheNodesInput) (out *AddCacheNodesOutput, err error)
	DeleteCacheNodes(in *DeleteCacheNodesInput) (out *DeleteCacheNodesOutput, err error)
	RestartCacheNodes(in *RestartCacheNodesInput) (out *RestartCacheNodesOutput, err error)
	ModifyCacheNodeAttributes(in *ModifyCacheNodeAttributesInput) (out *ModifyCacheNodeAttributesOutput, err error)
	CreateCacheFromSnapshot(in *CreateCacheFromSnapshotInput) (out *CreateCacheFromSnapshotOutput, err error)
	DescribeCacheParameterGroups(in *DescribeCacheParameterGroupsInput) (out *DescribeCacheParameterGroupsOutput, err error)
	CreateCacheParameterGroup(in *CreateCacheParameterGroupInput) (out *CreateCacheParameterGroupOutput, err error)
	ApplyCacheParameterGroup(in *ApplyCacheParameterGroupInput) (out *ApplyCacheParameterGroupOutput, err error)
	DeleteCacheParameterGroups(in *DeleteCacheParameterGroupsInput) (out *DeleteCacheParameterGroupsOutput, err error)
	ModifyCacheParameterGroupAttributes(in *ModifyCacheParameterGroupAttributesInput) (out *ModifyCacheParameterGroupAttributesOutput, err error)
	DescribeCacheParameters(in *DescribeCacheParametersInput) (out *DescribeCacheParametersOutput, err error)
	UpdateCacheParameters(in *UpdateCacheParametersInput) (out *UpdateCacheParametersOutput, err error)
	ResetCacheParameters(in *ResetCacheParametersInput) (out *ResetCacheParametersOutput, err error)
}

type CacheService struct {
	ServerInfo *ServerInfo
}

func NewCacheService(server *ServerInfo) (p *CacheService) {
	return &CacheService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeCaches"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "DescribeCaches",
		InputTypeName:  "DescribeCachesInput",
		OutputTypeName: "DescribeCachesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*DescribeCachesInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeCachesOutput)(nil)),
	}
	ServiceApiSpecMap["CreateCache"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "CreateCache",
		InputTypeName:  "CreateCacheInput",
		OutputTypeName: "CreateCacheOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*CreateCacheInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateCacheOutput)(nil)),
	}
	ServiceApiSpecMap["StopCaches"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "StopCaches",
		InputTypeName:  "StopCachesInput",
		OutputTypeName: "StopCachesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*StopCachesInput)(nil)),
		OutputType:  reflect.TypeOf((*StopCachesOutput)(nil)),
	}
	ServiceApiSpecMap["StartCaches"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "StartCaches",
		InputTypeName:  "StartCachesInput",
		OutputTypeName: "StartCachesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*StartCachesInput)(nil)),
		OutputType:  reflect.TypeOf((*StartCachesOutput)(nil)),
	}
	ServiceApiSpecMap["RestartCaches"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "RestartCaches",
		InputTypeName:  "RestartCachesInput",
		OutputTypeName: "RestartCachesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*RestartCachesInput)(nil)),
		OutputType:  reflect.TypeOf((*RestartCachesOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteCaches"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "DeleteCaches",
		InputTypeName:  "DeleteCachesInput",
		OutputTypeName: "DeleteCachesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*DeleteCachesInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteCachesOutput)(nil)),
	}
	ServiceApiSpecMap["ResizeCaches"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "ResizeCaches",
		InputTypeName:  "ResizeCachesInput",
		OutputTypeName: "ResizeCachesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*ResizeCachesInput)(nil)),
		OutputType:  reflect.TypeOf((*ResizeCachesOutput)(nil)),
	}
	ServiceApiSpecMap["UpdateCache"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "UpdateCache",
		InputTypeName:  "UpdateCacheInput",
		OutputTypeName: "UpdateCacheOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*UpdateCacheInput)(nil)),
		OutputType:  reflect.TypeOf((*UpdateCacheOutput)(nil)),
	}
	ServiceApiSpecMap["ChangeCacheVxnet"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "ChangeCacheVxnet",
		InputTypeName:  "ChangeCacheVxnetInput",
		OutputTypeName: "ChangeCacheVxnetOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*ChangeCacheVxnetInput)(nil)),
		OutputType:  reflect.TypeOf((*ChangeCacheVxnetOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyCacheAttributes"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "ModifyCacheAttributes",
		InputTypeName:  "ModifyCacheAttributesInput",
		OutputTypeName: "ModifyCacheAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*ModifyCacheAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyCacheAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeCacheNodes"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "DescribeCacheNodes",
		InputTypeName:  "DescribeCacheNodesInput",
		OutputTypeName: "DescribeCacheNodesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*DescribeCacheNodesInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeCacheNodesOutput)(nil)),
	}
	ServiceApiSpecMap["AddCacheNodes"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "AddCacheNodes",
		InputTypeName:  "AddCacheNodesInput",
		OutputTypeName: "AddCacheNodesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*AddCacheNodesInput)(nil)),
		OutputType:  reflect.TypeOf((*AddCacheNodesOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteCacheNodes"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "DeleteCacheNodes",
		InputTypeName:  "DeleteCacheNodesInput",
		OutputTypeName: "DeleteCacheNodesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*DeleteCacheNodesInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteCacheNodesOutput)(nil)),
	}
	ServiceApiSpecMap["RestartCacheNodes"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "RestartCacheNodes",
		InputTypeName:  "RestartCacheNodesInput",
		OutputTypeName: "RestartCacheNodesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*RestartCacheNodesInput)(nil)),
		OutputType:  reflect.TypeOf((*RestartCacheNodesOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyCacheNodeAttributes"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "ModifyCacheNodeAttributes",
		InputTypeName:  "ModifyCacheNodeAttributesInput",
		OutputTypeName: "ModifyCacheNodeAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*ModifyCacheNodeAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyCacheNodeAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["CreateCacheFromSnapshot"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "CreateCacheFromSnapshot",
		InputTypeName:  "CreateCacheFromSnapshotInput",
		OutputTypeName: "CreateCacheFromSnapshotOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*CreateCacheFromSnapshotInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateCacheFromSnapshotOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeCacheParameterGroups"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "DescribeCacheParameterGroups",
		InputTypeName:  "DescribeCacheParameterGroupsInput",
		OutputTypeName: "DescribeCacheParameterGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*DescribeCacheParameterGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeCacheParameterGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["CreateCacheParameterGroup"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "CreateCacheParameterGroup",
		InputTypeName:  "CreateCacheParameterGroupInput",
		OutputTypeName: "CreateCacheParameterGroupOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*CreateCacheParameterGroupInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateCacheParameterGroupOutput)(nil)),
	}
	ServiceApiSpecMap["ApplyCacheParameterGroup"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "ApplyCacheParameterGroup",
		InputTypeName:  "ApplyCacheParameterGroupInput",
		OutputTypeName: "ApplyCacheParameterGroupOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*ApplyCacheParameterGroupInput)(nil)),
		OutputType:  reflect.TypeOf((*ApplyCacheParameterGroupOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteCacheParameterGroups"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "DeleteCacheParameterGroups",
		InputTypeName:  "DeleteCacheParameterGroupsInput",
		OutputTypeName: "DeleteCacheParameterGroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*DeleteCacheParameterGroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteCacheParameterGroupsOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyCacheParameterGroupAttributes"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "ModifyCacheParameterGroupAttributes",
		InputTypeName:  "ModifyCacheParameterGroupAttributesInput",
		OutputTypeName: "ModifyCacheParameterGroupAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*ModifyCacheParameterGroupAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyCacheParameterGroupAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeCacheParameters"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "DescribeCacheParameters",
		InputTypeName:  "DescribeCacheParametersInput",
		OutputTypeName: "DescribeCacheParametersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*DescribeCacheParametersInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeCacheParametersOutput)(nil)),
	}
	ServiceApiSpecMap["UpdateCacheParameters"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "UpdateCacheParameters",
		InputTypeName:  "UpdateCacheParametersInput",
		OutputTypeName: "UpdateCacheParametersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*UpdateCacheParametersInput)(nil)),
		OutputType:  reflect.TypeOf((*UpdateCacheParametersOutput)(nil)),
	}
	ServiceApiSpecMap["ResetCacheParameters"] = ServiceApiSpec{
		ServiceName:    "CacheService",
		ActionName:     "ResetCacheParameters",
		InputTypeName:  "ResetCacheParametersInput",
		OutputTypeName: "ResetCacheParametersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*CacheService)(nil)),
		InputType:   reflect.TypeOf((*ResetCacheParametersInput)(nil)),
		OutputType:  reflect.TypeOf((*ResetCacheParametersOutput)(nil)),
	}
}

func (p *CacheService) DescribeCaches(input *DescribeCachesInput) (output *DescribeCachesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeCachesInput)
	}

	output = new(DescribeCachesOutput)
	err = client.CallMethod("DescribeCaches", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) CreateCache(input *CreateCacheInput) (output *CreateCacheOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateCacheInput)
	}

	output = new(CreateCacheOutput)
	err = client.CallMethod("CreateCache", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) StopCaches(input *StopCachesInput) (output *StopCachesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StopCachesInput)
	}

	output = new(StopCachesOutput)
	err = client.CallMethod("StopCaches", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) StartCaches(input *StartCachesInput) (output *StartCachesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StartCachesInput)
	}

	output = new(StartCachesOutput)
	err = client.CallMethod("StartCaches", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) RestartCaches(input *RestartCachesInput) (output *RestartCachesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RestartCachesInput)
	}

	output = new(RestartCachesOutput)
	err = client.CallMethod("RestartCaches", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) DeleteCaches(input *DeleteCachesInput) (output *DeleteCachesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteCachesInput)
	}

	output = new(DeleteCachesOutput)
	err = client.CallMethod("DeleteCaches", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) ResizeCaches(input *ResizeCachesInput) (output *ResizeCachesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ResizeCachesInput)
	}

	output = new(ResizeCachesOutput)
	err = client.CallMethod("ResizeCaches", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) UpdateCache(input *UpdateCacheInput) (output *UpdateCacheOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(UpdateCacheInput)
	}

	output = new(UpdateCacheOutput)
	err = client.CallMethod("UpdateCache", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) ChangeCacheVxnet(input *ChangeCacheVxnetInput) (output *ChangeCacheVxnetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ChangeCacheVxnetInput)
	}

	output = new(ChangeCacheVxnetOutput)
	err = client.CallMethod("ChangeCacheVxnet", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) ModifyCacheAttributes(input *ModifyCacheAttributesInput) (output *ModifyCacheAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyCacheAttributesInput)
	}

	output = new(ModifyCacheAttributesOutput)
	err = client.CallMethod("ModifyCacheAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) DescribeCacheNodes(input *DescribeCacheNodesInput) (output *DescribeCacheNodesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeCacheNodesInput)
	}

	output = new(DescribeCacheNodesOutput)
	err = client.CallMethod("DescribeCacheNodes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) AddCacheNodes(input *AddCacheNodesInput) (output *AddCacheNodesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddCacheNodesInput)
	}

	output = new(AddCacheNodesOutput)
	err = client.CallMethod("AddCacheNodes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) DeleteCacheNodes(input *DeleteCacheNodesInput) (output *DeleteCacheNodesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteCacheNodesInput)
	}

	output = new(DeleteCacheNodesOutput)
	err = client.CallMethod("DeleteCacheNodes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) RestartCacheNodes(input *RestartCacheNodesInput) (output *RestartCacheNodesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RestartCacheNodesInput)
	}

	output = new(RestartCacheNodesOutput)
	err = client.CallMethod("RestartCacheNodes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) ModifyCacheNodeAttributes(input *ModifyCacheNodeAttributesInput) (output *ModifyCacheNodeAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyCacheNodeAttributesInput)
	}

	output = new(ModifyCacheNodeAttributesOutput)
	err = client.CallMethod("ModifyCacheNodeAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) CreateCacheFromSnapshot(input *CreateCacheFromSnapshotInput) (output *CreateCacheFromSnapshotOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateCacheFromSnapshotInput)
	}

	output = new(CreateCacheFromSnapshotOutput)
	err = client.CallMethod("CreateCacheFromSnapshot", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) DescribeCacheParameterGroups(input *DescribeCacheParameterGroupsInput) (output *DescribeCacheParameterGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeCacheParameterGroupsInput)
	}

	output = new(DescribeCacheParameterGroupsOutput)
	err = client.CallMethod("DescribeCacheParameterGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) CreateCacheParameterGroup(input *CreateCacheParameterGroupInput) (output *CreateCacheParameterGroupOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateCacheParameterGroupInput)
	}

	output = new(CreateCacheParameterGroupOutput)
	err = client.CallMethod("CreateCacheParameterGroup", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) ApplyCacheParameterGroup(input *ApplyCacheParameterGroupInput) (output *ApplyCacheParameterGroupOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ApplyCacheParameterGroupInput)
	}

	output = new(ApplyCacheParameterGroupOutput)
	err = client.CallMethod("ApplyCacheParameterGroup", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) DeleteCacheParameterGroups(input *DeleteCacheParameterGroupsInput) (output *DeleteCacheParameterGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteCacheParameterGroupsInput)
	}

	output = new(DeleteCacheParameterGroupsOutput)
	err = client.CallMethod("DeleteCacheParameterGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) ModifyCacheParameterGroupAttributes(input *ModifyCacheParameterGroupAttributesInput) (output *ModifyCacheParameterGroupAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyCacheParameterGroupAttributesInput)
	}

	output = new(ModifyCacheParameterGroupAttributesOutput)
	err = client.CallMethod("ModifyCacheParameterGroupAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) DescribeCacheParameters(input *DescribeCacheParametersInput) (output *DescribeCacheParametersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeCacheParametersInput)
	}

	output = new(DescribeCacheParametersOutput)
	err = client.CallMethod("DescribeCacheParameters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) UpdateCacheParameters(input *UpdateCacheParametersInput) (output *UpdateCacheParametersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(UpdateCacheParametersInput)
	}

	output = new(UpdateCacheParametersOutput)
	err = client.CallMethod("UpdateCacheParameters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *CacheService) ResetCacheParameters(input *ResetCacheParametersInput) (output *ResetCacheParametersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ResetCacheParametersInput)
	}

	output = new(ResetCacheParametersOutput)
	err = client.CallMethod("ResetCacheParameters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
