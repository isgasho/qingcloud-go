// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: mongo.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

func init() {
	TypeInfoMap["DescribeMongoNodesInput"] = reflect.TypeOf((*DescribeMongoNodesInput)(nil))
	TypeInfoMap["DescribeMongoNodesOutput"] = reflect.TypeOf((*DescribeMongoNodesOutput)(nil))
	TypeInfoMap["DescribeMongoParametersInput"] = reflect.TypeOf((*DescribeMongoParametersInput)(nil))
	TypeInfoMap["DescribeMongoParametersOutput"] = reflect.TypeOf((*DescribeMongoParametersOutput)(nil))
	TypeInfoMap["ResizeMongosInput"] = reflect.TypeOf((*ResizeMongosInput)(nil))
	TypeInfoMap["ResizeMongosOutput"] = reflect.TypeOf((*ResizeMongosOutput)(nil))
	TypeInfoMap["CreateMongoInput"] = reflect.TypeOf((*CreateMongoInput)(nil))
	TypeInfoMap["CreateMongoOutput"] = reflect.TypeOf((*CreateMongoOutput)(nil))
	TypeInfoMap["StopMongosInput"] = reflect.TypeOf((*StopMongosInput)(nil))
	TypeInfoMap["StopMongosOutput"] = reflect.TypeOf((*StopMongosOutput)(nil))
	TypeInfoMap["StartMongosInput"] = reflect.TypeOf((*StartMongosInput)(nil))
	TypeInfoMap["StartMongosOutput"] = reflect.TypeOf((*StartMongosOutput)(nil))
	TypeInfoMap["DescribeMongosInput"] = reflect.TypeOf((*DescribeMongosInput)(nil))
	TypeInfoMap["DescribeMongosOutput"] = reflect.TypeOf((*DescribeMongosOutput)(nil))
	TypeInfoMap["DeleteMongosInput"] = reflect.TypeOf((*DeleteMongosInput)(nil))
	TypeInfoMap["DeleteMongosOutput"] = reflect.TypeOf((*DeleteMongosOutput)(nil))
	TypeInfoMap["CreateMongoFromSnapshotInput"] = reflect.TypeOf((*CreateMongoFromSnapshotInput)(nil))
	TypeInfoMap["CreateMongoFromSnapshotOutput"] = reflect.TypeOf((*CreateMongoFromSnapshotOutput)(nil))
	TypeInfoMap["ChangeMongoVxnetInput"] = reflect.TypeOf((*ChangeMongoVxnetInput)(nil))
	TypeInfoMap["ChangeMongoVxnetOutput"] = reflect.TypeOf((*ChangeMongoVxnetOutput)(nil))
	TypeInfoMap["AddMongoInstancesInput"] = reflect.TypeOf((*AddMongoInstancesInput)(nil))
	TypeInfoMap["AddMongoInstancesOutput"] = reflect.TypeOf((*AddMongoInstancesOutput)(nil))
	TypeInfoMap["RemoveMongoInstancesInput"] = reflect.TypeOf((*RemoveMongoInstancesInput)(nil))
	TypeInfoMap["RemoveMongoInstancesOutput"] = reflect.TypeOf((*RemoveMongoInstancesOutput)(nil))
	TypeInfoMap["ModifyMongoAttributesInput"] = reflect.TypeOf((*ModifyMongoAttributesInput)(nil))
	TypeInfoMap["ModifyMongoAttributesOutput"] = reflect.TypeOf((*ModifyMongoAttributesOutput)(nil))
	TypeInfoMap["ModifyMongoInstancesInput"] = reflect.TypeOf((*ModifyMongoInstancesInput)(nil))
	TypeInfoMap["ModifyMongoInstancesOutput"] = reflect.TypeOf((*ModifyMongoInstancesOutput)(nil))
}

type MongoServiceInterface interface {
	DescribeMongoNodes(in *DescribeMongoNodesInput) (out *DescribeMongoNodesOutput, err error)
	DescribeMongoParameters(in *DescribeMongoParametersInput) (out *DescribeMongoParametersOutput, err error)
	ResizeMongos(in *ResizeMongosInput) (out *ResizeMongosOutput, err error)
	CreateMongo(in *CreateMongoInput) (out *CreateMongoOutput, err error)
	StopMongos(in *StopMongosInput) (out *StopMongosOutput, err error)
	StartMongos(in *StartMongosInput) (out *StartMongosOutput, err error)
	DescribeMongos(in *DescribeMongosInput) (out *DescribeMongosOutput, err error)
	DeleteMongos(in *DeleteMongosInput) (out *DeleteMongosOutput, err error)
	CreateMongoFromSnapshot(in *CreateMongoFromSnapshotInput) (out *CreateMongoFromSnapshotOutput, err error)
	ChangeMongoVxnet(in *ChangeMongoVxnetInput) (out *ChangeMongoVxnetOutput, err error)
	AddMongoInstances(in *AddMongoInstancesInput) (out *AddMongoInstancesOutput, err error)
	RemoveMongoInstances(in *RemoveMongoInstancesInput) (out *RemoveMongoInstancesOutput, err error)
	ModifyMongoAttributes(in *ModifyMongoAttributesInput) (out *ModifyMongoAttributesOutput, err error)
	ModifyMongoInstances(in *ModifyMongoInstancesInput) (out *ModifyMongoInstancesOutput, err error)
}

type MongoService struct {
	ServerInfo *ServerInfo
}

func NewMongoService(server *ServerInfo) (p *MongoService) {
	return &MongoService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeMongoNodes"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "DescribeMongoNodes",
		InputTypeName:  "DescribeMongoNodesInput",
		OutputTypeName: "DescribeMongoNodesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*DescribeMongoNodesInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeMongoNodesOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeMongoParameters"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "DescribeMongoParameters",
		InputTypeName:  "DescribeMongoParametersInput",
		OutputTypeName: "DescribeMongoParametersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*DescribeMongoParametersInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeMongoParametersOutput)(nil)),
	}
	ServiceApiSpecMap["ResizeMongos"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "ResizeMongos",
		InputTypeName:  "ResizeMongosInput",
		OutputTypeName: "ResizeMongosOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*ResizeMongosInput)(nil)),
		OutputType:  reflect.TypeOf((*ResizeMongosOutput)(nil)),
	}
	ServiceApiSpecMap["CreateMongo"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "CreateMongo",
		InputTypeName:  "CreateMongoInput",
		OutputTypeName: "CreateMongoOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*CreateMongoInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateMongoOutput)(nil)),
	}
	ServiceApiSpecMap["StopMongos"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "StopMongos",
		InputTypeName:  "StopMongosInput",
		OutputTypeName: "StopMongosOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*StopMongosInput)(nil)),
		OutputType:  reflect.TypeOf((*StopMongosOutput)(nil)),
	}
	ServiceApiSpecMap["StartMongos"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "StartMongos",
		InputTypeName:  "StartMongosInput",
		OutputTypeName: "StartMongosOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*StartMongosInput)(nil)),
		OutputType:  reflect.TypeOf((*StartMongosOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeMongos"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "DescribeMongos",
		InputTypeName:  "DescribeMongosInput",
		OutputTypeName: "DescribeMongosOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*DescribeMongosInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeMongosOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteMongos"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "DeleteMongos",
		InputTypeName:  "DeleteMongosInput",
		OutputTypeName: "DeleteMongosOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*DeleteMongosInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteMongosOutput)(nil)),
	}
	ServiceApiSpecMap["CreateMongoFromSnapshot"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "CreateMongoFromSnapshot",
		InputTypeName:  "CreateMongoFromSnapshotInput",
		OutputTypeName: "CreateMongoFromSnapshotOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*CreateMongoFromSnapshotInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateMongoFromSnapshotOutput)(nil)),
	}
	ServiceApiSpecMap["ChangeMongoVxnet"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "ChangeMongoVxnet",
		InputTypeName:  "ChangeMongoVxnetInput",
		OutputTypeName: "ChangeMongoVxnetOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*ChangeMongoVxnetInput)(nil)),
		OutputType:  reflect.TypeOf((*ChangeMongoVxnetOutput)(nil)),
	}
	ServiceApiSpecMap["AddMongoInstances"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "AddMongoInstances",
		InputTypeName:  "AddMongoInstancesInput",
		OutputTypeName: "AddMongoInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*AddMongoInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*AddMongoInstancesOutput)(nil)),
	}
	ServiceApiSpecMap["RemoveMongoInstances"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "RemoveMongoInstances",
		InputTypeName:  "RemoveMongoInstancesInput",
		OutputTypeName: "RemoveMongoInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*RemoveMongoInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*RemoveMongoInstancesOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyMongoAttributes"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "ModifyMongoAttributes",
		InputTypeName:  "ModifyMongoAttributesInput",
		OutputTypeName: "ModifyMongoAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*ModifyMongoAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyMongoAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyMongoInstances"] = ServiceApiSpec{
		ServiceName:    "MongoService",
		ActionName:     "ModifyMongoInstances",
		InputTypeName:  "ModifyMongoInstancesInput",
		OutputTypeName: "ModifyMongoInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*MongoService)(nil)),
		InputType:   reflect.TypeOf((*ModifyMongoInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyMongoInstancesOutput)(nil)),
	}
}

func (p *MongoService) DescribeMongoNodes(input *DescribeMongoNodesInput) (output *DescribeMongoNodesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeMongoNodesInput)
	}

	output = new(DescribeMongoNodesOutput)
	err = client.CallMethod("DescribeMongoNodes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) DescribeMongoParameters(input *DescribeMongoParametersInput) (output *DescribeMongoParametersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeMongoParametersInput)
	}

	output = new(DescribeMongoParametersOutput)
	err = client.CallMethod("DescribeMongoParameters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) ResizeMongos(input *ResizeMongosInput) (output *ResizeMongosOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ResizeMongosInput)
	}

	output = new(ResizeMongosOutput)
	err = client.CallMethod("ResizeMongos", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) CreateMongo(input *CreateMongoInput) (output *CreateMongoOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateMongoInput)
	}

	output = new(CreateMongoOutput)
	err = client.CallMethod("CreateMongo", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) StopMongos(input *StopMongosInput) (output *StopMongosOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StopMongosInput)
	}

	output = new(StopMongosOutput)
	err = client.CallMethod("StopMongos", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) StartMongos(input *StartMongosInput) (output *StartMongosOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StartMongosInput)
	}

	output = new(StartMongosOutput)
	err = client.CallMethod("StartMongos", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) DescribeMongos(input *DescribeMongosInput) (output *DescribeMongosOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeMongosInput)
	}

	output = new(DescribeMongosOutput)
	err = client.CallMethod("DescribeMongos", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) DeleteMongos(input *DeleteMongosInput) (output *DeleteMongosOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteMongosInput)
	}

	output = new(DeleteMongosOutput)
	err = client.CallMethod("DeleteMongos", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) CreateMongoFromSnapshot(input *CreateMongoFromSnapshotInput) (output *CreateMongoFromSnapshotOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateMongoFromSnapshotInput)
	}

	output = new(CreateMongoFromSnapshotOutput)
	err = client.CallMethod("CreateMongoFromSnapshot", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) ChangeMongoVxnet(input *ChangeMongoVxnetInput) (output *ChangeMongoVxnetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ChangeMongoVxnetInput)
	}

	output = new(ChangeMongoVxnetOutput)
	err = client.CallMethod("ChangeMongoVxnet", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) AddMongoInstances(input *AddMongoInstancesInput) (output *AddMongoInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddMongoInstancesInput)
	}

	output = new(AddMongoInstancesOutput)
	err = client.CallMethod("AddMongoInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) RemoveMongoInstances(input *RemoveMongoInstancesInput) (output *RemoveMongoInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RemoveMongoInstancesInput)
	}

	output = new(RemoveMongoInstancesOutput)
	err = client.CallMethod("RemoveMongoInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) ModifyMongoAttributes(input *ModifyMongoAttributesInput) (output *ModifyMongoAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyMongoAttributesInput)
	}

	output = new(ModifyMongoAttributesOutput)
	err = client.CallMethod("ModifyMongoAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) ModifyMongoInstances(input *ModifyMongoInstancesInput) (output *ModifyMongoInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyMongoInstancesInput)
	}

	output = new(ModifyMongoInstancesOutput)
	err = client.CallMethod("ModifyMongoInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
