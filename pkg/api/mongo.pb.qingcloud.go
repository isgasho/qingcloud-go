// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: mongo.proto

package service

import proto "github.com/golang/protobuf/proto"
import "fmt"

import "github.com/chai2010/qingcloud-go/pkg/client"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = proto.Marshal

var _ = client.NewClient

type MongoServiceInterface interface {
	DescribeMongoNodes(in *DescribeMongoNodesInput) (out *DescribeMongoNodesOutput, err error)
	DescribeMongoParameters(in *DescribeMongoParametersInput) (out *DescribeMongoParametersOutput, err error)
	ResizeMongos(in *ResizeMongosInput) (out *ResizeMongosOutput, err error)
	CreateMongo(in *CreateMongoInput) (out *CreateMongoOutput, err error)
	StopMongos(in *StopMongosInput) (out *StopMongosOutput, err error)
	StartMongos(in *StartMongosInput) (out *StartMongosOutput, err error)
	DescribeMongos(in *DescribeMongosInput) (out *DescribeMongosOutput, err error)
	DeleteMongos(in *DeleteMongosInput) (out *DeleteMongosOutput, err error)
	CreateMongoFromSnapshot(in *CreateMongoFromSnapshotInput) (out *CreateMongoFromSnapshotOutput, err error)
	ChangeMongoVxnet(in *ChangeMongoVxnetInput) (out *ChangeMongoVxnetOutput, err error)
	AddMongoInstances(in *AddMongoInstancesInput) (out *AddMongoInstancesOutput, err error)
	RemoveMongoInstances(in *RemoveMongoInstancesInput) (out *RemoveMongoInstancesOutput, err error)
	ModifyMongoAttributes(in *ModifyMongoAttributesInput) (out *ModifyMongoAttributesOutput, err error)
	ModifyMongoInstances(in *ModifyMongoInstancesInput) (out *ModifyMongoInstancesOutput, err error)
}

type MongoService struct {
	ServerInfo       *ServerInfo
	LastResponseBody string
}

func NewMongoService(server *ServerInfo) (p *MongoService) {
	return &MongoService{
		ServerInfo: server,
	}
}

func (p *MongoService) DescribeMongoNodes(input *DescribeMongoNodesInput) (output *DescribeMongoNodesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeMongoNodesInput)
	}

	output = new(DescribeMongoNodesOutput)
	err = client.CallMethod("DescribeMongoNodes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) DescribeMongoParameters(input *DescribeMongoParametersInput) (output *DescribeMongoParametersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeMongoParametersInput)
	}

	output = new(DescribeMongoParametersOutput)
	err = client.CallMethod("DescribeMongoParameters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) ResizeMongos(input *ResizeMongosInput) (output *ResizeMongosOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ResizeMongosInput)
	}

	output = new(ResizeMongosOutput)
	err = client.CallMethod("ResizeMongos", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) CreateMongo(input *CreateMongoInput) (output *CreateMongoOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateMongoInput)
	}

	output = new(CreateMongoOutput)
	err = client.CallMethod("CreateMongo", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) StopMongos(input *StopMongosInput) (output *StopMongosOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StopMongosInput)
	}

	output = new(StopMongosOutput)
	err = client.CallMethod("StopMongos", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) StartMongos(input *StartMongosInput) (output *StartMongosOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StartMongosInput)
	}

	output = new(StartMongosOutput)
	err = client.CallMethod("StartMongos", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) DescribeMongos(input *DescribeMongosInput) (output *DescribeMongosOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeMongosInput)
	}

	output = new(DescribeMongosOutput)
	err = client.CallMethod("DescribeMongos", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) DeleteMongos(input *DeleteMongosInput) (output *DeleteMongosOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteMongosInput)
	}

	output = new(DeleteMongosOutput)
	err = client.CallMethod("DeleteMongos", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) CreateMongoFromSnapshot(input *CreateMongoFromSnapshotInput) (output *CreateMongoFromSnapshotOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateMongoFromSnapshotInput)
	}

	output = new(CreateMongoFromSnapshotOutput)
	err = client.CallMethod("CreateMongoFromSnapshot", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) ChangeMongoVxnet(input *ChangeMongoVxnetInput) (output *ChangeMongoVxnetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ChangeMongoVxnetInput)
	}

	output = new(ChangeMongoVxnetOutput)
	err = client.CallMethod("ChangeMongoVxnet", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) AddMongoInstances(input *AddMongoInstancesInput) (output *AddMongoInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddMongoInstancesInput)
	}

	output = new(AddMongoInstancesOutput)
	err = client.CallMethod("AddMongoInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) RemoveMongoInstances(input *RemoveMongoInstancesInput) (output *RemoveMongoInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RemoveMongoInstancesInput)
	}

	output = new(RemoveMongoInstancesOutput)
	err = client.CallMethod("RemoveMongoInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) ModifyMongoAttributes(input *ModifyMongoAttributesInput) (output *ModifyMongoAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyMongoAttributesInput)
	}

	output = new(ModifyMongoAttributesOutput)
	err = client.CallMethod("ModifyMongoAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MongoService) ModifyMongoInstances(input *ModifyMongoInstancesInput) (output *ModifyMongoInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyMongoInstancesInput)
	}

	output = new(ModifyMongoInstancesOutput)
	err = client.CallMethod("ModifyMongoInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
