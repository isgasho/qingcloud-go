// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: volume.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

type VolumesServiceInterface interface {
	DescribeVolumes(in *DescribeVolumesInput) (out *DescribeVolumesOutput, err error)
	CreateVolumes(in *CreateVolumesInput) (out *CreateVolumesOutput, err error)
	DeleteVolumes(in *DeleteVolumesInput) (out *DeleteVolumesOutput, err error)
	AttachVolumes(in *AttachVolumesInput) (out *AttachVolumesOutput, err error)
	DetachVolumes(in *DetachVolumesInput) (out *DetachVolumesOutput, err error)
	ResizeVolumes(in *ResizeVolumesInput) (out *ResizeVolumesOutput, err error)
	ModifyVolumeAttributes(in *ModifyVolumeAttributesInput) (out *ModifyVolumeAttributesOutput, err error)
}

type VolumesService struct {
	ServerInfo *ServerInfo
}

func NewVolumesService(server *ServerInfo) (p *VolumesService) {
	return &VolumesService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeVolumes"] = ServiceApiSpec{
		ServiceName:    "VolumesService",
		ActionName:     "DescribeVolumes",
		InputTypeName:  "DescribeVolumesInput",
		OutputTypeName: "DescribeVolumesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VolumesService)(nil)),
		InputType:   reflect.TypeOf((*DescribeVolumesInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeVolumesOutput)(nil)),
	}
	ServiceApiSpecMap["CreateVolumes"] = ServiceApiSpec{
		ServiceName:    "VolumesService",
		ActionName:     "CreateVolumes",
		InputTypeName:  "CreateVolumesInput",
		OutputTypeName: "CreateVolumesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VolumesService)(nil)),
		InputType:   reflect.TypeOf((*CreateVolumesInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateVolumesOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteVolumes"] = ServiceApiSpec{
		ServiceName:    "VolumesService",
		ActionName:     "DeleteVolumes",
		InputTypeName:  "DeleteVolumesInput",
		OutputTypeName: "DeleteVolumesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VolumesService)(nil)),
		InputType:   reflect.TypeOf((*DeleteVolumesInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteVolumesOutput)(nil)),
	}
	ServiceApiSpecMap["AttachVolumes"] = ServiceApiSpec{
		ServiceName:    "VolumesService",
		ActionName:     "AttachVolumes",
		InputTypeName:  "AttachVolumesInput",
		OutputTypeName: "AttachVolumesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VolumesService)(nil)),
		InputType:   reflect.TypeOf((*AttachVolumesInput)(nil)),
		OutputType:  reflect.TypeOf((*AttachVolumesOutput)(nil)),
	}
	ServiceApiSpecMap["DetachVolumes"] = ServiceApiSpec{
		ServiceName:    "VolumesService",
		ActionName:     "DetachVolumes",
		InputTypeName:  "DetachVolumesInput",
		OutputTypeName: "DetachVolumesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VolumesService)(nil)),
		InputType:   reflect.TypeOf((*DetachVolumesInput)(nil)),
		OutputType:  reflect.TypeOf((*DetachVolumesOutput)(nil)),
	}
	ServiceApiSpecMap["ResizeVolumes"] = ServiceApiSpec{
		ServiceName:    "VolumesService",
		ActionName:     "ResizeVolumes",
		InputTypeName:  "ResizeVolumesInput",
		OutputTypeName: "ResizeVolumesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VolumesService)(nil)),
		InputType:   reflect.TypeOf((*ResizeVolumesInput)(nil)),
		OutputType:  reflect.TypeOf((*ResizeVolumesOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyVolumeAttributes"] = ServiceApiSpec{
		ServiceName:    "VolumesService",
		ActionName:     "ModifyVolumeAttributes",
		InputTypeName:  "ModifyVolumeAttributesInput",
		OutputTypeName: "ModifyVolumeAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*VolumesService)(nil)),
		InputType:   reflect.TypeOf((*ModifyVolumeAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyVolumeAttributesOutput)(nil)),
	}
}

func (p *VolumesService) DescribeVolumes(input *DescribeVolumesInput) (output *DescribeVolumesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeVolumesInput)
	}

	output = new(DescribeVolumesOutput)
	err = client.CallMethod("DescribeVolumes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VolumesService) CreateVolumes(input *CreateVolumesInput) (output *CreateVolumesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateVolumesInput)
	}

	output = new(CreateVolumesOutput)
	err = client.CallMethod("CreateVolumes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VolumesService) DeleteVolumes(input *DeleteVolumesInput) (output *DeleteVolumesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteVolumesInput)
	}

	output = new(DeleteVolumesOutput)
	err = client.CallMethod("DeleteVolumes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VolumesService) AttachVolumes(input *AttachVolumesInput) (output *AttachVolumesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AttachVolumesInput)
	}

	output = new(AttachVolumesOutput)
	err = client.CallMethod("AttachVolumes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VolumesService) DetachVolumes(input *DetachVolumesInput) (output *DetachVolumesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DetachVolumesInput)
	}

	output = new(DetachVolumesOutput)
	err = client.CallMethod("DetachVolumes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VolumesService) ResizeVolumes(input *ResizeVolumesInput) (output *ResizeVolumesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ResizeVolumesInput)
	}

	output = new(ResizeVolumesOutput)
	err = client.CallMethod("ResizeVolumes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *VolumesService) ModifyVolumeAttributes(input *ModifyVolumeAttributesInput) (output *ModifyVolumeAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyVolumeAttributesInput)
	}

	output = new(ModifyVolumeAttributesOutput)
	err = client.CallMethod("ModifyVolumeAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
