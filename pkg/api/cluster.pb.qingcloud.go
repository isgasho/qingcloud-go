// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: cluster.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

type ClusterServiceInterface interface {
	CreateCluster(in *CreateClusterInput) (out *CreateClusterOutput, err error)
	DescribeClusters(in *DescribeClustersInput) (out *DescribeClustersOutput, err error)
	DescribeClusterNodes(in *DescribeClusterNodesInput) (out *DescribeClusterNodesOutput, err error)
	StopClusters(in *StopClustersInput) (out *StopClustersOutput, err error)
	StartClusters(in *StartClustersInput) (out *StartClustersOutput, err error)
	DeleteClusters(in *DeleteClustersInput) (out *DeleteClustersOutput, err error)
	Lease(in *LeaseInput) (out *LeaseOutput, err error)
	AddClusterNodes(in *AddClusterNodesInput) (out *AddClusterNodesOutput, err error)
	DeleteClusterNodes(in *DeleteClusterNodesInput) (out *DeleteClusterNodesOutput, err error)
	ResizeCluster(in *ResizeClusterInput) (out *ResizeClusterOutput, err error)
	ChangeClusterVxnet(in *ChangeClusterVxnetInput) (out *ChangeClusterVxnetOutput, err error)
	SuspendClusters(in *SuspendClustersInput) (out *SuspendClustersOutput, err error)
	UpdateClusterEnvironment(in *UpdateClusterEnvironmentInput) (out *UpdateClusterEnvironmentOutput, err error)
	ModifyClusterAttributes(in *ModifyClusterAttributesInput) (out *ModifyClusterAttributesOutput, err error)
	ModifyClusterNodeAttributes(in *ModifyClusterNodeAttributesInput) (out *ModifyClusterNodeAttributesOutput, err error)
	GetClustersStats(in *GetClustersStatsInput) (out *GetClustersStatsOutput, err error)
	DescribeClusterUsers(in *DescribeClusterUsersInput) (out *DescribeClusterUsersOutput, err error)
	RestartClusterService(in *RestartClusterServiceInput) (out *RestartClusterServiceOutput, err error)
	UpgradeClusters(in *UpgradeClustersInput) (out *UpgradeClustersOutput, err error)
	AuthorizeClustersBrokerToDeveloper(in *AuthorizeClustersBrokerToDeveloperInput) (out *AuthorizeClustersBrokerToDeveloperOutput, err error)
	RevokeClustersBrokerFromDeveloper(in *RevokeClustersBrokerFromDeveloperInput) (out *RevokeClustersBrokerFromDeveloperOutput, err error)
}

type ClusterService struct {
	ServerInfo *ServerInfo
}

func NewClusterService(server *ServerInfo) (p *ClusterService) {
	return &ClusterService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["CreateCluster"] = ServiceApiSpec{
		ActionName: "CreateCluster",
		InputType:  reflect.TypeOf((*CreateClusterInput)(nil)),
		OutputType: reflect.TypeOf((*CreateClusterOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeClusters"] = ServiceApiSpec{
		ActionName: "DescribeClusters",
		InputType:  reflect.TypeOf((*DescribeClustersInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeClustersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeClusterNodes"] = ServiceApiSpec{
		ActionName: "DescribeClusterNodes",
		InputType:  reflect.TypeOf((*DescribeClusterNodesInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeClusterNodesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["StopClusters"] = ServiceApiSpec{
		ActionName: "StopClusters",
		InputType:  reflect.TypeOf((*StopClustersInput)(nil)),
		OutputType: reflect.TypeOf((*StopClustersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["StartClusters"] = ServiceApiSpec{
		ActionName: "StartClusters",
		InputType:  reflect.TypeOf((*StartClustersInput)(nil)),
		OutputType: reflect.TypeOf((*StartClustersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteClusters"] = ServiceApiSpec{
		ActionName: "DeleteClusters",
		InputType:  reflect.TypeOf((*DeleteClustersInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteClustersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["Lease"] = ServiceApiSpec{
		ActionName: "Lease",
		InputType:  reflect.TypeOf((*LeaseInput)(nil)),
		OutputType: reflect.TypeOf((*LeaseOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AddClusterNodes"] = ServiceApiSpec{
		ActionName: "AddClusterNodes",
		InputType:  reflect.TypeOf((*AddClusterNodesInput)(nil)),
		OutputType: reflect.TypeOf((*AddClusterNodesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteClusterNodes"] = ServiceApiSpec{
		ActionName: "DeleteClusterNodes",
		InputType:  reflect.TypeOf((*DeleteClusterNodesInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteClusterNodesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ResizeCluster"] = ServiceApiSpec{
		ActionName: "ResizeCluster",
		InputType:  reflect.TypeOf((*ResizeClusterInput)(nil)),
		OutputType: reflect.TypeOf((*ResizeClusterOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ChangeClusterVxnet"] = ServiceApiSpec{
		ActionName: "ChangeClusterVxnet",
		InputType:  reflect.TypeOf((*ChangeClusterVxnetInput)(nil)),
		OutputType: reflect.TypeOf((*ChangeClusterVxnetOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["SuspendClusters"] = ServiceApiSpec{
		ActionName: "SuspendClusters",
		InputType:  reflect.TypeOf((*SuspendClustersInput)(nil)),
		OutputType: reflect.TypeOf((*SuspendClustersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["UpdateClusterEnvironment"] = ServiceApiSpec{
		ActionName: "UpdateClusterEnvironment",
		InputType:  reflect.TypeOf((*UpdateClusterEnvironmentInput)(nil)),
		OutputType: reflect.TypeOf((*UpdateClusterEnvironmentOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyClusterAttributes"] = ServiceApiSpec{
		ActionName: "ModifyClusterAttributes",
		InputType:  reflect.TypeOf((*ModifyClusterAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyClusterAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyClusterNodeAttributes"] = ServiceApiSpec{
		ActionName: "ModifyClusterNodeAttributes",
		InputType:  reflect.TypeOf((*ModifyClusterNodeAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyClusterNodeAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["GetClustersStats"] = ServiceApiSpec{
		ActionName: "GetClustersStats",
		InputType:  reflect.TypeOf((*GetClustersStatsInput)(nil)),
		OutputType: reflect.TypeOf((*GetClustersStatsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeClusterUsers"] = ServiceApiSpec{
		ActionName: "DescribeClusterUsers",
		InputType:  reflect.TypeOf((*DescribeClusterUsersInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeClusterUsersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["RestartClusterService"] = ServiceApiSpec{
		ActionName: "RestartClusterService",
		InputType:  reflect.TypeOf((*RestartClusterServiceInput)(nil)),
		OutputType: reflect.TypeOf((*RestartClusterServiceOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["UpgradeClusters"] = ServiceApiSpec{
		ActionName: "UpgradeClusters",
		InputType:  reflect.TypeOf((*UpgradeClustersInput)(nil)),
		OutputType: reflect.TypeOf((*UpgradeClustersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AuthorizeClustersBrokerToDeveloper"] = ServiceApiSpec{
		ActionName: "AuthorizeClustersBrokerToDeveloper",
		InputType:  reflect.TypeOf((*AuthorizeClustersBrokerToDeveloperInput)(nil)),
		OutputType: reflect.TypeOf((*AuthorizeClustersBrokerToDeveloperOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["RevokeClustersBrokerFromDeveloper"] = ServiceApiSpec{
		ActionName: "RevokeClustersBrokerFromDeveloper",
		InputType:  reflect.TypeOf((*RevokeClustersBrokerFromDeveloperInput)(nil)),
		OutputType: reflect.TypeOf((*RevokeClustersBrokerFromDeveloperOutput)(nil)),
		HttpMethod: "GET",
	}
}

func (p *ClusterService) CreateCluster(input *CreateClusterInput) (output *CreateClusterOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateClusterInput)
	}

	output = new(CreateClusterOutput)
	err = client.CallMethod("CreateCluster", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) DescribeClusters(input *DescribeClustersInput) (output *DescribeClustersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeClustersInput)
	}

	output = new(DescribeClustersOutput)
	err = client.CallMethod("DescribeClusters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) DescribeClusterNodes(input *DescribeClusterNodesInput) (output *DescribeClusterNodesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeClusterNodesInput)
	}

	output = new(DescribeClusterNodesOutput)
	err = client.CallMethod("DescribeClusterNodes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) StopClusters(input *StopClustersInput) (output *StopClustersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StopClustersInput)
	}

	output = new(StopClustersOutput)
	err = client.CallMethod("StopClusters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) StartClusters(input *StartClustersInput) (output *StartClustersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StartClustersInput)
	}

	output = new(StartClustersOutput)
	err = client.CallMethod("StartClusters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) DeleteClusters(input *DeleteClustersInput) (output *DeleteClustersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteClustersInput)
	}

	output = new(DeleteClustersOutput)
	err = client.CallMethod("DeleteClusters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) Lease(input *LeaseInput) (output *LeaseOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(LeaseInput)
	}

	output = new(LeaseOutput)
	err = client.CallMethod("Lease", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) AddClusterNodes(input *AddClusterNodesInput) (output *AddClusterNodesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddClusterNodesInput)
	}

	output = new(AddClusterNodesOutput)
	err = client.CallMethod("AddClusterNodes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) DeleteClusterNodes(input *DeleteClusterNodesInput) (output *DeleteClusterNodesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteClusterNodesInput)
	}

	output = new(DeleteClusterNodesOutput)
	err = client.CallMethod("DeleteClusterNodes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) ResizeCluster(input *ResizeClusterInput) (output *ResizeClusterOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ResizeClusterInput)
	}

	output = new(ResizeClusterOutput)
	err = client.CallMethod("ResizeCluster", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) ChangeClusterVxnet(input *ChangeClusterVxnetInput) (output *ChangeClusterVxnetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ChangeClusterVxnetInput)
	}

	output = new(ChangeClusterVxnetOutput)
	err = client.CallMethod("ChangeClusterVxnet", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) SuspendClusters(input *SuspendClustersInput) (output *SuspendClustersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(SuspendClustersInput)
	}

	output = new(SuspendClustersOutput)
	err = client.CallMethod("SuspendClusters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) UpdateClusterEnvironment(input *UpdateClusterEnvironmentInput) (output *UpdateClusterEnvironmentOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(UpdateClusterEnvironmentInput)
	}

	output = new(UpdateClusterEnvironmentOutput)
	err = client.CallMethod("UpdateClusterEnvironment", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) ModifyClusterAttributes(input *ModifyClusterAttributesInput) (output *ModifyClusterAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyClusterAttributesInput)
	}

	output = new(ModifyClusterAttributesOutput)
	err = client.CallMethod("ModifyClusterAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) ModifyClusterNodeAttributes(input *ModifyClusterNodeAttributesInput) (output *ModifyClusterNodeAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyClusterNodeAttributesInput)
	}

	output = new(ModifyClusterNodeAttributesOutput)
	err = client.CallMethod("ModifyClusterNodeAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) GetClustersStats(input *GetClustersStatsInput) (output *GetClustersStatsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(GetClustersStatsInput)
	}

	output = new(GetClustersStatsOutput)
	err = client.CallMethod("GetClustersStats", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) DescribeClusterUsers(input *DescribeClusterUsersInput) (output *DescribeClusterUsersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeClusterUsersInput)
	}

	output = new(DescribeClusterUsersOutput)
	err = client.CallMethod("DescribeClusterUsers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) RestartClusterService(input *RestartClusterServiceInput) (output *RestartClusterServiceOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RestartClusterServiceInput)
	}

	output = new(RestartClusterServiceOutput)
	err = client.CallMethod("RestartClusterService", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) UpgradeClusters(input *UpgradeClustersInput) (output *UpgradeClustersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(UpgradeClustersInput)
	}

	output = new(UpgradeClustersOutput)
	err = client.CallMethod("UpgradeClusters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) AuthorizeClustersBrokerToDeveloper(input *AuthorizeClustersBrokerToDeveloperInput) (output *AuthorizeClustersBrokerToDeveloperOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AuthorizeClustersBrokerToDeveloperInput)
	}

	output = new(AuthorizeClustersBrokerToDeveloperOutput)
	err = client.CallMethod("AuthorizeClustersBrokerToDeveloper", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ClusterService) RevokeClustersBrokerFromDeveloper(input *RevokeClustersBrokerFromDeveloperInput) (output *RevokeClustersBrokerFromDeveloperOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RevokeClustersBrokerFromDeveloperInput)
	}

	output = new(RevokeClustersBrokerFromDeveloperOutput)
	err = client.CallMethod("RevokeClustersBrokerFromDeveloper", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
