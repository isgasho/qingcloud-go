// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: nic.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

type NicServiceInterface interface {
	CreateNics(in *CreateNicsInput) (out *CreateNicsOutput, err error)
	DescribeNics(in *DescribeNicsInput) (out *DescribeNicsOutput, err error)
	AttachNics(in *AttachNicsInput) (out *AttachNicsOutput, err error)
	DetachNics(in *DetachNicsInput) (out *DetachNicsOutput, err error)
	ModifyNicAttributes(in *ModifyNicAttributesInput) (out *ModifyNicAttributesOutput, err error)
	DeleteNics(in *DeleteNicsInput) (out *DeleteNicsOutput, err error)
}

type NicService struct {
	ServerInfo *ServerInfo
}

func NewNicService(server *ServerInfo) (p *NicService) {
	return &NicService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["CreateNics"] = ServiceApiSpec{
		ServiceName:    "NicService",
		ActionName:     "CreateNics",
		InputTypeName:  "CreateNicsInput",
		OutputTypeName: "CreateNicsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*NicService)(nil)),
		InputType:   reflect.TypeOf((*CreateNicsInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateNicsOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeNics"] = ServiceApiSpec{
		ServiceName:    "NicService",
		ActionName:     "DescribeNics",
		InputTypeName:  "DescribeNicsInput",
		OutputTypeName: "DescribeNicsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*NicService)(nil)),
		InputType:   reflect.TypeOf((*DescribeNicsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeNicsOutput)(nil)),
	}
	ServiceApiSpecMap["AttachNics"] = ServiceApiSpec{
		ServiceName:    "NicService",
		ActionName:     "AttachNics",
		InputTypeName:  "AttachNicsInput",
		OutputTypeName: "AttachNicsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*NicService)(nil)),
		InputType:   reflect.TypeOf((*AttachNicsInput)(nil)),
		OutputType:  reflect.TypeOf((*AttachNicsOutput)(nil)),
	}
	ServiceApiSpecMap["DetachNics"] = ServiceApiSpec{
		ServiceName:    "NicService",
		ActionName:     "DetachNics",
		InputTypeName:  "DetachNicsInput",
		OutputTypeName: "DetachNicsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*NicService)(nil)),
		InputType:   reflect.TypeOf((*DetachNicsInput)(nil)),
		OutputType:  reflect.TypeOf((*DetachNicsOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyNicAttributes"] = ServiceApiSpec{
		ServiceName:    "NicService",
		ActionName:     "ModifyNicAttributes",
		InputTypeName:  "ModifyNicAttributesInput",
		OutputTypeName: "ModifyNicAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*NicService)(nil)),
		InputType:   reflect.TypeOf((*ModifyNicAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyNicAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteNics"] = ServiceApiSpec{
		ServiceName:    "NicService",
		ActionName:     "DeleteNics",
		InputTypeName:  "DeleteNicsInput",
		OutputTypeName: "DeleteNicsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*NicService)(nil)),
		InputType:   reflect.TypeOf((*DeleteNicsInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteNicsOutput)(nil)),
	}
}

func (p *NicService) CreateNics(input *CreateNicsInput) (output *CreateNicsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateNicsInput)
	}

	output = new(CreateNicsOutput)
	err = client.CallMethod("CreateNics", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *NicService) DescribeNics(input *DescribeNicsInput) (output *DescribeNicsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeNicsInput)
	}

	output = new(DescribeNicsOutput)
	err = client.CallMethod("DescribeNics", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *NicService) AttachNics(input *AttachNicsInput) (output *AttachNicsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AttachNicsInput)
	}

	output = new(AttachNicsOutput)
	err = client.CallMethod("AttachNics", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *NicService) DetachNics(input *DetachNicsInput) (output *DetachNicsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DetachNicsInput)
	}

	output = new(DetachNicsOutput)
	err = client.CallMethod("DetachNics", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *NicService) ModifyNicAttributes(input *ModifyNicAttributesInput) (output *ModifyNicAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyNicAttributesInput)
	}

	output = new(ModifyNicAttributesOutput)
	err = client.CallMethod("ModifyNicAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *NicService) DeleteNics(input *DeleteNicsInput) (output *DeleteNicsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteNicsInput)
	}

	output = new(DeleteNicsOutput)
	err = client.CallMethod("DeleteNics", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
