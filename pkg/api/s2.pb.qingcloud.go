// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: s2.proto

package service

import proto "github.com/golang/protobuf/proto"
import "fmt"

import "github.com/chai2010/qingcloud-go/pkg/client"
import "github.com/chai2010/qingcloud-go/pkg/config"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = proto.Marshal

var _ = config.Config{}
var _ = client.NewClient

type S2ServiceInterface interface {
	CreateS2Server(in *CreateS2ServerInput) (out *CreateS2ServerOutput, err error)
	DescribeS2Servers(in *DescribeS2ServersInput) (out *DescribeS2ServersOutput, err error)
	ModifyS2Server(in *ModifyS2ServerInput) (out *ModifyS2ServerOutput, err error)
	ResizeS2Servers(in *ResizeS2ServersInput) (out *ResizeS2ServersOutput, err error)
	DeleteS2Servers(in *DeleteS2ServersInput) (out *DeleteS2ServersOutput, err error)
	PowerOnS2Servers(in *PowerOnS2ServersInput) (out *PowerOnS2ServersOutput, err error)
	PowerOffS2Servers(in *PowerOffS2ServersInput) (out *PowerOffS2ServersOutput, err error)
	UpdateS2Servers(in *UpdateS2ServersInput) (out *UpdateS2ServersOutput, err error)
	ChangeS2ServerVxnet(in *ChangeS2ServerVxnetInput) (out *ChangeS2ServerVxnetOutput, err error)
	CreateS2SharedTarget(in *CreateS2SharedTargetInput) (out *CreateS2SharedTargetOutput, err error)
	DescribeS2SharedTargets(in *DescribeS2SharedTargetsInput) (out *DescribeS2SharedTargetsOutput, err error)
	DeleteS2SharedTargets(in *DeleteS2SharedTargetsInput) (out *DeleteS2SharedTargetsOutput, err error)
	EnableS2SharedTargets(in *EnableS2SharedTargetsInput) (out *EnableS2SharedTargetsOutput, err error)
	DisableS2SharedTargets(in *DisableS2SharedTargetsInput) (out *DisableS2SharedTargetsOutput, err error)
	ModifyS2SharedTargetAttributes(in *ModifyS2SharedTargetAttributesInput) (out *ModifyS2SharedTargetAttributesOutput, err error)
	AttachToS2SharedTarget(in *AttachToS2SharedTargetInput) (out *AttachToS2SharedTargetOutput, err error)
	DetachFromS2SharedTarget(in *DetachFromS2SharedTargetInput) (out *DetachFromS2SharedTargetOutput, err error)
	DescribeS2DefaultParameters(in *DescribeS2DefaultParametersInput) (out *DescribeS2DefaultParametersOutput, err error)
	CreateS2Group(in *CreateS2GroupInput) (out *CreateS2GroupOutput, err error)
	DescribeS2Groups(in *DescribeS2GroupsInput) (out *DescribeS2GroupsOutput, err error)
	ModifyS2Group(in *ModifyS2GroupInput) (out *ModifyS2GroupOutput, err error)
	DeleteS2Groups(in *DeleteS2GroupsInput) (out *DeleteS2GroupsOutput, err error)
	CreateS2Account(in *CreateS2AccountInput) (out *CreateS2AccountOutput, err error)
	DescribeS2Accounts(in *DescribeS2AccountsInput) (out *DescribeS2AccountsOutput, err error)
	ModifyS2Account(in *ModifyS2AccountInput) (out *ModifyS2AccountOutput, err error)
	DeleteS2Accounts(in *DeleteS2AccountsInput) (out *DeleteS2AccountsOutput, err error)
	AssociateS2AccountGroup(in *AssociateS2AccountGroupInput) (out *AssociateS2AccountGroupOutput, err error)
	DissociateS2AccountGroup(in *DissociateS2AccountGroupInput) (out *DissociateS2AccountGroupOutput, err error)
}

type S2Service struct {
	Config           *config.Config
	Properties       *S2ServiceProperties
	LastResponseBody string
}

func NewS2Service(conf *config.Config, zone string) (p *S2Service) {
	return &S2Service{
		Config:     conf,
		Properties: &S2ServiceProperties{Zone: proto.String(zone)},
	}
}

func (p *S2Service) CreateS2Server(input *CreateS2ServerInput) (output *CreateS2ServerOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(CreateS2ServerOutput)

	err = client.CallMethod(nil, "CreateS2Server", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DescribeS2Servers(input *DescribeS2ServersInput) (output *DescribeS2ServersOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DescribeS2ServersOutput)

	err = client.CallMethod(nil, "DescribeS2Servers", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ModifyS2Server(input *ModifyS2ServerInput) (output *ModifyS2ServerOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(ModifyS2ServerOutput)

	err = client.CallMethod(nil, "ModifyS2Server", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ResizeS2Servers(input *ResizeS2ServersInput) (output *ResizeS2ServersOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(ResizeS2ServersOutput)

	err = client.CallMethod(nil, "ResizeS2Servers", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DeleteS2Servers(input *DeleteS2ServersInput) (output *DeleteS2ServersOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DeleteS2ServersOutput)

	err = client.CallMethod(nil, "DeleteS2Servers", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) PowerOnS2Servers(input *PowerOnS2ServersInput) (output *PowerOnS2ServersOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(PowerOnS2ServersOutput)

	err = client.CallMethod(nil, "PowerOnS2Servers", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) PowerOffS2Servers(input *PowerOffS2ServersInput) (output *PowerOffS2ServersOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(PowerOffS2ServersOutput)

	err = client.CallMethod(nil, "PowerOffS2Servers", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) UpdateS2Servers(input *UpdateS2ServersInput) (output *UpdateS2ServersOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(UpdateS2ServersOutput)

	err = client.CallMethod(nil, "UpdateS2Servers", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ChangeS2ServerVxnet(input *ChangeS2ServerVxnetInput) (output *ChangeS2ServerVxnetOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(ChangeS2ServerVxnetOutput)

	err = client.CallMethod(nil, "ChangeS2ServerVxnet", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) CreateS2SharedTarget(input *CreateS2SharedTargetInput) (output *CreateS2SharedTargetOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(CreateS2SharedTargetOutput)

	err = client.CallMethod(nil, "CreateS2SharedTarget", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DescribeS2SharedTargets(input *DescribeS2SharedTargetsInput) (output *DescribeS2SharedTargetsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DescribeS2SharedTargetsOutput)

	err = client.CallMethod(nil, "DescribeS2SharedTargets", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DeleteS2SharedTargets(input *DeleteS2SharedTargetsInput) (output *DeleteS2SharedTargetsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DeleteS2SharedTargetsOutput)

	err = client.CallMethod(nil, "DeleteS2SharedTargets", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) EnableS2SharedTargets(input *EnableS2SharedTargetsInput) (output *EnableS2SharedTargetsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(EnableS2SharedTargetsOutput)

	err = client.CallMethod(nil, "EnableS2SharedTargets", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DisableS2SharedTargets(input *DisableS2SharedTargetsInput) (output *DisableS2SharedTargetsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DisableS2SharedTargetsOutput)

	err = client.CallMethod(nil, "DisableS2SharedTargets", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ModifyS2SharedTargetAttributes(input *ModifyS2SharedTargetAttributesInput) (output *ModifyS2SharedTargetAttributesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(ModifyS2SharedTargetAttributesOutput)

	err = client.CallMethod(nil, "ModifyS2SharedTargetAttributes", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) AttachToS2SharedTarget(input *AttachToS2SharedTargetInput) (output *AttachToS2SharedTargetOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(AttachToS2SharedTargetOutput)

	err = client.CallMethod(nil, "AttachToS2SharedTarget", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DetachFromS2SharedTarget(input *DetachFromS2SharedTargetInput) (output *DetachFromS2SharedTargetOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DetachFromS2SharedTargetOutput)

	err = client.CallMethod(nil, "DetachFromS2SharedTarget", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DescribeS2DefaultParameters(input *DescribeS2DefaultParametersInput) (output *DescribeS2DefaultParametersOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DescribeS2DefaultParametersOutput)

	err = client.CallMethod(nil, "DescribeS2DefaultParameters", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) CreateS2Group(input *CreateS2GroupInput) (output *CreateS2GroupOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(CreateS2GroupOutput)

	err = client.CallMethod(nil, "CreateS2Group", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DescribeS2Groups(input *DescribeS2GroupsInput) (output *DescribeS2GroupsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DescribeS2GroupsOutput)

	err = client.CallMethod(nil, "DescribeS2Groups", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ModifyS2Group(input *ModifyS2GroupInput) (output *ModifyS2GroupOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(ModifyS2GroupOutput)

	err = client.CallMethod(nil, "ModifyS2Group", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DeleteS2Groups(input *DeleteS2GroupsInput) (output *DeleteS2GroupsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DeleteS2GroupsOutput)

	err = client.CallMethod(nil, "DeleteS2Groups", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) CreateS2Account(input *CreateS2AccountInput) (output *CreateS2AccountOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(CreateS2AccountOutput)

	err = client.CallMethod(nil, "CreateS2Account", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DescribeS2Accounts(input *DescribeS2AccountsInput) (output *DescribeS2AccountsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DescribeS2AccountsOutput)

	err = client.CallMethod(nil, "DescribeS2Accounts", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ModifyS2Account(input *ModifyS2AccountInput) (output *ModifyS2AccountOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(ModifyS2AccountOutput)

	err = client.CallMethod(nil, "ModifyS2Account", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DeleteS2Accounts(input *DeleteS2AccountsInput) (output *DeleteS2AccountsOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DeleteS2AccountsOutput)

	err = client.CallMethod(nil, "DeleteS2Accounts", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) AssociateS2AccountGroup(input *AssociateS2AccountGroupInput) (output *AssociateS2AccountGroupOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(AssociateS2AccountGroupOutput)

	err = client.CallMethod(nil, "AssociateS2AccountGroup", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DissociateS2AccountGroup(input *DissociateS2AccountGroupInput) (output *DissociateS2AccountGroupOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DissociateS2AccountGroupOutput)

	err = client.CallMethod(nil, "DissociateS2AccountGroup", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
