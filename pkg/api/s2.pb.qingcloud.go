// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: s2.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

func init() {
	TypeInfoMap["CreateS2ServerInput"] = reflect.TypeOf((*CreateS2ServerInput)(nil))
	TypeInfoMap["CreateS2ServerOutput"] = reflect.TypeOf((*CreateS2ServerOutput)(nil))
	TypeInfoMap["DescribeS2ServersInput"] = reflect.TypeOf((*DescribeS2ServersInput)(nil))
	TypeInfoMap["DescribeS2ServersOutput"] = reflect.TypeOf((*DescribeS2ServersOutput)(nil))
	TypeInfoMap["ModifyS2ServerInput"] = reflect.TypeOf((*ModifyS2ServerInput)(nil))
	TypeInfoMap["ModifyS2ServerOutput"] = reflect.TypeOf((*ModifyS2ServerOutput)(nil))
	TypeInfoMap["ResizeS2ServersInput"] = reflect.TypeOf((*ResizeS2ServersInput)(nil))
	TypeInfoMap["ResizeS2ServersOutput"] = reflect.TypeOf((*ResizeS2ServersOutput)(nil))
	TypeInfoMap["DeleteS2ServersInput"] = reflect.TypeOf((*DeleteS2ServersInput)(nil))
	TypeInfoMap["DeleteS2ServersOutput"] = reflect.TypeOf((*DeleteS2ServersOutput)(nil))
	TypeInfoMap["PowerOnS2ServersInput"] = reflect.TypeOf((*PowerOnS2ServersInput)(nil))
	TypeInfoMap["PowerOnS2ServersOutput"] = reflect.TypeOf((*PowerOnS2ServersOutput)(nil))
	TypeInfoMap["PowerOffS2ServersInput"] = reflect.TypeOf((*PowerOffS2ServersInput)(nil))
	TypeInfoMap["PowerOffS2ServersOutput"] = reflect.TypeOf((*PowerOffS2ServersOutput)(nil))
	TypeInfoMap["UpdateS2ServersInput"] = reflect.TypeOf((*UpdateS2ServersInput)(nil))
	TypeInfoMap["UpdateS2ServersOutput"] = reflect.TypeOf((*UpdateS2ServersOutput)(nil))
	TypeInfoMap["ChangeS2ServerVxnetInput"] = reflect.TypeOf((*ChangeS2ServerVxnetInput)(nil))
	TypeInfoMap["ChangeS2ServerVxnetOutput"] = reflect.TypeOf((*ChangeS2ServerVxnetOutput)(nil))
	TypeInfoMap["CreateS2SharedTargetInput"] = reflect.TypeOf((*CreateS2SharedTargetInput)(nil))
	TypeInfoMap["CreateS2SharedTargetOutput"] = reflect.TypeOf((*CreateS2SharedTargetOutput)(nil))
	TypeInfoMap["DescribeS2SharedTargetsInput"] = reflect.TypeOf((*DescribeS2SharedTargetsInput)(nil))
	TypeInfoMap["DescribeS2SharedTargetsOutput"] = reflect.TypeOf((*DescribeS2SharedTargetsOutput)(nil))
	TypeInfoMap["DeleteS2SharedTargetsInput"] = reflect.TypeOf((*DeleteS2SharedTargetsInput)(nil))
	TypeInfoMap["DeleteS2SharedTargetsOutput"] = reflect.TypeOf((*DeleteS2SharedTargetsOutput)(nil))
	TypeInfoMap["EnableS2SharedTargetsInput"] = reflect.TypeOf((*EnableS2SharedTargetsInput)(nil))
	TypeInfoMap["EnableS2SharedTargetsOutput"] = reflect.TypeOf((*EnableS2SharedTargetsOutput)(nil))
	TypeInfoMap["DisableS2SharedTargetsInput"] = reflect.TypeOf((*DisableS2SharedTargetsInput)(nil))
	TypeInfoMap["DisableS2SharedTargetsOutput"] = reflect.TypeOf((*DisableS2SharedTargetsOutput)(nil))
	TypeInfoMap["ModifyS2SharedTargetAttributesInput"] = reflect.TypeOf((*ModifyS2SharedTargetAttributesInput)(nil))
	TypeInfoMap["ModifyS2SharedTargetAttributesOutput"] = reflect.TypeOf((*ModifyS2SharedTargetAttributesOutput)(nil))
	TypeInfoMap["AttachToS2SharedTargetInput"] = reflect.TypeOf((*AttachToS2SharedTargetInput)(nil))
	TypeInfoMap["AttachToS2SharedTargetOutput"] = reflect.TypeOf((*AttachToS2SharedTargetOutput)(nil))
	TypeInfoMap["DetachFromS2SharedTargetInput"] = reflect.TypeOf((*DetachFromS2SharedTargetInput)(nil))
	TypeInfoMap["DetachFromS2SharedTargetOutput"] = reflect.TypeOf((*DetachFromS2SharedTargetOutput)(nil))
	TypeInfoMap["DescribeS2DefaultParametersInput"] = reflect.TypeOf((*DescribeS2DefaultParametersInput)(nil))
	TypeInfoMap["DescribeS2DefaultParametersOutput"] = reflect.TypeOf((*DescribeS2DefaultParametersOutput)(nil))
	TypeInfoMap["CreateS2GroupInput"] = reflect.TypeOf((*CreateS2GroupInput)(nil))
	TypeInfoMap["CreateS2GroupOutput"] = reflect.TypeOf((*CreateS2GroupOutput)(nil))
	TypeInfoMap["DescribeS2GroupsInput"] = reflect.TypeOf((*DescribeS2GroupsInput)(nil))
	TypeInfoMap["DescribeS2GroupsOutput"] = reflect.TypeOf((*DescribeS2GroupsOutput)(nil))
	TypeInfoMap["ModifyS2GroupInput"] = reflect.TypeOf((*ModifyS2GroupInput)(nil))
	TypeInfoMap["ModifyS2GroupOutput"] = reflect.TypeOf((*ModifyS2GroupOutput)(nil))
	TypeInfoMap["DeleteS2GroupsInput"] = reflect.TypeOf((*DeleteS2GroupsInput)(nil))
	TypeInfoMap["DeleteS2GroupsOutput"] = reflect.TypeOf((*DeleteS2GroupsOutput)(nil))
	TypeInfoMap["CreateS2AccountInput"] = reflect.TypeOf((*CreateS2AccountInput)(nil))
	TypeInfoMap["CreateS2AccountOutput"] = reflect.TypeOf((*CreateS2AccountOutput)(nil))
	TypeInfoMap["DescribeS2AccountsInput"] = reflect.TypeOf((*DescribeS2AccountsInput)(nil))
	TypeInfoMap["DescribeS2AccountsOutput"] = reflect.TypeOf((*DescribeS2AccountsOutput)(nil))
	TypeInfoMap["ModifyS2AccountInput"] = reflect.TypeOf((*ModifyS2AccountInput)(nil))
	TypeInfoMap["ModifyS2AccountOutput"] = reflect.TypeOf((*ModifyS2AccountOutput)(nil))
	TypeInfoMap["DeleteS2AccountsInput"] = reflect.TypeOf((*DeleteS2AccountsInput)(nil))
	TypeInfoMap["DeleteS2AccountsOutput"] = reflect.TypeOf((*DeleteS2AccountsOutput)(nil))
	TypeInfoMap["AssociateS2AccountGroupInput"] = reflect.TypeOf((*AssociateS2AccountGroupInput)(nil))
	TypeInfoMap["AssociateS2AccountGroupOutput"] = reflect.TypeOf((*AssociateS2AccountGroupOutput)(nil))
	TypeInfoMap["DissociateS2AccountGroupInput"] = reflect.TypeOf((*DissociateS2AccountGroupInput)(nil))
	TypeInfoMap["DissociateS2AccountGroupOutput"] = reflect.TypeOf((*DissociateS2AccountGroupOutput)(nil))
}

type S2ServiceInterface interface {
	CreateS2Server(in *CreateS2ServerInput) (out *CreateS2ServerOutput, err error)
	DescribeS2Servers(in *DescribeS2ServersInput) (out *DescribeS2ServersOutput, err error)
	ModifyS2Server(in *ModifyS2ServerInput) (out *ModifyS2ServerOutput, err error)
	ResizeS2Servers(in *ResizeS2ServersInput) (out *ResizeS2ServersOutput, err error)
	DeleteS2Servers(in *DeleteS2ServersInput) (out *DeleteS2ServersOutput, err error)
	PowerOnS2Servers(in *PowerOnS2ServersInput) (out *PowerOnS2ServersOutput, err error)
	PowerOffS2Servers(in *PowerOffS2ServersInput) (out *PowerOffS2ServersOutput, err error)
	UpdateS2Servers(in *UpdateS2ServersInput) (out *UpdateS2ServersOutput, err error)
	ChangeS2ServerVxnet(in *ChangeS2ServerVxnetInput) (out *ChangeS2ServerVxnetOutput, err error)
	CreateS2SharedTarget(in *CreateS2SharedTargetInput) (out *CreateS2SharedTargetOutput, err error)
	DescribeS2SharedTargets(in *DescribeS2SharedTargetsInput) (out *DescribeS2SharedTargetsOutput, err error)
	DeleteS2SharedTargets(in *DeleteS2SharedTargetsInput) (out *DeleteS2SharedTargetsOutput, err error)
	EnableS2SharedTargets(in *EnableS2SharedTargetsInput) (out *EnableS2SharedTargetsOutput, err error)
	DisableS2SharedTargets(in *DisableS2SharedTargetsInput) (out *DisableS2SharedTargetsOutput, err error)
	ModifyS2SharedTargetAttributes(in *ModifyS2SharedTargetAttributesInput) (out *ModifyS2SharedTargetAttributesOutput, err error)
	AttachToS2SharedTarget(in *AttachToS2SharedTargetInput) (out *AttachToS2SharedTargetOutput, err error)
	DetachFromS2SharedTarget(in *DetachFromS2SharedTargetInput) (out *DetachFromS2SharedTargetOutput, err error)
	DescribeS2DefaultParameters(in *DescribeS2DefaultParametersInput) (out *DescribeS2DefaultParametersOutput, err error)
	CreateS2Group(in *CreateS2GroupInput) (out *CreateS2GroupOutput, err error)
	DescribeS2Groups(in *DescribeS2GroupsInput) (out *DescribeS2GroupsOutput, err error)
	ModifyS2Group(in *ModifyS2GroupInput) (out *ModifyS2GroupOutput, err error)
	DeleteS2Groups(in *DeleteS2GroupsInput) (out *DeleteS2GroupsOutput, err error)
	CreateS2Account(in *CreateS2AccountInput) (out *CreateS2AccountOutput, err error)
	DescribeS2Accounts(in *DescribeS2AccountsInput) (out *DescribeS2AccountsOutput, err error)
	ModifyS2Account(in *ModifyS2AccountInput) (out *ModifyS2AccountOutput, err error)
	DeleteS2Accounts(in *DeleteS2AccountsInput) (out *DeleteS2AccountsOutput, err error)
	AssociateS2AccountGroup(in *AssociateS2AccountGroupInput) (out *AssociateS2AccountGroupOutput, err error)
	DissociateS2AccountGroup(in *DissociateS2AccountGroupInput) (out *DissociateS2AccountGroupOutput, err error)
}

type S2Service struct {
	ServerInfo *ServerInfo
}

func NewS2Service(server *ServerInfo) (p *S2Service) {
	return &S2Service{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["CreateS2Server"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "CreateS2Server",
		InputTypeName:  "CreateS2ServerInput",
		OutputTypeName: "CreateS2ServerOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*CreateS2ServerInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateS2ServerOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeS2Servers"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DescribeS2Servers",
		InputTypeName:  "DescribeS2ServersInput",
		OutputTypeName: "DescribeS2ServersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DescribeS2ServersInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeS2ServersOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyS2Server"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "ModifyS2Server",
		InputTypeName:  "ModifyS2ServerInput",
		OutputTypeName: "ModifyS2ServerOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*ModifyS2ServerInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyS2ServerOutput)(nil)),
	}
	ServiceApiSpecMap["ResizeS2Servers"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "ResizeS2Servers",
		InputTypeName:  "ResizeS2ServersInput",
		OutputTypeName: "ResizeS2ServersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*ResizeS2ServersInput)(nil)),
		OutputType:  reflect.TypeOf((*ResizeS2ServersOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteS2Servers"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DeleteS2Servers",
		InputTypeName:  "DeleteS2ServersInput",
		OutputTypeName: "DeleteS2ServersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DeleteS2ServersInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteS2ServersOutput)(nil)),
	}
	ServiceApiSpecMap["PowerOnS2Servers"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "PowerOnS2Servers",
		InputTypeName:  "PowerOnS2ServersInput",
		OutputTypeName: "PowerOnS2ServersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*PowerOnS2ServersInput)(nil)),
		OutputType:  reflect.TypeOf((*PowerOnS2ServersOutput)(nil)),
	}
	ServiceApiSpecMap["PowerOffS2Servers"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "PowerOffS2Servers",
		InputTypeName:  "PowerOffS2ServersInput",
		OutputTypeName: "PowerOffS2ServersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*PowerOffS2ServersInput)(nil)),
		OutputType:  reflect.TypeOf((*PowerOffS2ServersOutput)(nil)),
	}
	ServiceApiSpecMap["UpdateS2Servers"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "UpdateS2Servers",
		InputTypeName:  "UpdateS2ServersInput",
		OutputTypeName: "UpdateS2ServersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*UpdateS2ServersInput)(nil)),
		OutputType:  reflect.TypeOf((*UpdateS2ServersOutput)(nil)),
	}
	ServiceApiSpecMap["ChangeS2ServerVxnet"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "ChangeS2ServerVxnet",
		InputTypeName:  "ChangeS2ServerVxnetInput",
		OutputTypeName: "ChangeS2ServerVxnetOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*ChangeS2ServerVxnetInput)(nil)),
		OutputType:  reflect.TypeOf((*ChangeS2ServerVxnetOutput)(nil)),
	}
	ServiceApiSpecMap["CreateS2SharedTarget"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "CreateS2SharedTarget",
		InputTypeName:  "CreateS2SharedTargetInput",
		OutputTypeName: "CreateS2SharedTargetOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*CreateS2SharedTargetInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateS2SharedTargetOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeS2SharedTargets"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DescribeS2SharedTargets",
		InputTypeName:  "DescribeS2SharedTargetsInput",
		OutputTypeName: "DescribeS2SharedTargetsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DescribeS2SharedTargetsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeS2SharedTargetsOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteS2SharedTargets"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DeleteS2SharedTargets",
		InputTypeName:  "DeleteS2SharedTargetsInput",
		OutputTypeName: "DeleteS2SharedTargetsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DeleteS2SharedTargetsInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteS2SharedTargetsOutput)(nil)),
	}
	ServiceApiSpecMap["EnableS2SharedTargets"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "EnableS2SharedTargets",
		InputTypeName:  "EnableS2SharedTargetsInput",
		OutputTypeName: "EnableS2SharedTargetsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*EnableS2SharedTargetsInput)(nil)),
		OutputType:  reflect.TypeOf((*EnableS2SharedTargetsOutput)(nil)),
	}
	ServiceApiSpecMap["DisableS2SharedTargets"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DisableS2SharedTargets",
		InputTypeName:  "DisableS2SharedTargetsInput",
		OutputTypeName: "DisableS2SharedTargetsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DisableS2SharedTargetsInput)(nil)),
		OutputType:  reflect.TypeOf((*DisableS2SharedTargetsOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyS2SharedTargetAttributes"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "ModifyS2SharedTargetAttributes",
		InputTypeName:  "ModifyS2SharedTargetAttributesInput",
		OutputTypeName: "ModifyS2SharedTargetAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*ModifyS2SharedTargetAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyS2SharedTargetAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["AttachToS2SharedTarget"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "AttachToS2SharedTarget",
		InputTypeName:  "AttachToS2SharedTargetInput",
		OutputTypeName: "AttachToS2SharedTargetOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*AttachToS2SharedTargetInput)(nil)),
		OutputType:  reflect.TypeOf((*AttachToS2SharedTargetOutput)(nil)),
	}
	ServiceApiSpecMap["DetachFromS2SharedTarget"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DetachFromS2SharedTarget",
		InputTypeName:  "DetachFromS2SharedTargetInput",
		OutputTypeName: "DetachFromS2SharedTargetOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DetachFromS2SharedTargetInput)(nil)),
		OutputType:  reflect.TypeOf((*DetachFromS2SharedTargetOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeS2DefaultParameters"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DescribeS2DefaultParameters",
		InputTypeName:  "DescribeS2DefaultParametersInput",
		OutputTypeName: "DescribeS2DefaultParametersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DescribeS2DefaultParametersInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeS2DefaultParametersOutput)(nil)),
	}
	ServiceApiSpecMap["CreateS2Group"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "CreateS2Group",
		InputTypeName:  "CreateS2GroupInput",
		OutputTypeName: "CreateS2GroupOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*CreateS2GroupInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateS2GroupOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeS2Groups"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DescribeS2Groups",
		InputTypeName:  "DescribeS2GroupsInput",
		OutputTypeName: "DescribeS2GroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DescribeS2GroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeS2GroupsOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyS2Group"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "ModifyS2Group",
		InputTypeName:  "ModifyS2GroupInput",
		OutputTypeName: "ModifyS2GroupOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*ModifyS2GroupInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyS2GroupOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteS2Groups"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DeleteS2Groups",
		InputTypeName:  "DeleteS2GroupsInput",
		OutputTypeName: "DeleteS2GroupsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DeleteS2GroupsInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteS2GroupsOutput)(nil)),
	}
	ServiceApiSpecMap["CreateS2Account"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "CreateS2Account",
		InputTypeName:  "CreateS2AccountInput",
		OutputTypeName: "CreateS2AccountOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*CreateS2AccountInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateS2AccountOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeS2Accounts"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DescribeS2Accounts",
		InputTypeName:  "DescribeS2AccountsInput",
		OutputTypeName: "DescribeS2AccountsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DescribeS2AccountsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeS2AccountsOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyS2Account"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "ModifyS2Account",
		InputTypeName:  "ModifyS2AccountInput",
		OutputTypeName: "ModifyS2AccountOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*ModifyS2AccountInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyS2AccountOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteS2Accounts"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DeleteS2Accounts",
		InputTypeName:  "DeleteS2AccountsInput",
		OutputTypeName: "DeleteS2AccountsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DeleteS2AccountsInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteS2AccountsOutput)(nil)),
	}
	ServiceApiSpecMap["AssociateS2AccountGroup"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "AssociateS2AccountGroup",
		InputTypeName:  "AssociateS2AccountGroupInput",
		OutputTypeName: "AssociateS2AccountGroupOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*AssociateS2AccountGroupInput)(nil)),
		OutputType:  reflect.TypeOf((*AssociateS2AccountGroupOutput)(nil)),
	}
	ServiceApiSpecMap["DissociateS2AccountGroup"] = ServiceApiSpec{
		ServiceName:    "S2Service",
		ActionName:     "DissociateS2AccountGroup",
		InputTypeName:  "DissociateS2AccountGroupInput",
		OutputTypeName: "DissociateS2AccountGroupOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*S2Service)(nil)),
		InputType:   reflect.TypeOf((*DissociateS2AccountGroupInput)(nil)),
		OutputType:  reflect.TypeOf((*DissociateS2AccountGroupOutput)(nil)),
	}
}

func (p *S2Service) CreateS2Server(input *CreateS2ServerInput) (output *CreateS2ServerOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateS2ServerInput)
	}

	output = new(CreateS2ServerOutput)
	err = client.CallMethod("CreateS2Server", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DescribeS2Servers(input *DescribeS2ServersInput) (output *DescribeS2ServersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeS2ServersInput)
	}

	output = new(DescribeS2ServersOutput)
	err = client.CallMethod("DescribeS2Servers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ModifyS2Server(input *ModifyS2ServerInput) (output *ModifyS2ServerOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyS2ServerInput)
	}

	output = new(ModifyS2ServerOutput)
	err = client.CallMethod("ModifyS2Server", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ResizeS2Servers(input *ResizeS2ServersInput) (output *ResizeS2ServersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ResizeS2ServersInput)
	}

	output = new(ResizeS2ServersOutput)
	err = client.CallMethod("ResizeS2Servers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DeleteS2Servers(input *DeleteS2ServersInput) (output *DeleteS2ServersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteS2ServersInput)
	}

	output = new(DeleteS2ServersOutput)
	err = client.CallMethod("DeleteS2Servers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) PowerOnS2Servers(input *PowerOnS2ServersInput) (output *PowerOnS2ServersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(PowerOnS2ServersInput)
	}

	output = new(PowerOnS2ServersOutput)
	err = client.CallMethod("PowerOnS2Servers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) PowerOffS2Servers(input *PowerOffS2ServersInput) (output *PowerOffS2ServersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(PowerOffS2ServersInput)
	}

	output = new(PowerOffS2ServersOutput)
	err = client.CallMethod("PowerOffS2Servers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) UpdateS2Servers(input *UpdateS2ServersInput) (output *UpdateS2ServersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(UpdateS2ServersInput)
	}

	output = new(UpdateS2ServersOutput)
	err = client.CallMethod("UpdateS2Servers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ChangeS2ServerVxnet(input *ChangeS2ServerVxnetInput) (output *ChangeS2ServerVxnetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ChangeS2ServerVxnetInput)
	}

	output = new(ChangeS2ServerVxnetOutput)
	err = client.CallMethod("ChangeS2ServerVxnet", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) CreateS2SharedTarget(input *CreateS2SharedTargetInput) (output *CreateS2SharedTargetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateS2SharedTargetInput)
	}

	output = new(CreateS2SharedTargetOutput)
	err = client.CallMethod("CreateS2SharedTarget", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DescribeS2SharedTargets(input *DescribeS2SharedTargetsInput) (output *DescribeS2SharedTargetsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeS2SharedTargetsInput)
	}

	output = new(DescribeS2SharedTargetsOutput)
	err = client.CallMethod("DescribeS2SharedTargets", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DeleteS2SharedTargets(input *DeleteS2SharedTargetsInput) (output *DeleteS2SharedTargetsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteS2SharedTargetsInput)
	}

	output = new(DeleteS2SharedTargetsOutput)
	err = client.CallMethod("DeleteS2SharedTargets", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) EnableS2SharedTargets(input *EnableS2SharedTargetsInput) (output *EnableS2SharedTargetsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(EnableS2SharedTargetsInput)
	}

	output = new(EnableS2SharedTargetsOutput)
	err = client.CallMethod("EnableS2SharedTargets", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DisableS2SharedTargets(input *DisableS2SharedTargetsInput) (output *DisableS2SharedTargetsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DisableS2SharedTargetsInput)
	}

	output = new(DisableS2SharedTargetsOutput)
	err = client.CallMethod("DisableS2SharedTargets", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ModifyS2SharedTargetAttributes(input *ModifyS2SharedTargetAttributesInput) (output *ModifyS2SharedTargetAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyS2SharedTargetAttributesInput)
	}

	output = new(ModifyS2SharedTargetAttributesOutput)
	err = client.CallMethod("ModifyS2SharedTargetAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) AttachToS2SharedTarget(input *AttachToS2SharedTargetInput) (output *AttachToS2SharedTargetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AttachToS2SharedTargetInput)
	}

	output = new(AttachToS2SharedTargetOutput)
	err = client.CallMethod("AttachToS2SharedTarget", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DetachFromS2SharedTarget(input *DetachFromS2SharedTargetInput) (output *DetachFromS2SharedTargetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DetachFromS2SharedTargetInput)
	}

	output = new(DetachFromS2SharedTargetOutput)
	err = client.CallMethod("DetachFromS2SharedTarget", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DescribeS2DefaultParameters(input *DescribeS2DefaultParametersInput) (output *DescribeS2DefaultParametersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeS2DefaultParametersInput)
	}

	output = new(DescribeS2DefaultParametersOutput)
	err = client.CallMethod("DescribeS2DefaultParameters", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) CreateS2Group(input *CreateS2GroupInput) (output *CreateS2GroupOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateS2GroupInput)
	}

	output = new(CreateS2GroupOutput)
	err = client.CallMethod("CreateS2Group", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DescribeS2Groups(input *DescribeS2GroupsInput) (output *DescribeS2GroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeS2GroupsInput)
	}

	output = new(DescribeS2GroupsOutput)
	err = client.CallMethod("DescribeS2Groups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ModifyS2Group(input *ModifyS2GroupInput) (output *ModifyS2GroupOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyS2GroupInput)
	}

	output = new(ModifyS2GroupOutput)
	err = client.CallMethod("ModifyS2Group", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DeleteS2Groups(input *DeleteS2GroupsInput) (output *DeleteS2GroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteS2GroupsInput)
	}

	output = new(DeleteS2GroupsOutput)
	err = client.CallMethod("DeleteS2Groups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) CreateS2Account(input *CreateS2AccountInput) (output *CreateS2AccountOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateS2AccountInput)
	}

	output = new(CreateS2AccountOutput)
	err = client.CallMethod("CreateS2Account", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DescribeS2Accounts(input *DescribeS2AccountsInput) (output *DescribeS2AccountsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeS2AccountsInput)
	}

	output = new(DescribeS2AccountsOutput)
	err = client.CallMethod("DescribeS2Accounts", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) ModifyS2Account(input *ModifyS2AccountInput) (output *ModifyS2AccountOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyS2AccountInput)
	}

	output = new(ModifyS2AccountOutput)
	err = client.CallMethod("ModifyS2Account", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DeleteS2Accounts(input *DeleteS2AccountsInput) (output *DeleteS2AccountsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteS2AccountsInput)
	}

	output = new(DeleteS2AccountsOutput)
	err = client.CallMethod("DeleteS2Accounts", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) AssociateS2AccountGroup(input *AssociateS2AccountGroupInput) (output *AssociateS2AccountGroupOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AssociateS2AccountGroupInput)
	}

	output = new(AssociateS2AccountGroupOutput)
	err = client.CallMethod("AssociateS2AccountGroup", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *S2Service) DissociateS2AccountGroup(input *DissociateS2AccountGroupInput) (output *DissociateS2AccountGroupOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DissociateS2AccountGroupInput)
	}

	output = new(DissociateS2AccountGroupOutput)
	err = client.CallMethod("DissociateS2AccountGroup", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
