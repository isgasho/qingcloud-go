// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: monitor.proto

package service

import proto "github.com/golang/protobuf/proto"
import "fmt"

import "github.com/chai2010/qingcloud-go/pkg/client"
import "github.com/chai2010/qingcloud-go/pkg/config"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = proto.Marshal

var _ = config.Config{}
var _ = client.NewClient

type MonitorServiceInterface interface {
	GetMonitor(in *GetMonitorInput) (out *GetMonitorOutput, err error)
	GetLoadBalancerMonitor(in *GetLoadBalancerMonitorInput) (out *GetLoadBalancerMonitorOutput, err error)
	GetRDBMonitor(in *GetRDBMonitorInput) (out *GetRDBMonitorOutput, err error)
	GetCacheMonitor(in *GetCacheMonitorInput) (out *GetCacheMonitorOutput, err error)
	GetZooKeeperMonitor(in *GetZooKeeperMonitorInput) (out *GetZooKeeperMonitorOutput, err error)
	GetQueueMonitor(in *GetQueueMonitorInput) (out *GetQueueMonitorOutput, err error)
}

type MonitorService struct {
	Config           *config.Config
	Properties       *MonitorServiceProperties
	LastResponseBody string
}

func NewMonitorService(conf *config.Config, zone string) (p *MonitorService) {
	return &MonitorService{
		Config:     conf,
		Properties: &MonitorServiceProperties{Zone: proto.String(zone)},
	}
}

func (p *MonitorService) GetMonitor(input *GetMonitorInput) (output *GetMonitorOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(GetMonitorOutput)

	err = client.CallMethod(nil, "GetMonitor", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MonitorService) GetLoadBalancerMonitor(input *GetLoadBalancerMonitorInput) (output *GetLoadBalancerMonitorOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(GetLoadBalancerMonitorOutput)

	err = client.CallMethod(nil, "GetLoadBalancerMonitor", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MonitorService) GetRDBMonitor(input *GetRDBMonitorInput) (output *GetRDBMonitorOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(GetRDBMonitorOutput)

	err = client.CallMethod(nil, "GetRDBMonitor", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MonitorService) GetCacheMonitor(input *GetCacheMonitorInput) (output *GetCacheMonitorOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(GetCacheMonitorOutput)

	err = client.CallMethod(nil, "GetCacheMonitor", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MonitorService) GetZooKeeperMonitor(input *GetZooKeeperMonitorInput) (output *GetZooKeeperMonitorOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(GetZooKeeperMonitorOutput)

	err = client.CallMethod(nil, "GetZooKeeperMonitor", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MonitorService) GetQueueMonitor(input *GetQueueMonitorInput) (output *GetQueueMonitorOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(GetQueueMonitorOutput)

	err = client.CallMethod(nil, "GetQueueMonitor", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
