// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: monitor.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

type MonitorServiceInterface interface {
	GetMonitor(in *GetMonitorInput) (out *GetMonitorOutput, err error)
	GetLoadBalancerMonitor(in *GetLoadBalancerMonitorInput) (out *GetLoadBalancerMonitorOutput, err error)
	GetRDBMonitor(in *GetRDBMonitorInput) (out *GetRDBMonitorOutput, err error)
	GetCacheMonitor(in *GetCacheMonitorInput) (out *GetCacheMonitorOutput, err error)
	GetZooKeeperMonitor(in *GetZooKeeperMonitorInput) (out *GetZooKeeperMonitorOutput, err error)
	GetQueueMonitor(in *GetQueueMonitorInput) (out *GetQueueMonitorOutput, err error)
}

type MonitorService struct {
	ServerInfo *ServerInfo
}

func NewMonitorService(server *ServerInfo) (p *MonitorService) {
	return &MonitorService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["GetMonitor"] = ServiceApiSpec{
		ActionName: "GetMonitor",
		InputType:  reflect.TypeOf((*GetMonitorInput)(nil)),
		OutputType: reflect.TypeOf((*GetMonitorOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["GetLoadBalancerMonitor"] = ServiceApiSpec{
		ActionName: "GetLoadBalancerMonitor",
		InputType:  reflect.TypeOf((*GetLoadBalancerMonitorInput)(nil)),
		OutputType: reflect.TypeOf((*GetLoadBalancerMonitorOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["GetRDBMonitor"] = ServiceApiSpec{
		ActionName: "GetRDBMonitor",
		InputType:  reflect.TypeOf((*GetRDBMonitorInput)(nil)),
		OutputType: reflect.TypeOf((*GetRDBMonitorOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["GetCacheMonitor"] = ServiceApiSpec{
		ActionName: "GetCacheMonitor",
		InputType:  reflect.TypeOf((*GetCacheMonitorInput)(nil)),
		OutputType: reflect.TypeOf((*GetCacheMonitorOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["GetZooKeeperMonitor"] = ServiceApiSpec{
		ActionName: "GetZooKeeperMonitor",
		InputType:  reflect.TypeOf((*GetZooKeeperMonitorInput)(nil)),
		OutputType: reflect.TypeOf((*GetZooKeeperMonitorOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["GetQueueMonitor"] = ServiceApiSpec{
		ActionName: "GetQueueMonitor",
		InputType:  reflect.TypeOf((*GetQueueMonitorInput)(nil)),
		OutputType: reflect.TypeOf((*GetQueueMonitorOutput)(nil)),
		HttpMethod: "GET",
	}
}

func (p *MonitorService) GetMonitor(input *GetMonitorInput) (output *GetMonitorOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(GetMonitorInput)
	}

	output = new(GetMonitorOutput)
	err = client.CallMethod("GetMonitor", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MonitorService) GetLoadBalancerMonitor(input *GetLoadBalancerMonitorInput) (output *GetLoadBalancerMonitorOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(GetLoadBalancerMonitorInput)
	}

	output = new(GetLoadBalancerMonitorOutput)
	err = client.CallMethod("GetLoadBalancerMonitor", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MonitorService) GetRDBMonitor(input *GetRDBMonitorInput) (output *GetRDBMonitorOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(GetRDBMonitorInput)
	}

	output = new(GetRDBMonitorOutput)
	err = client.CallMethod("GetRDBMonitor", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MonitorService) GetCacheMonitor(input *GetCacheMonitorInput) (output *GetCacheMonitorOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(GetCacheMonitorInput)
	}

	output = new(GetCacheMonitorOutput)
	err = client.CallMethod("GetCacheMonitor", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MonitorService) GetZooKeeperMonitor(input *GetZooKeeperMonitorInput) (output *GetZooKeeperMonitorOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(GetZooKeeperMonitorInput)
	}

	output = new(GetZooKeeperMonitorOutput)
	err = client.CallMethod("GetZooKeeperMonitor", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *MonitorService) GetQueueMonitor(input *GetQueueMonitorInput) (output *GetQueueMonitorOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(GetQueueMonitorInput)
	}

	output = new(GetQueueMonitorOutput)
	err = client.CallMethod("GetQueueMonitor", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
