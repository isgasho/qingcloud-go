// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: monitor.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "regexp"

import "github.com/chai2010/qingcloud-go/pkg/config"
import "github.com/chai2010/qingcloud-go/pkg/logger"
import "github.com/chai2010/qingcloud-go/pkg/request"
import "github.com/chai2010/qingcloud-go/pkg/request/data"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _ = regexp.Match
var _ = config.Config{}
var _ = logger.Info
var _ = request.Request{}
var _ = data.Operation{}

type MonitorServiceInterface interface {
	GetMonitor(in *GetMonitorInput) (out *GetMonitorOutput, err error)
	GetLoadBalancerMonitor(in *GetLoadBalancerMonitorInput) (out *GetLoadBalancerMonitorOutput, err error)
	GetRDBMonitor(in *GetRDBMonitorInput) (out *GetRDBMonitorOutput, err error)
	GetCacheMonitor(in *GetCacheMonitorInput) (out *GetCacheMonitorOutput, err error)
	GetZooKeeperMonitor(in *GetZooKeeperMonitorInput) (out *GetZooKeeperMonitorOutput, err error)
	GetQueueMonitor(in *GetQueueMonitorInput) (out *GetQueueMonitorOutput, err error)
}

type MonitorService struct {
	Config           *config.Config
	Properties       *MonitorServiceProperties
	LastResponseBody string
}

func NewMonitorService(conf *config.Config, zone string) (p *MonitorService) {
	return &MonitorService{
		Config:     conf,
		Properties: &MonitorServiceProperties{Zone: proto.String(zone)},
	}
}

func (p *MonitorService) GetMonitor(in *GetMonitorInput) (out *GetMonitorOutput, err error) {
	if in == nil {
		in = &GetMonitorInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "GetMonitor",
		RequestMethod: "GET",
	}

	x := &GetMonitorOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *MonitorService) GetLoadBalancerMonitor(in *GetLoadBalancerMonitorInput) (out *GetLoadBalancerMonitorOutput, err error) {
	if in == nil {
		in = &GetLoadBalancerMonitorInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "GetLoadBalancerMonitor",
		RequestMethod: "GET",
	}

	x := &GetLoadBalancerMonitorOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *MonitorService) GetRDBMonitor(in *GetRDBMonitorInput) (out *GetRDBMonitorOutput, err error) {
	if in == nil {
		in = &GetRDBMonitorInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "GetRDBMonitor",
		RequestMethod: "GET",
	}

	x := &GetRDBMonitorOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *MonitorService) GetCacheMonitor(in *GetCacheMonitorInput) (out *GetCacheMonitorOutput, err error) {
	if in == nil {
		in = &GetCacheMonitorInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "GetCacheMonitor",
		RequestMethod: "GET",
	}

	x := &GetCacheMonitorOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *MonitorService) GetZooKeeperMonitor(in *GetZooKeeperMonitorInput) (out *GetZooKeeperMonitorOutput, err error) {
	if in == nil {
		in = &GetZooKeeperMonitorInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "GetZooKeeperMonitor",
		RequestMethod: "GET",
	}

	x := &GetZooKeeperMonitorOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *MonitorService) GetQueueMonitor(in *GetQueueMonitorInput) (out *GetQueueMonitorOutput, err error) {
	if in == nil {
		in = &GetQueueMonitorInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "GetQueueMonitor",
		RequestMethod: "GET",
	}

	x := &GetQueueMonitorOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}
