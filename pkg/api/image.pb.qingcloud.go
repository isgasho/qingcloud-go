// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: image.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

type ImageServiceInterface interface {
	DescribeImages(in *DescribeImagesInput) (out *DescribeImagesOutput, err error)
	CaptureInstance(in *CaptureInstanceInput) (out *CaptureInstanceOutput, err error)
	DeleteImages(in *DeleteImagesInput) (out *DeleteImagesOutput, err error)
	ModifyImageAttributes(in *ModifyImageAttributesInput) (out *ModifyImageAttributesOutput, err error)
	GrantImageToUsers(in *GrantImageToUsersInput) (out *GrantImageToUsersOutput, err error)
	RevokeImageFromUsers(in *RevokeImageFromUsersInput) (out *RevokeImageFromUsersOutput, err error)
	DescribeImageUsers(in *DescribeImageUsersInput) (out *DescribeImageUsersOutput, err error)
	CloneImages(in *CloneImagesInput) (out *CloneImagesOutput, err error)
}

type ImageService struct {
	ServerInfo *ServerInfo
}

func NewImageService(server *ServerInfo) (p *ImageService) {
	return &ImageService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeImages"] = ServiceApiSpec{
		ServiceName:    "ImageService",
		ActionName:     "DescribeImages",
		InputTypeName:  "DescribeImagesInput",
		OutputTypeName: "DescribeImagesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ImageService)(nil)),
		InputType:   reflect.TypeOf((*DescribeImagesInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeImagesOutput)(nil)),
	}
	ServiceApiSpecMap["CaptureInstance"] = ServiceApiSpec{
		ServiceName:    "ImageService",
		ActionName:     "CaptureInstance",
		InputTypeName:  "CaptureInstanceInput",
		OutputTypeName: "CaptureInstanceOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ImageService)(nil)),
		InputType:   reflect.TypeOf((*CaptureInstanceInput)(nil)),
		OutputType:  reflect.TypeOf((*CaptureInstanceOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteImages"] = ServiceApiSpec{
		ServiceName:    "ImageService",
		ActionName:     "DeleteImages",
		InputTypeName:  "DeleteImagesInput",
		OutputTypeName: "DeleteImagesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ImageService)(nil)),
		InputType:   reflect.TypeOf((*DeleteImagesInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteImagesOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyImageAttributes"] = ServiceApiSpec{
		ServiceName:    "ImageService",
		ActionName:     "ModifyImageAttributes",
		InputTypeName:  "ModifyImageAttributesInput",
		OutputTypeName: "ModifyImageAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ImageService)(nil)),
		InputType:   reflect.TypeOf((*ModifyImageAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyImageAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["GrantImageToUsers"] = ServiceApiSpec{
		ServiceName:    "ImageService",
		ActionName:     "GrantImageToUsers",
		InputTypeName:  "GrantImageToUsersInput",
		OutputTypeName: "GrantImageToUsersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ImageService)(nil)),
		InputType:   reflect.TypeOf((*GrantImageToUsersInput)(nil)),
		OutputType:  reflect.TypeOf((*GrantImageToUsersOutput)(nil)),
	}
	ServiceApiSpecMap["RevokeImageFromUsers"] = ServiceApiSpec{
		ServiceName:    "ImageService",
		ActionName:     "RevokeImageFromUsers",
		InputTypeName:  "RevokeImageFromUsersInput",
		OutputTypeName: "RevokeImageFromUsersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ImageService)(nil)),
		InputType:   reflect.TypeOf((*RevokeImageFromUsersInput)(nil)),
		OutputType:  reflect.TypeOf((*RevokeImageFromUsersOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeImageUsers"] = ServiceApiSpec{
		ServiceName:    "ImageService",
		ActionName:     "DescribeImageUsers",
		InputTypeName:  "DescribeImageUsersInput",
		OutputTypeName: "DescribeImageUsersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ImageService)(nil)),
		InputType:   reflect.TypeOf((*DescribeImageUsersInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeImageUsersOutput)(nil)),
	}
	ServiceApiSpecMap["CloneImages"] = ServiceApiSpec{
		ServiceName:    "ImageService",
		ActionName:     "CloneImages",
		InputTypeName:  "CloneImagesInput",
		OutputTypeName: "CloneImagesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*ImageService)(nil)),
		InputType:   reflect.TypeOf((*CloneImagesInput)(nil)),
		OutputType:  reflect.TypeOf((*CloneImagesOutput)(nil)),
	}
}

func (p *ImageService) DescribeImages(input *DescribeImagesInput) (output *DescribeImagesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeImagesInput)
	}

	output = new(DescribeImagesOutput)
	err = client.CallMethod("DescribeImages", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ImageService) CaptureInstance(input *CaptureInstanceInput) (output *CaptureInstanceOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CaptureInstanceInput)
	}

	output = new(CaptureInstanceOutput)
	err = client.CallMethod("CaptureInstance", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ImageService) DeleteImages(input *DeleteImagesInput) (output *DeleteImagesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteImagesInput)
	}

	output = new(DeleteImagesOutput)
	err = client.CallMethod("DeleteImages", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ImageService) ModifyImageAttributes(input *ModifyImageAttributesInput) (output *ModifyImageAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyImageAttributesInput)
	}

	output = new(ModifyImageAttributesOutput)
	err = client.CallMethod("ModifyImageAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ImageService) GrantImageToUsers(input *GrantImageToUsersInput) (output *GrantImageToUsersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(GrantImageToUsersInput)
	}

	output = new(GrantImageToUsersOutput)
	err = client.CallMethod("GrantImageToUsers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ImageService) RevokeImageFromUsers(input *RevokeImageFromUsersInput) (output *RevokeImageFromUsersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RevokeImageFromUsersInput)
	}

	output = new(RevokeImageFromUsersOutput)
	err = client.CallMethod("RevokeImageFromUsers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ImageService) DescribeImageUsers(input *DescribeImageUsersInput) (output *DescribeImageUsersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeImageUsersInput)
	}

	output = new(DescribeImageUsersOutput)
	err = client.CallMethod("DescribeImageUsers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *ImageService) CloneImages(input *CloneImagesInput) (output *CloneImagesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CloneImagesInput)
	}

	output = new(CloneImagesOutput)
	err = client.CallMethod("CloneImages", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
