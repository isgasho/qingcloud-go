// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: security_group.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

type SecurityGroupServiceInterface interface {
	DescribeSecurityGroups(in *DescribeSecurityGroupsInput) (out *DescribeSecurityGroupsOutput, err error)
	CreateSecurityGroup(in *CreateSecurityGroupInput) (out *CreateSecurityGroupOutput, err error)
	DeleteSecurityGroups(in *DeleteSecurityGroupsInput) (out *DeleteSecurityGroupsOutput, err error)
	ApplySecurityGroup(in *ApplySecurityGroupInput) (out *ApplySecurityGroupOutpu, err error)
	ModifySecurityGroupAttributes(in *ModifySecurityGroupAttributesInput) (out *ModifySecurityGroupAttributesOutput, err error)
	DescribeSecurityGroupRules(in *DescribeSecurityGroupRulesInput) (out *DescribeSecurityGroupRulesOutput, err error)
	AddSecurityGroupRules(in *AddSecurityGroupRulesInput) (out *AddSecurityGroupRulesOutput, err error)
	DeleteSecurityGroupRules(in *DeleteSecurityGroupRulesInput) (out *DeleteSecurityGroupRulesOutput, err error)
	ModifySecurityGroupRuleAttributes(in *ModifySecurityGroupRuleAttributesInput) (out *ModifySecurityGroupRuleAttributesOutput, err error)
	CreateSecurityGroupSnapshot(in *CreateSecurityGroupSnapshotInput) (out *CreateSecurityGroupSnapshotOutput, err error)
	DescribeSecurityGroupSnapshots(in *DescribeSecurityGroupSnapshotsInput) (out *DescribeSecurityGroupSnapshotsOutput, err error)
	DeleteSecurityGroupSnapshots(in *DeleteSecurityGroupSnapshotsInput) (out *DeleteSecurityGroupSnapshotsOutput, err error)
	RollbackSecurityGroup(in *RollbackSecurityGroupInput) (out *RollbackSecurityGroupOutput, err error)
	DescribeSecurityGroupIPSets(in *DescribeSecurityGroupIPSetsInput) (out *DescribeSecurityGroupIPSetsOutput, err error)
	CreateSecurityGroupIPSet(in *CreateSecurityGroupIPSetInput) (out *CreateSecurityGroupIPSetOutput, err error)
	DeleteSecurityGroupIPSets(in *DeleteSecurityGroupIPSetsInput) (out *DeleteSecurityGroupIPSetsOutput, err error)
	ModifySecurityGroupIPSetAttributes(in *ModifySecurityGroupIPSetAttributesInput) (out *ModifySecurityGroupIPSetAttributesOutput, err error)
	CopySecurityGroupIPSets(in *CopySecurityGroupIPSetsInput) (out *CopySecurityGroupIPSetsOutput, err error)
}

type SecurityGroupService struct {
	ServerInfo *ServerInfo
}

func NewSecurityGroupService(server *ServerInfo) (p *SecurityGroupService) {
	return &SecurityGroupService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeSecurityGroups"] = ServiceApiSpec{
		ActionName: "DescribeSecurityGroups",
		InputType:  reflect.TypeOf((*DescribeSecurityGroupsInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeSecurityGroupsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["CreateSecurityGroup"] = ServiceApiSpec{
		ActionName: "CreateSecurityGroup",
		InputType:  reflect.TypeOf((*CreateSecurityGroupInput)(nil)),
		OutputType: reflect.TypeOf((*CreateSecurityGroupOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteSecurityGroups"] = ServiceApiSpec{
		ActionName: "DeleteSecurityGroups",
		InputType:  reflect.TypeOf((*DeleteSecurityGroupsInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteSecurityGroupsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ApplySecurityGroup"] = ServiceApiSpec{
		ActionName: "ApplySecurityGroup",
		InputType:  reflect.TypeOf((*ApplySecurityGroupInput)(nil)),
		OutputType: reflect.TypeOf((*ApplySecurityGroupOutpu)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifySecurityGroupAttributes"] = ServiceApiSpec{
		ActionName: "ModifySecurityGroupAttributes",
		InputType:  reflect.TypeOf((*ModifySecurityGroupAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifySecurityGroupAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeSecurityGroupRules"] = ServiceApiSpec{
		ActionName: "DescribeSecurityGroupRules",
		InputType:  reflect.TypeOf((*DescribeSecurityGroupRulesInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeSecurityGroupRulesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AddSecurityGroupRules"] = ServiceApiSpec{
		ActionName: "AddSecurityGroupRules",
		InputType:  reflect.TypeOf((*AddSecurityGroupRulesInput)(nil)),
		OutputType: reflect.TypeOf((*AddSecurityGroupRulesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteSecurityGroupRules"] = ServiceApiSpec{
		ActionName: "DeleteSecurityGroupRules",
		InputType:  reflect.TypeOf((*DeleteSecurityGroupRulesInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteSecurityGroupRulesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifySecurityGroupRuleAttributes"] = ServiceApiSpec{
		ActionName: "ModifySecurityGroupRuleAttributes",
		InputType:  reflect.TypeOf((*ModifySecurityGroupRuleAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifySecurityGroupRuleAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["CreateSecurityGroupSnapshot"] = ServiceApiSpec{
		ActionName: "CreateSecurityGroupSnapshot",
		InputType:  reflect.TypeOf((*CreateSecurityGroupSnapshotInput)(nil)),
		OutputType: reflect.TypeOf((*CreateSecurityGroupSnapshotOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeSecurityGroupSnapshots"] = ServiceApiSpec{
		ActionName: "DescribeSecurityGroupSnapshots",
		InputType:  reflect.TypeOf((*DescribeSecurityGroupSnapshotsInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeSecurityGroupSnapshotsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteSecurityGroupSnapshots"] = ServiceApiSpec{
		ActionName: "DeleteSecurityGroupSnapshots",
		InputType:  reflect.TypeOf((*DeleteSecurityGroupSnapshotsInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteSecurityGroupSnapshotsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["RollbackSecurityGroup"] = ServiceApiSpec{
		ActionName: "RollbackSecurityGroup",
		InputType:  reflect.TypeOf((*RollbackSecurityGroupInput)(nil)),
		OutputType: reflect.TypeOf((*RollbackSecurityGroupOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeSecurityGroupIPSets"] = ServiceApiSpec{
		ActionName: "DescribeSecurityGroupIPSets",
		InputType:  reflect.TypeOf((*DescribeSecurityGroupIPSetsInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeSecurityGroupIPSetsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["CreateSecurityGroupIPSet"] = ServiceApiSpec{
		ActionName: "CreateSecurityGroupIPSet",
		InputType:  reflect.TypeOf((*CreateSecurityGroupIPSetInput)(nil)),
		OutputType: reflect.TypeOf((*CreateSecurityGroupIPSetOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteSecurityGroupIPSets"] = ServiceApiSpec{
		ActionName: "DeleteSecurityGroupIPSets",
		InputType:  reflect.TypeOf((*DeleteSecurityGroupIPSetsInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteSecurityGroupIPSetsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifySecurityGroupIPSetAttributes"] = ServiceApiSpec{
		ActionName: "ModifySecurityGroupIPSetAttributes",
		InputType:  reflect.TypeOf((*ModifySecurityGroupIPSetAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifySecurityGroupIPSetAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["CopySecurityGroupIPSets"] = ServiceApiSpec{
		ActionName: "CopySecurityGroupIPSets",
		InputType:  reflect.TypeOf((*CopySecurityGroupIPSetsInput)(nil)),
		OutputType: reflect.TypeOf((*CopySecurityGroupIPSetsOutput)(nil)),
		HttpMethod: "GET",
	}
}

func (p *SecurityGroupService) DescribeSecurityGroups(input *DescribeSecurityGroupsInput) (output *DescribeSecurityGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeSecurityGroupsInput)
	}

	output = new(DescribeSecurityGroupsOutput)
	err = client.CallMethod("DescribeSecurityGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) CreateSecurityGroup(input *CreateSecurityGroupInput) (output *CreateSecurityGroupOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateSecurityGroupInput)
	}

	output = new(CreateSecurityGroupOutput)
	err = client.CallMethod("CreateSecurityGroup", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) DeleteSecurityGroups(input *DeleteSecurityGroupsInput) (output *DeleteSecurityGroupsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteSecurityGroupsInput)
	}

	output = new(DeleteSecurityGroupsOutput)
	err = client.CallMethod("DeleteSecurityGroups", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) ApplySecurityGroup(input *ApplySecurityGroupInput) (output *ApplySecurityGroupOutpu, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ApplySecurityGroupInput)
	}

	output = new(ApplySecurityGroupOutpu)
	err = client.CallMethod("ApplySecurityGroup", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) ModifySecurityGroupAttributes(input *ModifySecurityGroupAttributesInput) (output *ModifySecurityGroupAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifySecurityGroupAttributesInput)
	}

	output = new(ModifySecurityGroupAttributesOutput)
	err = client.CallMethod("ModifySecurityGroupAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) DescribeSecurityGroupRules(input *DescribeSecurityGroupRulesInput) (output *DescribeSecurityGroupRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeSecurityGroupRulesInput)
	}

	output = new(DescribeSecurityGroupRulesOutput)
	err = client.CallMethod("DescribeSecurityGroupRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) AddSecurityGroupRules(input *AddSecurityGroupRulesInput) (output *AddSecurityGroupRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddSecurityGroupRulesInput)
	}

	output = new(AddSecurityGroupRulesOutput)
	err = client.CallMethod("AddSecurityGroupRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) DeleteSecurityGroupRules(input *DeleteSecurityGroupRulesInput) (output *DeleteSecurityGroupRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteSecurityGroupRulesInput)
	}

	output = new(DeleteSecurityGroupRulesOutput)
	err = client.CallMethod("DeleteSecurityGroupRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) ModifySecurityGroupRuleAttributes(input *ModifySecurityGroupRuleAttributesInput) (output *ModifySecurityGroupRuleAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifySecurityGroupRuleAttributesInput)
	}

	output = new(ModifySecurityGroupRuleAttributesOutput)
	err = client.CallMethod("ModifySecurityGroupRuleAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) CreateSecurityGroupSnapshot(input *CreateSecurityGroupSnapshotInput) (output *CreateSecurityGroupSnapshotOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateSecurityGroupSnapshotInput)
	}

	output = new(CreateSecurityGroupSnapshotOutput)
	err = client.CallMethod("CreateSecurityGroupSnapshot", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) DescribeSecurityGroupSnapshots(input *DescribeSecurityGroupSnapshotsInput) (output *DescribeSecurityGroupSnapshotsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeSecurityGroupSnapshotsInput)
	}

	output = new(DescribeSecurityGroupSnapshotsOutput)
	err = client.CallMethod("DescribeSecurityGroupSnapshots", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) DeleteSecurityGroupSnapshots(input *DeleteSecurityGroupSnapshotsInput) (output *DeleteSecurityGroupSnapshotsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteSecurityGroupSnapshotsInput)
	}

	output = new(DeleteSecurityGroupSnapshotsOutput)
	err = client.CallMethod("DeleteSecurityGroupSnapshots", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) RollbackSecurityGroup(input *RollbackSecurityGroupInput) (output *RollbackSecurityGroupOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RollbackSecurityGroupInput)
	}

	output = new(RollbackSecurityGroupOutput)
	err = client.CallMethod("RollbackSecurityGroup", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) DescribeSecurityGroupIPSets(input *DescribeSecurityGroupIPSetsInput) (output *DescribeSecurityGroupIPSetsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeSecurityGroupIPSetsInput)
	}

	output = new(DescribeSecurityGroupIPSetsOutput)
	err = client.CallMethod("DescribeSecurityGroupIPSets", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) CreateSecurityGroupIPSet(input *CreateSecurityGroupIPSetInput) (output *CreateSecurityGroupIPSetOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateSecurityGroupIPSetInput)
	}

	output = new(CreateSecurityGroupIPSetOutput)
	err = client.CallMethod("CreateSecurityGroupIPSet", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) DeleteSecurityGroupIPSets(input *DeleteSecurityGroupIPSetsInput) (output *DeleteSecurityGroupIPSetsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteSecurityGroupIPSetsInput)
	}

	output = new(DeleteSecurityGroupIPSetsOutput)
	err = client.CallMethod("DeleteSecurityGroupIPSets", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) ModifySecurityGroupIPSetAttributes(input *ModifySecurityGroupIPSetAttributesInput) (output *ModifySecurityGroupIPSetAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifySecurityGroupIPSetAttributesInput)
	}

	output = new(ModifySecurityGroupIPSetAttributesOutput)
	err = client.CallMethod("ModifySecurityGroupIPSetAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *SecurityGroupService) CopySecurityGroupIPSets(input *CopySecurityGroupIPSetsInput) (output *CopySecurityGroupIPSetsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CopySecurityGroupIPSetsInput)
	}

	output = new(CopySecurityGroupIPSetsOutput)
	err = client.CallMethod("CopySecurityGroupIPSets", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
