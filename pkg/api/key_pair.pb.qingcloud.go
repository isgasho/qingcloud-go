// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: key_pair.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

func init() {
	TypeInfoMap["DescribeKeyPairsInput"] = reflect.TypeOf((*DescribeKeyPairsInput)(nil))
	TypeInfoMap["DescribeKeyPairsOutput"] = reflect.TypeOf((*DescribeKeyPairsOutput)(nil))
	TypeInfoMap["CreateKeyPairInput"] = reflect.TypeOf((*CreateKeyPairInput)(nil))
	TypeInfoMap["CreateKeyPairOutput"] = reflect.TypeOf((*CreateKeyPairOutput)(nil))
	TypeInfoMap["DeleteKeyPairsInput"] = reflect.TypeOf((*DeleteKeyPairsInput)(nil))
	TypeInfoMap["DeleteKeyPairsOutput"] = reflect.TypeOf((*DeleteKeyPairsOutput)(nil))
	TypeInfoMap["AttachKeyPairsInput"] = reflect.TypeOf((*AttachKeyPairsInput)(nil))
	TypeInfoMap["AttachKeyPairsOutput"] = reflect.TypeOf((*AttachKeyPairsOutput)(nil))
	TypeInfoMap["DetachKeyPairsInput"] = reflect.TypeOf((*DetachKeyPairsInput)(nil))
	TypeInfoMap["DetachKeyPairsOutput"] = reflect.TypeOf((*DetachKeyPairsOutput)(nil))
	TypeInfoMap["ModifyKeyPairAttributesInput"] = reflect.TypeOf((*ModifyKeyPairAttributesInput)(nil))
	TypeInfoMap["ModifyKeyPairAttributesOutput"] = reflect.TypeOf((*ModifyKeyPairAttributesOutput)(nil))
}

type KeyPairServiceInterface interface {
	DescribeKeyPairs(in *DescribeKeyPairsInput) (out *DescribeKeyPairsOutput, err error)
	CreateKeyPair(in *CreateKeyPairInput) (out *CreateKeyPairOutput, err error)
	DeleteKeyPairs(in *DeleteKeyPairsInput) (out *DeleteKeyPairsOutput, err error)
	AttachKeyPairs(in *AttachKeyPairsInput) (out *AttachKeyPairsOutput, err error)
	DetachKeyPairs(in *DetachKeyPairsInput) (out *DetachKeyPairsOutput, err error)
	ModifyKeyPairAttributes(in *ModifyKeyPairAttributesInput) (out *ModifyKeyPairAttributesOutput, err error)
}

type KeyPairService struct {
	ServerInfo *ServerInfo
}

func NewKeyPairService(server *ServerInfo) (p *KeyPairService) {
	return &KeyPairService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeKeyPairs"] = ServiceApiSpec{
		ServiceName:    "KeyPairService",
		ActionName:     "DescribeKeyPairs",
		InputTypeName:  "DescribeKeyPairsInput",
		OutputTypeName: "DescribeKeyPairsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*KeyPairService)(nil)),
		InputType:   reflect.TypeOf((*DescribeKeyPairsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeKeyPairsOutput)(nil)),
	}
	ServiceApiSpecMap["CreateKeyPair"] = ServiceApiSpec{
		ServiceName:    "KeyPairService",
		ActionName:     "CreateKeyPair",
		InputTypeName:  "CreateKeyPairInput",
		OutputTypeName: "CreateKeyPairOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*KeyPairService)(nil)),
		InputType:   reflect.TypeOf((*CreateKeyPairInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateKeyPairOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteKeyPairs"] = ServiceApiSpec{
		ServiceName:    "KeyPairService",
		ActionName:     "DeleteKeyPairs",
		InputTypeName:  "DeleteKeyPairsInput",
		OutputTypeName: "DeleteKeyPairsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*KeyPairService)(nil)),
		InputType:   reflect.TypeOf((*DeleteKeyPairsInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteKeyPairsOutput)(nil)),
	}
	ServiceApiSpecMap["AttachKeyPairs"] = ServiceApiSpec{
		ServiceName:    "KeyPairService",
		ActionName:     "AttachKeyPairs",
		InputTypeName:  "AttachKeyPairsInput",
		OutputTypeName: "AttachKeyPairsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*KeyPairService)(nil)),
		InputType:   reflect.TypeOf((*AttachKeyPairsInput)(nil)),
		OutputType:  reflect.TypeOf((*AttachKeyPairsOutput)(nil)),
	}
	ServiceApiSpecMap["DetachKeyPairs"] = ServiceApiSpec{
		ServiceName:    "KeyPairService",
		ActionName:     "DetachKeyPairs",
		InputTypeName:  "DetachKeyPairsInput",
		OutputTypeName: "DetachKeyPairsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*KeyPairService)(nil)),
		InputType:   reflect.TypeOf((*DetachKeyPairsInput)(nil)),
		OutputType:  reflect.TypeOf((*DetachKeyPairsOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyKeyPairAttributes"] = ServiceApiSpec{
		ServiceName:    "KeyPairService",
		ActionName:     "ModifyKeyPairAttributes",
		InputTypeName:  "ModifyKeyPairAttributesInput",
		OutputTypeName: "ModifyKeyPairAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*KeyPairService)(nil)),
		InputType:   reflect.TypeOf((*ModifyKeyPairAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyKeyPairAttributesOutput)(nil)),
	}
}

func (p *KeyPairService) DescribeKeyPairs(input *DescribeKeyPairsInput) (output *DescribeKeyPairsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeKeyPairsInput)
	}

	output = new(DescribeKeyPairsOutput)
	err = client.CallMethod("DescribeKeyPairs", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *KeyPairService) CreateKeyPair(input *CreateKeyPairInput) (output *CreateKeyPairOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateKeyPairInput)
	}

	output = new(CreateKeyPairOutput)
	err = client.CallMethod("CreateKeyPair", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *KeyPairService) DeleteKeyPairs(input *DeleteKeyPairsInput) (output *DeleteKeyPairsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteKeyPairsInput)
	}

	output = new(DeleteKeyPairsOutput)
	err = client.CallMethod("DeleteKeyPairs", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *KeyPairService) AttachKeyPairs(input *AttachKeyPairsInput) (output *AttachKeyPairsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AttachKeyPairsInput)
	}

	output = new(AttachKeyPairsOutput)
	err = client.CallMethod("AttachKeyPairs", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *KeyPairService) DetachKeyPairs(input *DetachKeyPairsInput) (output *DetachKeyPairsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DetachKeyPairsInput)
	}

	output = new(DetachKeyPairsOutput)
	err = client.CallMethod("DetachKeyPairs", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *KeyPairService) ModifyKeyPairAttributes(input *ModifyKeyPairAttributesInput) (output *ModifyKeyPairAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyKeyPairAttributesInput)
	}

	output = new(ModifyKeyPairAttributesOutput)
	err = client.CallMethod("ModifyKeyPairAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
