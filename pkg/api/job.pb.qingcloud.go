// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: job.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

func init() {
	TypeInfoMap["DescribeJobsInput"] = reflect.TypeOf((*DescribeJobsInput)(nil))
	TypeInfoMap["DescribeJobsOutput"] = reflect.TypeOf((*DescribeJobsOutput)(nil))
}

type JobServiceInterface interface {
	DescribeJobs(in *DescribeJobsInput) (out *DescribeJobsOutput, err error)
}

type JobService struct {
	ServerInfo *ServerInfo
}

func NewJobService(server *ServerInfo) (p *JobService) {
	return &JobService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeJobs"] = ServiceApiSpec{
		ServiceName:    "JobService",
		ActionName:     "DescribeJobs",
		InputTypeName:  "DescribeJobsInput",
		OutputTypeName: "DescribeJobsOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*JobService)(nil)),
		InputType:   reflect.TypeOf((*DescribeJobsInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeJobsOutput)(nil)),
	}
}

func (p *JobService) DescribeJobs(input *DescribeJobsInput) (output *DescribeJobsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeJobsInput)
	}

	output = new(DescribeJobsOutput)
	err = client.CallMethod("DescribeJobs", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
