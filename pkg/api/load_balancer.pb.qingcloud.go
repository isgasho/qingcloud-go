// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: load_balancer.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

type LoadBalancerServiceInterface interface {
	CreateLoadBalancer(in *CreateLoadBalancerInput) (out *CreateLoadBalancerOutput, err error)
	DescribeLoadBalancers(in *DescribeLoadBalancersInput) (out *DescribeLoadBalancersOutput, err error)
	DeleteLoadBalancers(in *DeleteLoadBalancersInput) (out *DeleteLoadBalancersOutput, err error)
	ModifyLoadBalancerAttributes(in *ModifyLoadBalancerAttributesInput) (out *ModifyLoadBalancerAttributesOutput, err error)
	StartLoadBalancers(in *StartLoadBalancersInput) (out *StartLoadBalancersOutput, err error)
	StopLoadBalancers(in *StopLoadBalancersInput) (out *StopLoadBalancersOutput, err error)
	UpdateLoadBalancers(in *UpdateLoadBalancersInput) (out *UpdateLoadBalancersOutput, err error)
	ResizeLoadBalancers(in *ResizeLoadBalancersInput) (out *ResizeLoadBalancersOutput, err error)
	AssociateEipsToLoadBalancer(in *AssociateEipsToLoadBalancerInput) (out *AssociateEipsToLoadBalancerOutput, err error)
	DissociateEipsFromLoadBalancer(in *DissociateEipsFromLoadBalancerInput) (out *DissociateEipsFromLoadBalancerOutput, err error)
	AddLoadBalancerListeners(in *AddLoadBalancerListenersInput) (out *AddLoadBalancerListenersOutput, err error)
	DescribeLoadBalancerListeners(in *DescribeLoadBalancerListenersInput) (out *DescribeLoadBalancerListenersOutput, err error)
	DeleteLoadBalancerListeners(in *DeleteLoadBalancerListenersInput) (out *DeleteLoadBalancerListenersOutput, err error)
	ModifyLoadBalancerListenerAttributes(in *ModifyLoadBalancerListenerAttributesInput) (out *ModifyLoadBalancerListenerAttributesOutput, err error)
	AddLoadBalancerBackends(in *AddLoadBalancerBackendsInput) (out *AddLoadBalancerBackendsOutput, err error)
	DescribeLoadBalancerBackends(in *DescribeLoadBalancerBackendsInput) (out *DescribeLoadBalancerBackendsOutput, err error)
	DeleteLoadBalancerBackends(in *DeleteLoadBalancerBackendsInput) (out *DeleteLoadBalancerBackendsOutput, err error)
	ModifyLoadBalancerBackendAttributes(in *ModifyLoadBalancerBackendAttributesInput) (out *ModifyLoadBalancerBackendAttributesOutput, err error)
	CreateLoadBalancerPolicy(in *CreateLoadBalancerPolicyInput) (out *CreateLoadBalancerPolicyOutput, err error)
	DescribeLoadBalancerPolicies(in *DescribeLoadBalancerPoliciesInput) (out *DescribeLoadBalancerPoliciesOutput, err error)
	ModifyLoadBalancerPolicyAttributes(in *ModifyLoadBalancerPolicyAttributesInput) (out *ModifyLoadBalancerPolicyAttributesOutput, err error)
	ApplyLoadBalancerPolicy(in *ApplyLoadBalancerPolicyInput) (out *ApplyLoadBalancerPolicyOutput, err error)
	DeleteLoadBalancerPolicies(in *DeleteLoadBalancerPoliciesInput) (out *DeleteLoadBalancerPoliciesOutput, err error)
	AddLoadBalancerPolicyRules(in *AddLoadBalancerPolicyRulesInput) (out *AddLoadBalancerPolicyRulesOutput, err error)
	DescribeLoadBalancerPolicyRules(in *DescribeLoadBalancerPolicyRulesInput) (out *DescribeLoadBalancerPolicyRulesOutput, err error)
	ModifyLoadBalancerPolicyRuleAttributes(in *ModifyLoadBalancerPolicyRuleAttributesInput) (out *ModifyLoadBalancerPolicyRuleAttributesOutput, err error)
	DeleteLoadBalancerPolicyRules(in *DeleteLoadBalancerPolicyRulesInput) (out *DeleteLoadBalancerPolicyRulesOutput, err error)
	CreateServerCertificate(in *CreateServerCertificateInput) (out *CreateServerCertificateOutput, err error)
	DescribeServerCertificates(in *DescribeServerCertificatesInput) (out *DescribeServerCertificatesOutput, err error)
	ModifyServerCertificateAttributes(in *ModifyServerCertificateAttributesInput) (out *ModifyServerCertificateAttributesOutput, err error)
	DeleteServerCertificates(in *DeleteServerCertificatesInput) (out *DeleteServerCertificatesOutput, err error)
}

type LoadBalancerService struct {
	ServerInfo *ServerInfo
}

func NewLoadBalancerService(server *ServerInfo) (p *LoadBalancerService) {
	return &LoadBalancerService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["CreateLoadBalancer"] = ServiceApiSpec{
		ActionName: "CreateLoadBalancer",
		InputType:  reflect.TypeOf((*CreateLoadBalancerInput)(nil)),
		OutputType: reflect.TypeOf((*CreateLoadBalancerOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeLoadBalancers"] = ServiceApiSpec{
		ActionName: "DescribeLoadBalancers",
		InputType:  reflect.TypeOf((*DescribeLoadBalancersInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeLoadBalancersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteLoadBalancers"] = ServiceApiSpec{
		ActionName: "DeleteLoadBalancers",
		InputType:  reflect.TypeOf((*DeleteLoadBalancersInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteLoadBalancersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyLoadBalancerAttributes"] = ServiceApiSpec{
		ActionName: "ModifyLoadBalancerAttributes",
		InputType:  reflect.TypeOf((*ModifyLoadBalancerAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyLoadBalancerAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["StartLoadBalancers"] = ServiceApiSpec{
		ActionName: "StartLoadBalancers",
		InputType:  reflect.TypeOf((*StartLoadBalancersInput)(nil)),
		OutputType: reflect.TypeOf((*StartLoadBalancersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["StopLoadBalancers"] = ServiceApiSpec{
		ActionName: "StopLoadBalancers",
		InputType:  reflect.TypeOf((*StopLoadBalancersInput)(nil)),
		OutputType: reflect.TypeOf((*StopLoadBalancersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["UpdateLoadBalancers"] = ServiceApiSpec{
		ActionName: "UpdateLoadBalancers",
		InputType:  reflect.TypeOf((*UpdateLoadBalancersInput)(nil)),
		OutputType: reflect.TypeOf((*UpdateLoadBalancersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ResizeLoadBalancers"] = ServiceApiSpec{
		ActionName: "ResizeLoadBalancers",
		InputType:  reflect.TypeOf((*ResizeLoadBalancersInput)(nil)),
		OutputType: reflect.TypeOf((*ResizeLoadBalancersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AssociateEipsToLoadBalancer"] = ServiceApiSpec{
		ActionName: "AssociateEipsToLoadBalancer",
		InputType:  reflect.TypeOf((*AssociateEipsToLoadBalancerInput)(nil)),
		OutputType: reflect.TypeOf((*AssociateEipsToLoadBalancerOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DissociateEipsFromLoadBalancer"] = ServiceApiSpec{
		ActionName: "DissociateEipsFromLoadBalancer",
		InputType:  reflect.TypeOf((*DissociateEipsFromLoadBalancerInput)(nil)),
		OutputType: reflect.TypeOf((*DissociateEipsFromLoadBalancerOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AddLoadBalancerListeners"] = ServiceApiSpec{
		ActionName: "AddLoadBalancerListeners",
		InputType:  reflect.TypeOf((*AddLoadBalancerListenersInput)(nil)),
		OutputType: reflect.TypeOf((*AddLoadBalancerListenersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeLoadBalancerListeners"] = ServiceApiSpec{
		ActionName: "DescribeLoadBalancerListeners",
		InputType:  reflect.TypeOf((*DescribeLoadBalancerListenersInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeLoadBalancerListenersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteLoadBalancerListeners"] = ServiceApiSpec{
		ActionName: "DeleteLoadBalancerListeners",
		InputType:  reflect.TypeOf((*DeleteLoadBalancerListenersInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteLoadBalancerListenersOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyLoadBalancerListenerAttributes"] = ServiceApiSpec{
		ActionName: "ModifyLoadBalancerListenerAttributes",
		InputType:  reflect.TypeOf((*ModifyLoadBalancerListenerAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyLoadBalancerListenerAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AddLoadBalancerBackends"] = ServiceApiSpec{
		ActionName: "AddLoadBalancerBackends",
		InputType:  reflect.TypeOf((*AddLoadBalancerBackendsInput)(nil)),
		OutputType: reflect.TypeOf((*AddLoadBalancerBackendsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeLoadBalancerBackends"] = ServiceApiSpec{
		ActionName: "DescribeLoadBalancerBackends",
		InputType:  reflect.TypeOf((*DescribeLoadBalancerBackendsInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeLoadBalancerBackendsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteLoadBalancerBackends"] = ServiceApiSpec{
		ActionName: "DeleteLoadBalancerBackends",
		InputType:  reflect.TypeOf((*DeleteLoadBalancerBackendsInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteLoadBalancerBackendsOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyLoadBalancerBackendAttributes"] = ServiceApiSpec{
		ActionName: "ModifyLoadBalancerBackendAttributes",
		InputType:  reflect.TypeOf((*ModifyLoadBalancerBackendAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyLoadBalancerBackendAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["CreateLoadBalancerPolicy"] = ServiceApiSpec{
		ActionName: "CreateLoadBalancerPolicy",
		InputType:  reflect.TypeOf((*CreateLoadBalancerPolicyInput)(nil)),
		OutputType: reflect.TypeOf((*CreateLoadBalancerPolicyOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeLoadBalancerPolicies"] = ServiceApiSpec{
		ActionName: "DescribeLoadBalancerPolicies",
		InputType:  reflect.TypeOf((*DescribeLoadBalancerPoliciesInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeLoadBalancerPoliciesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyLoadBalancerPolicyAttributes"] = ServiceApiSpec{
		ActionName: "ModifyLoadBalancerPolicyAttributes",
		InputType:  reflect.TypeOf((*ModifyLoadBalancerPolicyAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyLoadBalancerPolicyAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ApplyLoadBalancerPolicy"] = ServiceApiSpec{
		ActionName: "ApplyLoadBalancerPolicy",
		InputType:  reflect.TypeOf((*ApplyLoadBalancerPolicyInput)(nil)),
		OutputType: reflect.TypeOf((*ApplyLoadBalancerPolicyOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteLoadBalancerPolicies"] = ServiceApiSpec{
		ActionName: "DeleteLoadBalancerPolicies",
		InputType:  reflect.TypeOf((*DeleteLoadBalancerPoliciesInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteLoadBalancerPoliciesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["AddLoadBalancerPolicyRules"] = ServiceApiSpec{
		ActionName: "AddLoadBalancerPolicyRules",
		InputType:  reflect.TypeOf((*AddLoadBalancerPolicyRulesInput)(nil)),
		OutputType: reflect.TypeOf((*AddLoadBalancerPolicyRulesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DescribeLoadBalancerPolicyRules"] = ServiceApiSpec{
		ActionName: "DescribeLoadBalancerPolicyRules",
		InputType:  reflect.TypeOf((*DescribeLoadBalancerPolicyRulesInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeLoadBalancerPolicyRulesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyLoadBalancerPolicyRuleAttributes"] = ServiceApiSpec{
		ActionName: "ModifyLoadBalancerPolicyRuleAttributes",
		InputType:  reflect.TypeOf((*ModifyLoadBalancerPolicyRuleAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyLoadBalancerPolicyRuleAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteLoadBalancerPolicyRules"] = ServiceApiSpec{
		ActionName: "DeleteLoadBalancerPolicyRules",
		InputType:  reflect.TypeOf((*DeleteLoadBalancerPolicyRulesInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteLoadBalancerPolicyRulesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["CreateServerCertificate"] = ServiceApiSpec{
		ActionName: "CreateServerCertificate",
		InputType:  reflect.TypeOf((*CreateServerCertificateInput)(nil)),
		OutputType: reflect.TypeOf((*CreateServerCertificateOutput)(nil)),
		HttpMethod: "POST",
	}
	ServiceApiSpecMap["DescribeServerCertificates"] = ServiceApiSpec{
		ActionName: "DescribeServerCertificates",
		InputType:  reflect.TypeOf((*DescribeServerCertificatesInput)(nil)),
		OutputType: reflect.TypeOf((*DescribeServerCertificatesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["ModifyServerCertificateAttributes"] = ServiceApiSpec{
		ActionName: "ModifyServerCertificateAttributes",
		InputType:  reflect.TypeOf((*ModifyServerCertificateAttributesInput)(nil)),
		OutputType: reflect.TypeOf((*ModifyServerCertificateAttributesOutput)(nil)),
		HttpMethod: "GET",
	}
	ServiceApiSpecMap["DeleteServerCertificates"] = ServiceApiSpec{
		ActionName: "DeleteServerCertificates",
		InputType:  reflect.TypeOf((*DeleteServerCertificatesInput)(nil)),
		OutputType: reflect.TypeOf((*DeleteServerCertificatesOutput)(nil)),
		HttpMethod: "GET",
	}
}

func (p *LoadBalancerService) CreateLoadBalancer(input *CreateLoadBalancerInput) (output *CreateLoadBalancerOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateLoadBalancerInput)
	}

	output = new(CreateLoadBalancerOutput)
	err = client.CallMethod("CreateLoadBalancer", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DescribeLoadBalancers(input *DescribeLoadBalancersInput) (output *DescribeLoadBalancersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeLoadBalancersInput)
	}

	output = new(DescribeLoadBalancersOutput)
	err = client.CallMethod("DescribeLoadBalancers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DeleteLoadBalancers(input *DeleteLoadBalancersInput) (output *DeleteLoadBalancersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteLoadBalancersInput)
	}

	output = new(DeleteLoadBalancersOutput)
	err = client.CallMethod("DeleteLoadBalancers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) ModifyLoadBalancerAttributes(input *ModifyLoadBalancerAttributesInput) (output *ModifyLoadBalancerAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyLoadBalancerAttributesInput)
	}

	output = new(ModifyLoadBalancerAttributesOutput)
	err = client.CallMethod("ModifyLoadBalancerAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) StartLoadBalancers(input *StartLoadBalancersInput) (output *StartLoadBalancersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StartLoadBalancersInput)
	}

	output = new(StartLoadBalancersOutput)
	err = client.CallMethod("StartLoadBalancers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) StopLoadBalancers(input *StopLoadBalancersInput) (output *StopLoadBalancersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StopLoadBalancersInput)
	}

	output = new(StopLoadBalancersOutput)
	err = client.CallMethod("StopLoadBalancers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) UpdateLoadBalancers(input *UpdateLoadBalancersInput) (output *UpdateLoadBalancersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(UpdateLoadBalancersInput)
	}

	output = new(UpdateLoadBalancersOutput)
	err = client.CallMethod("UpdateLoadBalancers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) ResizeLoadBalancers(input *ResizeLoadBalancersInput) (output *ResizeLoadBalancersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ResizeLoadBalancersInput)
	}

	output = new(ResizeLoadBalancersOutput)
	err = client.CallMethod("ResizeLoadBalancers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) AssociateEipsToLoadBalancer(input *AssociateEipsToLoadBalancerInput) (output *AssociateEipsToLoadBalancerOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AssociateEipsToLoadBalancerInput)
	}

	output = new(AssociateEipsToLoadBalancerOutput)
	err = client.CallMethod("AssociateEipsToLoadBalancer", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DissociateEipsFromLoadBalancer(input *DissociateEipsFromLoadBalancerInput) (output *DissociateEipsFromLoadBalancerOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DissociateEipsFromLoadBalancerInput)
	}

	output = new(DissociateEipsFromLoadBalancerOutput)
	err = client.CallMethod("DissociateEipsFromLoadBalancer", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) AddLoadBalancerListeners(input *AddLoadBalancerListenersInput) (output *AddLoadBalancerListenersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddLoadBalancerListenersInput)
	}

	output = new(AddLoadBalancerListenersOutput)
	err = client.CallMethod("AddLoadBalancerListeners", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DescribeLoadBalancerListeners(input *DescribeLoadBalancerListenersInput) (output *DescribeLoadBalancerListenersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeLoadBalancerListenersInput)
	}

	output = new(DescribeLoadBalancerListenersOutput)
	err = client.CallMethod("DescribeLoadBalancerListeners", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DeleteLoadBalancerListeners(input *DeleteLoadBalancerListenersInput) (output *DeleteLoadBalancerListenersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteLoadBalancerListenersInput)
	}

	output = new(DeleteLoadBalancerListenersOutput)
	err = client.CallMethod("DeleteLoadBalancerListeners", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) ModifyLoadBalancerListenerAttributes(input *ModifyLoadBalancerListenerAttributesInput) (output *ModifyLoadBalancerListenerAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyLoadBalancerListenerAttributesInput)
	}

	output = new(ModifyLoadBalancerListenerAttributesOutput)
	err = client.CallMethod("ModifyLoadBalancerListenerAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) AddLoadBalancerBackends(input *AddLoadBalancerBackendsInput) (output *AddLoadBalancerBackendsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddLoadBalancerBackendsInput)
	}

	output = new(AddLoadBalancerBackendsOutput)
	err = client.CallMethod("AddLoadBalancerBackends", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DescribeLoadBalancerBackends(input *DescribeLoadBalancerBackendsInput) (output *DescribeLoadBalancerBackendsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeLoadBalancerBackendsInput)
	}

	output = new(DescribeLoadBalancerBackendsOutput)
	err = client.CallMethod("DescribeLoadBalancerBackends", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DeleteLoadBalancerBackends(input *DeleteLoadBalancerBackendsInput) (output *DeleteLoadBalancerBackendsOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteLoadBalancerBackendsInput)
	}

	output = new(DeleteLoadBalancerBackendsOutput)
	err = client.CallMethod("DeleteLoadBalancerBackends", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) ModifyLoadBalancerBackendAttributes(input *ModifyLoadBalancerBackendAttributesInput) (output *ModifyLoadBalancerBackendAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyLoadBalancerBackendAttributesInput)
	}

	output = new(ModifyLoadBalancerBackendAttributesOutput)
	err = client.CallMethod("ModifyLoadBalancerBackendAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) CreateLoadBalancerPolicy(input *CreateLoadBalancerPolicyInput) (output *CreateLoadBalancerPolicyOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateLoadBalancerPolicyInput)
	}

	output = new(CreateLoadBalancerPolicyOutput)
	err = client.CallMethod("CreateLoadBalancerPolicy", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DescribeLoadBalancerPolicies(input *DescribeLoadBalancerPoliciesInput) (output *DescribeLoadBalancerPoliciesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeLoadBalancerPoliciesInput)
	}

	output = new(DescribeLoadBalancerPoliciesOutput)
	err = client.CallMethod("DescribeLoadBalancerPolicies", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) ModifyLoadBalancerPolicyAttributes(input *ModifyLoadBalancerPolicyAttributesInput) (output *ModifyLoadBalancerPolicyAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyLoadBalancerPolicyAttributesInput)
	}

	output = new(ModifyLoadBalancerPolicyAttributesOutput)
	err = client.CallMethod("ModifyLoadBalancerPolicyAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) ApplyLoadBalancerPolicy(input *ApplyLoadBalancerPolicyInput) (output *ApplyLoadBalancerPolicyOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ApplyLoadBalancerPolicyInput)
	}

	output = new(ApplyLoadBalancerPolicyOutput)
	err = client.CallMethod("ApplyLoadBalancerPolicy", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DeleteLoadBalancerPolicies(input *DeleteLoadBalancerPoliciesInput) (output *DeleteLoadBalancerPoliciesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteLoadBalancerPoliciesInput)
	}

	output = new(DeleteLoadBalancerPoliciesOutput)
	err = client.CallMethod("DeleteLoadBalancerPolicies", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) AddLoadBalancerPolicyRules(input *AddLoadBalancerPolicyRulesInput) (output *AddLoadBalancerPolicyRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(AddLoadBalancerPolicyRulesInput)
	}

	output = new(AddLoadBalancerPolicyRulesOutput)
	err = client.CallMethod("AddLoadBalancerPolicyRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DescribeLoadBalancerPolicyRules(input *DescribeLoadBalancerPolicyRulesInput) (output *DescribeLoadBalancerPolicyRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeLoadBalancerPolicyRulesInput)
	}

	output = new(DescribeLoadBalancerPolicyRulesOutput)
	err = client.CallMethod("DescribeLoadBalancerPolicyRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) ModifyLoadBalancerPolicyRuleAttributes(input *ModifyLoadBalancerPolicyRuleAttributesInput) (output *ModifyLoadBalancerPolicyRuleAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyLoadBalancerPolicyRuleAttributesInput)
	}

	output = new(ModifyLoadBalancerPolicyRuleAttributesOutput)
	err = client.CallMethod("ModifyLoadBalancerPolicyRuleAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DeleteLoadBalancerPolicyRules(input *DeleteLoadBalancerPolicyRulesInput) (output *DeleteLoadBalancerPolicyRulesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteLoadBalancerPolicyRulesInput)
	}

	output = new(DeleteLoadBalancerPolicyRulesOutput)
	err = client.CallMethod("DeleteLoadBalancerPolicyRules", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) CreateServerCertificate(input *CreateServerCertificateInput) (output *CreateServerCertificateOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateServerCertificateInput)
	}

	output = new(CreateServerCertificateOutput)
	err = client.CallMethod("CreateServerCertificate", "POST", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DescribeServerCertificates(input *DescribeServerCertificatesInput) (output *DescribeServerCertificatesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeServerCertificatesInput)
	}

	output = new(DescribeServerCertificatesOutput)
	err = client.CallMethod("DescribeServerCertificates", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) ModifyServerCertificateAttributes(input *ModifyServerCertificateAttributesInput) (output *ModifyServerCertificateAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyServerCertificateAttributesInput)
	}

	output = new(ModifyServerCertificateAttributesOutput)
	err = client.CallMethod("ModifyServerCertificateAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *LoadBalancerService) DeleteServerCertificates(input *DeleteServerCertificatesInput) (output *DeleteServerCertificatesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteServerCertificatesInput)
	}

	output = new(DeleteServerCertificatesOutput)
	err = client.CallMethod("DeleteServerCertificates", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
