// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: instances.proto

package service

import (
	"fmt"
	"reflect"

	proto "github.com/golang/protobuf/proto"

	"github.com/chai2010/qingcloud-go/pkg/client"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Invalid

	_ = proto.Marshal
	_ = client.NewClient
)

func init() {
	TypeInfoMap["DescribeInstancesInput"] = reflect.TypeOf((*DescribeInstancesInput)(nil))
	TypeInfoMap["DescribeInstancesOutput"] = reflect.TypeOf((*DescribeInstancesOutput)(nil))
	TypeInfoMap["RunInstancesInput"] = reflect.TypeOf((*RunInstancesInput)(nil))
	TypeInfoMap["RunInstancesOutput"] = reflect.TypeOf((*RunInstancesOutput)(nil))
	TypeInfoMap["TerminateInstancesInput"] = reflect.TypeOf((*TerminateInstancesInput)(nil))
	TypeInfoMap["TerminateInstancesOutput"] = reflect.TypeOf((*TerminateInstancesOutput)(nil))
	TypeInfoMap["StartInstancesInput"] = reflect.TypeOf((*StartInstancesInput)(nil))
	TypeInfoMap["StartInstancesOutput"] = reflect.TypeOf((*StartInstancesOutput)(nil))
	TypeInfoMap["StopInstancesInput"] = reflect.TypeOf((*StopInstancesInput)(nil))
	TypeInfoMap["StopInstancesOutput"] = reflect.TypeOf((*StopInstancesOutput)(nil))
	TypeInfoMap["RestartInstancesInput"] = reflect.TypeOf((*RestartInstancesInput)(nil))
	TypeInfoMap["RestartInstancesOutput"] = reflect.TypeOf((*RestartInstancesOutput)(nil))
	TypeInfoMap["ResetInstancesInput"] = reflect.TypeOf((*ResetInstancesInput)(nil))
	TypeInfoMap["ResetInstancesOutput"] = reflect.TypeOf((*ResetInstancesOutput)(nil))
	TypeInfoMap["ResizeInstancesInput"] = reflect.TypeOf((*ResizeInstancesInput)(nil))
	TypeInfoMap["ResizeInstancesOutput"] = reflect.TypeOf((*ResizeInstancesOutput)(nil))
	TypeInfoMap["ModifyInstanceAttributesInput"] = reflect.TypeOf((*ModifyInstanceAttributesInput)(nil))
	TypeInfoMap["ModifyInstanceAttributesOutput"] = reflect.TypeOf((*ModifyInstanceAttributesOutput)(nil))
	TypeInfoMap["DescribeInstanceTypesInput"] = reflect.TypeOf((*DescribeInstanceTypesInput)(nil))
	TypeInfoMap["DescribeInstanceTypesOutput"] = reflect.TypeOf((*DescribeInstanceTypesOutput)(nil))
	TypeInfoMap["CreateBrokersInput"] = reflect.TypeOf((*CreateBrokersInput)(nil))
	TypeInfoMap["CreateBrokersOutput"] = reflect.TypeOf((*CreateBrokersOutput)(nil))
	TypeInfoMap["DeleteBrokersInput"] = reflect.TypeOf((*DeleteBrokersInput)(nil))
	TypeInfoMap["DeleteBrokersOutput"] = reflect.TypeOf((*DeleteBrokersOutput)(nil))
}

type InstanceServiceInterface interface {
	DescribeInstances(in *DescribeInstancesInput) (out *DescribeInstancesOutput, err error)
	RunInstances(in *RunInstancesInput) (out *RunInstancesOutput, err error)
	TerminateInstances(in *TerminateInstancesInput) (out *TerminateInstancesOutput, err error)
	StartInstances(in *StartInstancesInput) (out *StartInstancesOutput, err error)
	StopInstances(in *StopInstancesInput) (out *StopInstancesOutput, err error)
	RestartInstances(in *RestartInstancesInput) (out *RestartInstancesOutput, err error)
	ResetInstances(in *ResetInstancesInput) (out *ResetInstancesOutput, err error)
	ResizeInstances(in *ResizeInstancesInput) (out *ResizeInstancesOutput, err error)
	ModifyInstanceAttributes(in *ModifyInstanceAttributesInput) (out *ModifyInstanceAttributesOutput, err error)
	DescribeInstanceTypes(in *DescribeInstanceTypesInput) (out *DescribeInstanceTypesOutput, err error)
	CreateBrokers(in *CreateBrokersInput) (out *CreateBrokersOutput, err error)
	DeleteBrokers(in *DeleteBrokersInput) (out *DeleteBrokersOutput, err error)
}

type InstanceService struct {
	ServerInfo *ServerInfo
}

func NewInstanceService(server *ServerInfo) (p *InstanceService) {
	return &InstanceService{
		ServerInfo: server,
	}
}

func init() {
	ServiceApiSpecMap["DescribeInstances"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "DescribeInstances",
		InputTypeName:  "DescribeInstancesInput",
		OutputTypeName: "DescribeInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*DescribeInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeInstancesOutput)(nil)),
	}
	ServiceApiSpecMap["RunInstances"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "RunInstances",
		InputTypeName:  "RunInstancesInput",
		OutputTypeName: "RunInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*RunInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*RunInstancesOutput)(nil)),
	}
	ServiceApiSpecMap["TerminateInstances"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "TerminateInstances",
		InputTypeName:  "TerminateInstancesInput",
		OutputTypeName: "TerminateInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*TerminateInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*TerminateInstancesOutput)(nil)),
	}
	ServiceApiSpecMap["StartInstances"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "StartInstances",
		InputTypeName:  "StartInstancesInput",
		OutputTypeName: "StartInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*StartInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*StartInstancesOutput)(nil)),
	}
	ServiceApiSpecMap["StopInstances"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "StopInstances",
		InputTypeName:  "StopInstancesInput",
		OutputTypeName: "StopInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*StopInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*StopInstancesOutput)(nil)),
	}
	ServiceApiSpecMap["RestartInstances"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "RestartInstances",
		InputTypeName:  "RestartInstancesInput",
		OutputTypeName: "RestartInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*RestartInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*RestartInstancesOutput)(nil)),
	}
	ServiceApiSpecMap["ResetInstances"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "ResetInstances",
		InputTypeName:  "ResetInstancesInput",
		OutputTypeName: "ResetInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*ResetInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*ResetInstancesOutput)(nil)),
	}
	ServiceApiSpecMap["ResizeInstances"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "ResizeInstances",
		InputTypeName:  "ResizeInstancesInput",
		OutputTypeName: "ResizeInstancesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*ResizeInstancesInput)(nil)),
		OutputType:  reflect.TypeOf((*ResizeInstancesOutput)(nil)),
	}
	ServiceApiSpecMap["ModifyInstanceAttributes"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "ModifyInstanceAttributes",
		InputTypeName:  "ModifyInstanceAttributesInput",
		OutputTypeName: "ModifyInstanceAttributesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*ModifyInstanceAttributesInput)(nil)),
		OutputType:  reflect.TypeOf((*ModifyInstanceAttributesOutput)(nil)),
	}
	ServiceApiSpecMap["DescribeInstanceTypes"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "DescribeInstanceTypes",
		InputTypeName:  "DescribeInstanceTypesInput",
		OutputTypeName: "DescribeInstanceTypesOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*DescribeInstanceTypesInput)(nil)),
		OutputType:  reflect.TypeOf((*DescribeInstanceTypesOutput)(nil)),
	}
	ServiceApiSpecMap["CreateBrokers"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "CreateBrokers",
		InputTypeName:  "CreateBrokersInput",
		OutputTypeName: "CreateBrokersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*CreateBrokersInput)(nil)),
		OutputType:  reflect.TypeOf((*CreateBrokersOutput)(nil)),
	}
	ServiceApiSpecMap["DeleteBrokers"] = ServiceApiSpec{
		ServiceName:    "InstanceService",
		ActionName:     "DeleteBrokers",
		InputTypeName:  "DeleteBrokersInput",
		OutputTypeName: "DeleteBrokersOutput",
		HttpMethod:     "GET",

		ServiceType: reflect.TypeOf((*InstanceService)(nil)),
		InputType:   reflect.TypeOf((*DeleteBrokersInput)(nil)),
		OutputType:  reflect.TypeOf((*DeleteBrokersOutput)(nil)),
	}
}

func (p *InstanceService) DescribeInstances(input *DescribeInstancesInput) (output *DescribeInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeInstancesInput)
	}

	output = new(DescribeInstancesOutput)
	err = client.CallMethod("DescribeInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) RunInstances(input *RunInstancesInput) (output *RunInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RunInstancesInput)
	}

	output = new(RunInstancesOutput)
	err = client.CallMethod("RunInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) TerminateInstances(input *TerminateInstancesInput) (output *TerminateInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(TerminateInstancesInput)
	}

	output = new(TerminateInstancesOutput)
	err = client.CallMethod("TerminateInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) StartInstances(input *StartInstancesInput) (output *StartInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StartInstancesInput)
	}

	output = new(StartInstancesOutput)
	err = client.CallMethod("StartInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) StopInstances(input *StopInstancesInput) (output *StopInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(StopInstancesInput)
	}

	output = new(StopInstancesOutput)
	err = client.CallMethod("StopInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) RestartInstances(input *RestartInstancesInput) (output *RestartInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(RestartInstancesInput)
	}

	output = new(RestartInstancesOutput)
	err = client.CallMethod("RestartInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) ResetInstances(input *ResetInstancesInput) (output *ResetInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ResetInstancesInput)
	}

	output = new(ResetInstancesOutput)
	err = client.CallMethod("ResetInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) ResizeInstances(input *ResizeInstancesInput) (output *ResizeInstancesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ResizeInstancesInput)
	}

	output = new(ResizeInstancesOutput)
	err = client.CallMethod("ResizeInstances", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) ModifyInstanceAttributes(input *ModifyInstanceAttributesInput) (output *ModifyInstanceAttributesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(ModifyInstanceAttributesInput)
	}

	output = new(ModifyInstanceAttributesOutput)
	err = client.CallMethod("ModifyInstanceAttributes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) DescribeInstanceTypes(input *DescribeInstanceTypesInput) (output *DescribeInstanceTypesOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DescribeInstanceTypesInput)
	}

	output = new(DescribeInstanceTypesOutput)
	err = client.CallMethod("DescribeInstanceTypes", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) CreateBrokers(input *CreateBrokersInput) (output *CreateBrokersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(CreateBrokersInput)
	}

	output = new(CreateBrokersOutput)
	err = client.CallMethod("CreateBrokers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) DeleteBrokers(input *DeleteBrokersInput) (output *DeleteBrokersOutput, err error) {
	client := client.NewClient(
		p.ServerInfo.GetApiServer(),
		p.ServerInfo.GetAccessKeyId(),
		p.ServerInfo.GetSecretAccessKey(),
		p.ServerInfo.GetZone(),
	)

	if input == nil {
		input = new(DeleteBrokersInput)
	}

	output = new(DeleteBrokersOutput)
	err = client.CallMethod("DeleteBrokers", "GET", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
