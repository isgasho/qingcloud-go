// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/go-sdk
// source: instances.proto

package service

import proto "github.com/golang/protobuf/proto"
import "fmt"

import "github.com/chai2010/qingcloud-go/pkg/client"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = proto.Marshal

var _ = client.NewClient

type InstanceServiceInterface interface {
	DescribeInstances(in *DescribeInstancesInput) (out *DescribeInstancesOutput, err error)
	RunInstances(in *RunInstancesInput) (out *RunInstancesOutput, err error)
	TerminateInstances(in *TerminateInstancesInput) (out *TerminateInstancesOutput, err error)
	StartInstances(in *StartInstancesInput) (out *StartInstancesOutput, err error)
	StopInstances(in *StopInstancesInput) (out *StopInstancesOutput, err error)
	RestartInstances(in *RestartInstancesInput) (out *RestartInstancesOutput, err error)
	ResetInstances(in *ResetInstancesInput) (out *ResetInstancesOutput, err error)
	ResizeInstances(in *ResizeInstancesInput) (out *ResizeInstancesOutput, err error)
	ModifyInstanceAttributes(in *ModifyInstanceAttributesInput) (out *ModifyInstanceAttributesOutput, err error)
	DescribeInstanceTypes(in *DescribeInstanceTypesInput) (out *DescribeInstanceTypesOutput, err error)
	CreateBrokers(in *CreateBrokersInput) (out *CreateBrokersOutput, err error)
	DeleteBrokers(in *DeleteBrokersInput) (out *DeleteBrokersOutput, err error)
}

type InstanceService struct {
	Properties       *InstanceServiceProperties
	LastResponseBody string
}

func NewInstanceService(accessKeyId, secretAccessKey, zone string) (p *InstanceService) {
	return &InstanceService{
		Properties: &InstanceServiceProperties{Zone: proto.String(zone)},
	}
}

func (p *InstanceService) DescribeInstances(input *DescribeInstancesInput) (output *DescribeInstancesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DescribeInstancesOutput)

	err = client.CallMethod(nil, "DescribeInstances", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) RunInstances(input *RunInstancesInput) (output *RunInstancesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(RunInstancesOutput)

	err = client.CallMethod(nil, "RunInstances", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) TerminateInstances(input *TerminateInstancesInput) (output *TerminateInstancesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(TerminateInstancesOutput)

	err = client.CallMethod(nil, "TerminateInstances", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) StartInstances(input *StartInstancesInput) (output *StartInstancesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(StartInstancesOutput)

	err = client.CallMethod(nil, "StartInstances", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) StopInstances(input *StopInstancesInput) (output *StopInstancesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(StopInstancesOutput)

	err = client.CallMethod(nil, "StopInstances", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) RestartInstances(input *RestartInstancesInput) (output *RestartInstancesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(RestartInstancesOutput)

	err = client.CallMethod(nil, "RestartInstances", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) ResetInstances(input *ResetInstancesInput) (output *ResetInstancesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(ResetInstancesOutput)

	err = client.CallMethod(nil, "ResetInstances", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) ResizeInstances(input *ResizeInstancesInput) (output *ResizeInstancesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(ResizeInstancesOutput)

	err = client.CallMethod(nil, "ResizeInstances", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) ModifyInstanceAttributes(input *ModifyInstanceAttributesInput) (output *ModifyInstanceAttributesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(ModifyInstanceAttributesOutput)

	err = client.CallMethod(nil, "ModifyInstanceAttributes", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) DescribeInstanceTypes(input *DescribeInstanceTypesInput) (output *DescribeInstanceTypesOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DescribeInstanceTypesOutput)

	err = client.CallMethod(nil, "DescribeInstanceTypes", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) CreateBrokers(input *CreateBrokersInput) (output *CreateBrokersOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(CreateBrokersOutput)

	err = client.CallMethod(nil, "CreateBrokers", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}

func (p *InstanceService) DeleteBrokers(input *DeleteBrokersInput) (output *DeleteBrokersOutput, err error) {
	client := client.NewClient("", "", nil)
	output = new(DeleteBrokersOutput)

	err = client.CallMethod(nil, "DeleteBrokers", input, output, nil)
	if err != nil {
		return nil, err
	}

	return
}
