// Copyright 2017 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a Apache
// license that can be found in the LICENSE file.

syntax = "proto2";

package service;

import "types.proto";
import "spec_metadata/spec.proto";

// ----------------------------------------------------------------------------
// https://docs.qingcloud.com/api/spark/index.html
// ----------------------------------------------------------------------------

service SparkService {
	option (qingcloud.api.spec_metadata.service_option) = {
		external_docs: {
			url: "https://docs.qingcloud.com/api/spark/index.html"
		}
	};

	rpc CreateSpark(CreateSparkInput) returns (CreateSparkOutput);
	rpc DescribeSparks(DescribeSparksInput) returns (DescribeSparksOutput);
	rpc AddSparkNodes(AddSparkNodesInput) returns (AddSparkNodesOutput);
	rpc DeleteSparkNodes(DeleteSparkNodesInput) returns (DeleteSparkNodesOutput);
	rpc StartSparks(StartSparksInput) returns (StartSparksOutput);
	rpc StopSparks(StopSparksInput) returns (StopSparksOutput);
	rpc DeleteSparks(DeleteSparksInput) returns (DeleteSparksOutput);
}

// ----------------------------------------------------------------------------

message CreateSparkInput {
	optional string spark_version = 1;
	optional int32 node_count = 2;
	optional int32 enable_hdfs = 3;
	optional int32 spark_type = 4;
	optional int32 storage_size = 5;
	optional string vxnet = 6;
	optional string description = 7;
	optional string spark_name = 8;
	optional int32 spark_class = 9;
	repeated SparkPrivateIps private_ips = 10;
}
message CreateSparkOutput {
	optional string action = 1;
	optional int32 ret_code = 2;
	optional string message = 3;

	optional string spark_id = 4;
	optional string spark_name = 5;
	optional string spark_version = 6;
	optional string vxnet_id = 7;
	repeated string spark_node_ids = 8;
}

// ----------------------------------------------------------------------------

message DescribeSparksInput {
	repeated string sparks = 1;
	repeated string status = 2;
	optional string search_word = 3;
	repeated string tags = 4;
	optional int32 verbose = 5;
	optional int32 offset = 6;
	optional int32 limit = 7;
}
message DescribeSparksOutput {
	optional string action = 1;
	optional int32 ret_code = 2;
	optional string message = 3;

	repeated string spark_set = 4;
	optional int32 total_count = 5;
}

// ----------------------------------------------------------------------------

message AddSparkNodesInput {
	optional string spark = 1;
	optional int32 node_count = 2;
	optional string spark_node_name = 3;
	repeated SparkPrivateIps private_ips = 4;
}
message AddSparkNodesOutput {
	optional string action = 1;
	optional int32 ret_code = 2;
	optional string message = 3;

	optional string spark_id = 4;
	repeated string spark_new_node_ids = 5;
}

// ----------------------------------------------------------------------------

message DeleteSparkNodesInput {
	optional string spark = 1;
	repeated string spark_nodes = 2;
}
message DeleteSparkNodesOutput {
	optional string action = 1;
	optional int32 ret_code = 2;
	optional string message = 3;

	optional string spark_id = 4;
}

// ----------------------------------------------------------------------------

message StartSparksInput {
	repeated string sparks = 1;
}
message StartSparksOutput {
	optional string action = 1;
	optional int32 ret_code = 2;
	optional string message = 3;

	optional string job_id = 4;
}

// ----------------------------------------------------------------------------

message StopSparksInput {
	repeated string sparks = 1;
}
message StopSparksOutput {
	optional string action = 1;
	optional int32 ret_code = 2;
	optional string message = 3;

	optional string job_id = 4;
}

// ----------------------------------------------------------------------------

message DeleteSparksInput {
	repeated string sparks = 1;
}
message DeleteSparksOutput {
	optional string action = 1;
	optional int32 ret_code = 2;
	optional string message = 3;

	repeated string spark_ids = 4;
	optional string job_id = 5;
}

// ----------------------------------------------------------------------------
// END
// ----------------------------------------------------------------------------
